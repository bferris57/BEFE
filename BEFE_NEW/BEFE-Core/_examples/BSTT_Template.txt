//---------------------------------------------------------------------
// File: BSTT_Template.txt - Sample Byte State Transition Table (BSTT)
//---------------------------------------------------------------------
//
// This non-compilable "header file" demonstrates a usable and readible
// template/commenting style for building a Byte State Transition Table
// or BSTT.
//
// In BEFE, BSTTs are used for Lexical analysis, Terminal emulation,
// and. possibly in the future, in many other appropriate places where
// we need incredibly quick Byte sequence recognition and handling.
//
// The idea's an old but tried and true one...  Given a State 'yyy' and
// an input Byte 'xxx', perform action and change state.
//
// In most input languages (or terminal escape sequences, etc.) there
// are surprisingly few distinct action/state pairs required to behave
// very intelligently.
//
// Most "old time" implementations were working in extremely limited
// memory environments (like less than 64KB, believe it or not), so
// it was fairly standard to cut down on the BSTT definition table
// size by having a list of range/action pairs followed by a UNKNOWN
// action to perform if the input byte didn't match.
//
// However, these days we have more memory than we could even care to
// use efficiently, so we err on the side of speed instead of 
// compactness.  Hence, the 129 Byte tables presented here...
//
// *** See technical documentation for a more detailed description ***
//
// Note: Fill the 'xxx' entries in with a pre-defined three letter
//       uppercase macros, each identifying an ACTION/STATE pair
//       enum and it'll work and read just fine visually.
//
// Note: Since UTF-8 sequences start at 0x80 and on up, our standard
//       CSTT can be cut in half (plus one byte) so it only has entries
//       for 0x00..0x80, where 0x80 is where it goes if the input Byte
//       is 0x80..0xFF.  
//
// Note: We may have to change this later if some enthusiastic spark
//       decides to start coding input and base languages using Unicode
//       characters as syntactic delimimets or operators.  But we'll
//       burn that bridge when we come to it...
//
//---------------------------------------------------------------------
// Copyright (©) 2011, Bruce Ferris (UK), all rights reserved
//---------------------------------------------------------------------

Byte BSTT[129] = {

  //  00  01  02  03  04  05  06  07  08  09  0A  0B  0C  0D  0E  0F  //
  // NUL SOH STX ETX EOT ENQ ACK BEL  BS  HT  LF  VT  FF  CR  SO  SI  //
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // ................
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // ................
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
  // DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN  EM SUB ESC  FS  GS  RS  US  //
  //  10  11  12  13  14  15  16  17  18  19  1A  1B  1C  1D  1E  1F  //

  //  20  21  22  23  24  25  26  27  28  29  2A  2B  2C  2D  2E  2F  //
  //  SP   !   "   #   $   %   &   '   (   )   *   +   ,   -   .   /  //
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // .!"#$%&'()*+,-./
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // 0123456789:;<=>?
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
  //   0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ?  //
  //  30  31  32  33  34  35  36  37  38  39  3A  3B  3C  3D  3E  3F  //

  //  40  41  42  43  44  45  46  47  48  49  4A  4B  4C  4D  4E  4F  //
  //   @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O  //
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // @ABCDEFGHIJKLMNO
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // PQRSTUVWXYZ[\]^_
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
  //   P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _  //
  //  50  51  52  53  54  55  56  57  58  59  5A  5B  5C  5D  5E  5F  //

  //  60  61  62  63  64  65  66  67  68  69  6A  6B  6C  6D  6E  6F  //
  //   `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o  //
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // `abcdefghijklmno
     xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx, // pqrstuvwxyz{|}~ 
  // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---  //
  //   p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~      //
  //  70  71  72  73  74  75  76  77  78  79  7A  7B  7C  7D  7E  7F  //

  //  80..8F                                                          // UTF-8...
  //  UTF-8...
     xxx                                                              //
  };