head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.18;

1.18
date	2002.11.02.17.30.17;	author bferris;	state Exp;
branches;
next	1.17;

1.17
date	2002.10.30.06.18.10;	author bferris;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.29.06.12.50;	author bferris;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.27.11.10.13;	author bferris;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.26.06.28.35;	author bferris;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.25.21.40.08;	author bferris;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.23.13.05.43;	author bferris;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.23.07.42.41;	author bferris;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.21.10.41.21;	author bferris;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.21.07.16.08;	author bferris;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.21.07.11.16;	author bferris;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.21.05.41.43;	author bferris;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.20.07.43.32;	author bferris;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.19.14.37.35;	author bferris;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.16.04.34.02;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.15.06.13.26;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.14.21.15.44;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.14.20.07.07;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    xmlcsrbase.h - Definitions for the XMLCursorBase class
  
  DESCRIPTION
    
    This file contains the definitions for base implementations of
    the XMLCursors.
    
  CLASSES
  
    XMLCursorBase - All cursors specialise this class
    XMLCursorReader - All constructor cursors specialise this class
    XMLCursorWriter - All cursors that write to a stream specialise this class
    
*/

#ifndef _xmlcsrbase_h

#define _xmlcsrbase_h

#include "xml.h"
#include "xmldocbase.h"
#include "xmlstrbase.h"

// Forward Classes
class XMLCursorBase;
class XMLCursorReader;
class XMLCursorWriter;

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLCursorBase - A Position in an XML document
//
// DESCRIPTION
//
//  This class represents a single position in an XML document (quite
//  similiar to an XPath path).
//

class XMLCursorBase : public XMLCursor {

  friend class XMLDocumentBase;
  
  //
  // Public member functions
  //
public:
  // Constructors/destructors
  XMLCursorBase(XMLDocumentBase *doc);
  virtual ~XMLCursorBase();
  
  // Positioning
  virtual XMLError Top(void);
  virtual XMLError Up(void);
  virtual XMLError Down(void);
  virtual XMLError Next(void);
  
  // Walking
  virtual XMLError Walk(void);
  
  // Position query
  virtual XMLError GetURI(XMLString **uri);
  virtual XMLError Count(int *count);
  virtual XMLError GetDepth(int *depth);
  virtual XMLError GetElementNumber(int *elemno,int *depth);

  // Element query
  virtual XMLError GetElementClass(XML::Class *eclass);
  virtual XMLError GetElementType(XMLString **type);
  virtual XMLError GetElementValidity(XML::Validity *validity);
  virtual XMLError GetElementValue(XMLString **value);
  
  // Attribute query
  virtual XMLError GetAttributeCount(int *count);
  virtual XMLError FindAttribute(XMLString *name);
  virtual XMLError GetAttributeValue(XMLString *name, XMLString **value);

  // Parse error (if parsing cursor)
  virtual XMLError GetLastParseError(XMLLocation *location);
     
  // Adding to structure
  virtual XMLError NewElementAfter(XML::Class eclass, XMLElementBase **element);
  virtual XMLError NewElementBelow(XML::Class eclass, XMLElementBase **element);
  
  //
  // Protected typedefs
  //
protected:
  
  typedef struct {
    XMLElementBase *element;  // Element
    int             entryno;  // Entry number (1..n) in parent
  } StackEntry;
  
  //
  // Protected member functions
  //
  
protected:
  // Cursor comparison
  XMLError Compare(XMLCursor *that,int *comparison);
  XMLError CommonWith(XMLCursor *that, int *depth);
  
  // Stack manipulation helpers
  XMLError    Pop(void);
  XMLError    Push(XMLElementBase *element = NULL, int entryno = 0);
  StackEntry *TOS(void);
  
  // Cursor registration
  XMLError    RegisterAsConstructor(void);
  XMLError    UnregisterAsConstructor(void);
  XMLError    RegisterAsDestructor(void);
  XMLError    UnregisterAsDestructor(void);
  XMLError    RegisterAsCursor(void);
  XMLError    UnregisterAsCursor(void);
  
  // Managing tokens
  XMLError    NewToken(XMLString *string, XMLToken *token = NULL);
  XMLError    ResolveString(XMLString *string, XMLToken *token);
  XMLError    ReleaseToken(XMLToken *token);
  XMLError    HighestToken(XMLToken *hightoken);
  int         UsedTokens(void);
  XMLError    ResolveToken(XMLToken token, XMLString **value);
  XMLError    RegisterInputString(XMLString *instring);
  
  //
  // Protected members
  //
protected:
  // Document's cursor chain
  XMLDocumentBase *m_document;
  XMLCursorBase   *m_nextcursor;
  XMLCursorBase   *m_prevcursor;
  
  // Position stack
  int              m_maxstacksize;
  int              m_stacksize;
  StackEntry      *m_stack;
  
  // Statistics
  int              m_highwidth;  // Highest element number we've gone to
  int              m_highdepth;  // Deepest depth we've gone to  
  
  // Parse error
  XMLError         m_parseerror;
  XMLLocation      m_parselocation;
}; 

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLCursorReader - A constructing cursor
//
// DESCRIPTION
//
//  This class represents a cursor that can construct XML documents in-memory
//  on the fly.
//

class XMLCursorReader : public XMLCursorBase {

  //
  // Public member functions
  //
public:
  // Constructors/destructors
  XMLCursorReader(XMLDocumentBase *doc, XMLString *string);
  virtual ~XMLCursorReader();
  
  //
  // Protected members
  //
protected:

  // The string we're parsing
  XMLStringBase *m_string;    // Input string (with fragments)
  int            m_stringlen; // String's length

};

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLCursorWriter - A cursor that outputs XML in some form to a string
//
// DESCRIPTION
//
//  This class represents a cursor that can partially write a document (or
//  part of it) into an XML string.
//
// NOTES
//
//  This class implements a common buffered "Emitting" mechanism to account
//  for the fact that some strings may be very slow emitting single bytes.
//

class XMLCursorWriter : public XMLCursorBase {
  
  friend class XMLCursorBase;
  friend class XMLDocumentBase;
  
  //
  // Public member functions
  //
public:
  // Constructors/destructors
  XMLCursorWriter(XMLDocumentBase *doc, XMLString *string);
  virtual ~XMLCursorWriter();
  
  // Writing
  virtual XMLError Write(void) = 0;
  
  // Emitting bytes
  virtual XMLError Emit(XMLString *string);
  virtual XMLError Emit(char *str, int bufl = -1);
  virtual XMLError Emit(byte *buf, int bufl = 1);
  virtual XMLError Flush(void);
      
  //
  // Protected members
  //
protected:
  
  // The string we're writing to
  XMLStringBase *m_string;

  // Buffered output (the string may be really slow emitting single bytes)
  int            m_bufsize; // Allocated size of buffer
  int            m_buflen;  // Bytes, so far, in the buffer
  byte          *m_buf;     // Allocated buffer
};

#endif // _xmlcsrbase_h
@


1.18
log
@Read compiled works, need to figure out why it's slower than text!
@
text
@d48 1
a48 2
  friend XMLCursorBase;
  friend XMLDocumentBase;
d206 3
a208 2
  friend XMLCursorBase;
  friend XMLDocumentBase;
@


1.17
log
@Started on compile reader
@
text
@d126 1
@


1.16
log
@Added RegisterInputString() to XMLDocumentBase
@
text
@d125 1
a125 1
  XMLError    NewToken(XMLString *string, XMLToken *token);
@


1.15
log
@Moved parser to xmlcsrtext, generic Reader/Writer cursors
@
text
@d130 1
@


1.14
log
@XMLCursorCompileWrite written, ready to test
@
text
@d10 9
a18 2
    This file contains the definitions for base implementation of
    the XMLCursor class.
d27 6
d116 1
a116 1
  // Constructor/destructor registration
d121 2
d153 85
@


1.13
log
@Plugged compile write into manager... Need to write emit functions
@
text
@d114 1
@


1.12
log
@All tokenised, ready to test
@
text
@d109 1
a109 1
  // Creating/releasing tokens
d112 2
@


1.11
log
@Changed 'Type' to 'Class' and 'Name' to 'Type'
@
text
@d109 4
@


1.10
log
@Added GetParseError() to doc and cursor and tester
@
text
@d62 2
a63 2
  virtual XMLError GetElementType(XML::Type *type);
  virtual XMLError GetElementName(XMLString **name);
d76 2
a77 2
  virtual XMLError NewElementAfter(XML::Type type, XMLElementBase **element);
  virtual XMLError NewElementBelow(XML::Type type, XMLElementBase **element);
@


1.9
log
@Removed all : protected and : private (need to use friend instead)
@
text
@d72 3
a78 4
  // Statistics
  int HighestWidth(void);
  int HighestDepth(void);
   
d126 4
@


1.8
log
@Added XMLElementBase, got rid of XMLElement (it's not exposed in API)
@
text
@d33 1
a33 1
class XMLCursorBase : protected XMLCursor {
@


1.7
log
@Implemented XMLDocumentBase
@
text
@d73 2
a74 2
  virtual XMLError NewElementAfter(XML::Type type, XMLElement **element);
  virtual XMLError NewElementBelow(XML::Type type, XMLElement **element);
d86 2
a87 2
    XMLElement *element;  // Element
    int         entryno;  // Entry number (1..n) in parent
d101 1
a101 1
  XMLError    Push(XMLElement *element = NULL, int entryno = 0);
@


1.6
log
@More readiness for destructor

Plugged in width/depth counters and stat query.

Made constructor delete itself after it's job was finished.  It
registers it's width/depth with document before destroying itself.
@
text
@d19 1
d36 1
a36 1
  friend XMLDocument;
d43 1
a43 1
  XMLCursorBase(XMLDocument *doc);
d115 3
a117 3
  XMLDocument   *m_document;
  XMLCursorBase *m_nextcursor;
  XMLCursorBase *m_prevcursor;
d120 3
a122 3
  int         m_maxstacksize;
  int         m_stacksize;
  StackEntry *m_stack;
d125 2
a126 2
  int         m_highwidth;           // Highest element number we've gone to
  int         m_highdepth;           // Deepest depth we've gone to  
@


1.5
log
@Ready to test parser for real!
@
text
@d74 4
d121 5
a125 1
  StackEntry *m_stack;  
@


1.4
log
@Changed Iterate() to Walk(), ready to write parser
@
text
@d71 4
@


1.3
log
@Added XMLCursorParser and constructor registration functions
@
text
@d51 3
@


1.2
log
@More XMLCursor behaviour - won't compile yet
@
text
@d91 7
@


1.1
log
@Finished initial XMLCursorBase implementation
@
text
@d48 2
d55 1
a55 1
  virtual XMLError GetElementNumber(int *elemno,int *depth = NULL);
@

