#──────────────────────────────────────────────────────────────────────
# File: Journal.txt - Bruce's BEFE Timesheet/Journal
#──────────────────────────────────────────────────────────────────────
#
# Bruce's BEFE Timesheet and Log
#
# Notes: Search for 'EYEON' for problems that magically went away but
#        we're not convinced will always stay away so they'll need 
#        to be looked at again just to make sure.
#
#        1) The dates in each one are when they were first entered here.
# 
#           From time to time we'll reorganise them to put the high priority
#           ones higher in the list.
#
#        2) When they're completed we'll precede them with a '√'
#
#        3) If we decide NOT to do one of these it'll be marked with a 'Х'
#           and only kept here for a reminder.
#        
#──────────────────────────────────────────────────────────────────────
# Copyright (©) 2011-2017, Bruce Ferris (UK)
#──────────────────────────────────────────────────────────────────────

#──────────────────────────────────────────────────────────────────────
#
# TODO Short term
#
#──────────────────────────────────────────────────────────────────────

  2017-07-27: Need to fix indentChildren(), seems to not work anymore
              during Pass2.
              
              Ahhh... It's because we're basing indentation on previous
              child's indentation.  Need to add 'stmtWord' for 'if', 'do', etc.
              because previous child's word0 doesn't mean a thing since
              we want to allow "The Mouse's Tale" (see http://bootless.net/mouse.html)
              Should use parent.stmtWord for that, forget about previous child...
              
  2017-07-24: Implement "name/type" node recogniser
              Note: Goes into new pass 1.6
  
  2017-07-05: Handle/sub-populate 'number' tokens, specialising them into 'float','long', etc.      

  2017-07-13: Implement ParseNode.resolvedType
  
  2017-07-12: Python hack: Operator '?' to print expression nodes
  
  2017-07-11: Get Sugar implemented
              Note: Pass 6 (Structural Sugar).. Under operator:() and operator:[]...
                      keyvalue[a,b]          into span(a,b)
                      keyvalue[a,b][c]       into span(a,b,c)
                      range[a,b]             into range(a,b)
                      range(<range>[a,b][c]) into range(a,b,c)
              
  2017-07-11: Get following phases implemented...
              √ 1) Lexical
                2) Structural
                3) Grammatical
                4) Generation

  2017-07-05: Python -> C++ conversion.
  
  2017-07-07: C++ - Heap class, preparing for multi-threading, and get
              current MemoryStats etc. working on a single theBefe->heap etc.
                
  2017-07-05: Get full and robust .../SVN/befe.befe/*.befe test cases
              written and tested with Python and C++.

  2017-07-10: Get "reverse compiler" working based on generated ParseTree.
  
√ 2017-07-07: C++ - Implement '//*...*//' comment which counts "/*..*/" and "//*..**//"
              Note: Actually implemented it using "\*..." instead. Quite clever
  
√ 2017-07-10: Get "a[10]+b(xx)" working with 'operator:index' and 'operator:call'
              value
              Get standalone/appropriate () and [] producing types 'expr:tuple:?' and 'expr:list:?'
              Special cases: () and any (...,...) type 'tuple'.  Any commas in [] also produce list.
              Left operator [] is also a list, e.g. '[a]*10' is equivalent to '[a,a,a,a,a,a,a,a,a,a]'

              Includes: Testing multiple indexes in [...] producing error
              Includes: "()" and "(,)" being recognised as 'tuple' in right circumstances

√ 2017-07-18: Python: Still a couple of 'temp5' inconsistencies in dotted names...
                a.b.(c(d)).e doesn't do the right thing
                
√ 2017-07-18: Need to do 'dotted' name syntax checking... No leading/trailing '.',
              and '. .' or '..' in name isn't valid either.
              
              Plus '.' is removed in 'a.b.c' but not mixed one. Hmmm.
              
√ 2017-07-11: Implement 'defer5' syntax checking and processing.
              Note: This also involves populating a namespace's types
  
√ 2017-07-12: Python Fix: "if a == b: c = d" doesn't spew out right stuff (moreWords?)
  
√ 2017-07-10: Get named operators 'is','not','isnot','in','notin' working

√ 2017-07-12: Get rid of 'expr:?' nodes with single child and move child up.
  
√ 2017-07-12: Get a[] and a() parenting the list/tuple correctly
  
Х 2017-07-11: Put 'operator' ',' nodes back in
  
√ 2017-07-11: Put 'defer5' in parseExpressionPass5 to implement name/type
              syntax checking later after all files loaded.
              
 2017-07-11: Fix "a*b c" which produces "a b*c"
  
√ 2017-07-10: Handle 'a . . . b' for name "go up": 'a .     b' = "`b` under `a`"
                                                   'a . .   b' = "`b` same level as `a`"
                                                   'a . . . b' = "`b` level above `a`"
              Note: Only weird with spaces because of operators '..' and '...' ;-)

√ 2017-07-10: Add qualifier ('i','im','m','mi') support to name literals
  
√ 2017-07-10: C++ - Figure out why "lex +vv t.befe" keeps t.befe open until exit
  
√ 2017-07-10: Sort out type naming... Instead of 'name' should be 'name:?' etc.
              This is so we can do a "a.type.split(':')[-1]" give you type.  ;-)
  
√ 2017-07-10: Get 'a.(b*10).c' name resolution working

√ 2017-07-06: Python - parseExpression: get "a = befe.b.c(xxx)" and
              'befe.a.b.c[10]' working. What do we do with "a.b.c{10,20}"?
              
√ 2017-07-07: Get inFix left/right vs right/left bindings sorted
              (e.g. '=' and '<<' bind right to left, most others are left to right)
  
√ 2017-07-06: Python - Get operator ',', ';', and '.'/'::' working
              
√ 2017-07-05: Python - Get precedence structuring working.

#──────────────────────────────────────────────────────────────────────
#
# TODO Long term
#
#──────────────────────────────────────────────────────────────────────

LongtermToDo...

2017-07-06 C++ - Add UTF-8 operator handling into lex/lang and implement
           it in the BEFE language.
           
TODO:  Figure out why our C++ destructors keep on getting called after
       invoking ExitProcess.  Had to call TerminateProcess instead.
       Something basic going on under the covers in Microsoft land
       here!!!!!
       *** Update: This should go away when we get rid of all the
       ***         globals and static Class members.
       
TODO:  Revisit all primitive numbers and values...  See if it's
       feasible, performance wise, to make them all C++ classes.
       *** Update: Don't think there's a reason for this now that 
       ***         we've made the differentiation of <Primitive>,
       ***         <Value>, and <Object> data types
       
TODO:  Formalise <Constraints> and <Limits>.  They're really the same
       kind of thing.  Simple testable conditions.  The power of them
       is when and where to apply them.  ;-)
       
DONE:  Get Stream::IsInteractive in Win32Console checking to see if
       it's keyboard or File based and answer appropriately.
       
DONE:  Get File asking the current OS for a "real file" by implementing
       Operating::System::NewFile() method and plugging it into the
	     base implementation of File to defer Open/Close/Read/Write, etc. to it.
	   
TODO:  Research MinGW and GNU copyright licenses and put any applicable notices
       available through the Platform class.  We'll be needing this at some
	     point anyway when we include external copyrighted libraries (like stuff
	     from Python, etc.)  ;-)

DONE:  Need to get OperatingSystem enumerating the list of named devices it
       handles, and then wind that into Path/File, or whatever, to get
	     an abstract device naming/use mechanism implemented.  Then, we can
	     start considering getting rid of cout and printf() EVERYWHERE.  Hurrah!
     
DONE:  Figure out what we want to do with Microsoft's silly INTENSITY
       setting in Console colours...  You can specify it on Background
       and foreground, but not for each RGB component.  So, it's not
       really colour depth 2.  Grrrrr.....
       
       Possibly just say "Hell with it", and implement everything
       low intensity or everything High intensity as a switch setting.
       
TODO:  Get Colour and Colour Stack working in Console.  Possibly 
       implement with PushState and PopState?  Either way, need to have
       a general purpose Stack class in Array.
       *** Update: This should end up where Global contexts are handled
       ***         by the Befe Class
       
DONE:  Revisit WriteConsoleW for UTF-8 in Win32Console.
       *** Update: No need to do it now, it's all sorted properly
       
TODO:  Think about a whippy neat iteration mechanism.  Consider Ranges,
       Slices, Cycles, etc.  Multiple ones working in tandem...  The
       iterator's job is to produce integers sequences.  Possibly,
       ad infinitum.
       
DONE:  Get RID OF PRINTF!!!!

DONE:  There's a #include somewhere in port.cpp (I think) that hard
       codes my installation's MinGW include directory.  This is because
       of "string.h" conflicting with MY String.h.  Grrrrr....
       
DONE:  Complete (write) String.LeftTrim and String.RightTrim and test.
       Probably need to add LeftPad and RightPad as well, since Pad does
       a right pad, but there's no left pad.
       
TODO:  Operating System and Devices/Volumes

TODO:  Plug volumes and descriptions into Win32OperatingSystem.

TODO:  Now we have reasonable memory allocation statistics, we need to
       figure out why array test gets so many concurrent allocations!
       I mean, is something going on there that I overlooked?

DONE:  We need to declare and write Strings.Join(Char) and String.Join(char)
       because I'm getting sick and tired of looping with Strings.Append().

DONE:  We need to, somehow, get String.Append(char) declared and written
       because I'm sick and tired of using String.+= instead.
       
DONE:  We need to implement Array.MoveTo() and Array.MoveFrom() in
       preparation for passing (Array &) as output parameters.
       
       Need to implement MoveTo() and MoveFrom() in ByteArray and ArrayString
       as well for same reason.
       
DONE:  We need to declare and implement String.Split(Char,Strings &parts)
       (and the (char,Strings &parts) equivalent) and it can use MoveTo to
       parts because it will cut down on the extra memory allocations needed by
       operator =
       
DONE:  Rename StringArray to Strings and move it into Strings.h.

       Also, rename StringBuffer to Chars and ByteBuffer to Bytes for same
       reason.  May want to implement Chars and Bytes as a little proxy
       class to StringBuffer and ByteBuffer to make it more usable.

TODO:  Get Strings function written to discard invalid UTF-8 characters
       in String buffer.  Plug it into everywhere appropriate.

TODO:  Verify Processor.GetPointerSize() on 64-bit windows.  May need to
       hook OS into it.  Not sure yet.  Still researching.

TODO:  Update Distance.txt from blog "Distance, Length, Direction, Address, and Size"       

...LongtermToDo

#----------------------------------------------------------------------
#
# DONT - Stuff we thought we'd do but decided against
#
#----------------------------------------------------------------------

Dont...

DONT:  Implement "Next()" driven Path query Class.
       *** I don't think we need this now that we have Walk in OS
       
...Dont

#----------------------------------------------------------------------
#
# TIME/LOG/DONE/NOTE - Bruce's Timesheets and Journal
#
# Started this on 09 June, 2011.  All time before this is somewhat estimated.
#
# Note: All times are in UK time (BST, GMT, etc. based on the date)
#
#       We'll try to formalise the structure so we can analyse it in the
#       future.
#
#----------------------------------------------------------------------

Journal...

DONE:  2011-06-01 Enhanced MemoryStatistics

       Now we have "maxdiff" in MemoryStatistics, which tells you the
       maximum number of concurrent allocations that weren't freed
       yet, it would be nice to know the maximum concurrent bytes.
       
       I think we already plugged each block size in there somewhere.
                 
       We'll go from there. Once we do that, we can figure out why array
       test gets so many concurrent allocations!

DONE:  2011-06-02 06:30 Appending multiples to non-empty Strings.

       Get String multiples expanded when appending to non-empty Strings.

TIME:  2011-06-09@13:00..15:24 - UTF-8 framework and bare-bones SVN documentation structure
TIME:  2011-06-09@18:00..19:29 - Continued working on UTF-8 tester
TIME:  2011-06-09@21:00..22:38 - Played with CrcRing (see LOG below)
TIME:  2011-06-10@00:00..06:00 - Implemented Utility framework and String operator == and !=

NOTE:  Found out GNU C++ accepts UTF-8 string literals.  Not sure why that suprises me but
       it does.

NOTE:  That'll make testing UTF-8 easier.  ;-)

NOTE:  After playing with Crc32Ring I have a sneeking suspicion that, given a smallish
       "atomic size" (largest length of an atomic "value", in number of bytes) like,
  	   say 32 bytes, we can make a wonderful compression algorithm AND/OR diff mechanism.
		   
	     This, clearly, won't work for large things like multi-media (music, video, etc.)
	     but it can easily and quickly detect multiple occurrences of "values" in an
	     arbitrairy byte stream.  I figure it's worth looking into more.  I've checked
	     in trythis.cpp as an example.
	 
NOTE:  I figured we needed a general command utility framework.  So, I added another
       directory "utils" to base SVN and implemented the Utility class.  Each command line
	     utility needs to inherit from Utility, hard-code it's name into Utility::Find(), and
	     implement Utility::Main() for the sub-class.  First one will be CrcRing utility which
	     will walk through text files, break on whitespace and special non-ASCII characterl,s and
	     give us some idea of strings in text files.  This should be a good test for the idea
	     of a CRC ring as a "value finder" in arbitrairy data.
	 
NOTE:  Got rudimentary String operator == and != written and tested, at least for non-UTF8
	     strings.  Now, to write the intial CrcRing utility.
	 
NOTE:  CrcRing utility works now.  Need to write String.Lower and friends String.Upper,
       string.LeftPad, and string.RightPad.  Then, get going on getting the UTF-8 stuff
	     finished.
		   
NOTE:  Did some fiddling with an idea and checked in LoveHate.txt.  Read it to see
       what I'm on about.

NOTE:  Moved UTF8.h and UTF8.cpp from array to core since it doesn't really need to 
       be array based.  It will, shortly, be used by ArrayChar but, can be used
	     entirely outside of the array implementation.
		   
	     Unfortunately, after studying UTF-8 in more detail, I've decided to implement
	     ArrayChar as a 4-byte mechanism for now.  This is because, I figure, memory
	     is easier to manipulate the three needed bytes for UTF-8 chars if we use
	     4 byte integers instead.  May change my mind on this once it's completed.
		   
TIME:  2011-06-10@08:00..14:00 - Worked on "LoveHate.txt" and UTF-8 functions.

NOTE:  Need to make sure UTF8 class handles invalid sequences, invalid code points,
       and BOMs.  Also must make sure it handles CESU-8 correctly (I think this 
	     is what JSON does too.
		   
TIME:  2011-06-10@18:00..23:00 - Worked on UTF-8 and writing documents

NOTE:  UTF-8 CountChars() and GetChar() seem to be working, at least forwards.
       Next... Get backwards and PutChar() working.  Then for the biggie...
	     changing String to get rid of ArrayChar implementation.
	   
	     Rationalised GetChar() to have two forms.  The one without "curpos"
	     and "nextpos" are convenience ones to allow relative indexing in
	     strings.
	   
	     Also cleaned up GetChar() so that it only walked if requested, so the
	     "normal" case of "current position/char" falls through quickly.
	   
	     Also spent a little more time trying to start filling out the basic BEFE document.
	   
TIME:  2011-06-11@06:00..16:00 - Finished UTF-8, starting rejigging Strings

NOTE:  The UTF-8 character we use in the testUTF8 (U+220F) is encoded as
       the three bytes 0xE2 0x88 0x8F.

  	   When putting this in a text file, bloody Microsoft's Notepad (and other
  	   endless crap from them) can place a BOM at the beginning...

	       0xEF 0xBB 0xBF

  	   UTF-8 is designed to not use BOMs because it defines the order of the
  	   "bytes".  But, no, Microsoft is in some weird state of UTF-16 thinking
  	   or whatever hallucination they're living in.  Typical bloody Microsoft!

  	   This StringBuffer is a strange one...  It's pretty straightforward but I've
  	   never tried a C++ class that takes ownership of the pointers to it.  We'll
  	   keep an eye on it and see if that concept works.  Either way, Resize() and
  	   Delete() now assume ownership of the caller's pointers and it all seems to
  	   work okay.
	   
  	   Ready to write StringBuffer char/byte methods now.
	   
NOTE:  Formally introduced and implemented the concept of "self" and it seems to work.
       This is way Cool!  The next thing we have to think about is how to manage the
  	   pointer instantiation without memory loss by sloppy coding.  I figure this
  	   may have to wait until we can generate this stuff but that'll take a while
  	   to do it properly.  Will have to wait until the repository is introduced.
	   
TIME:  2011-06-11@17:00..19:00 - Worked on StringBuffer byte functions

TODO:  StringBuffer byte functions completed.  Need to properly write Replace because
       it calls Remove and Insert.  It should really do it all in one go.

TODO:  Once StringBuffer is finished and tested, need to rewire String overall to use
       it properly.
	   
TIME:  2011-06-11@22:00..01:00 - Got StringBuffer entirely written and tested.

NOTE:  StringBuffer completely tested and working.  Now, time to rewire String to use
       the StringBuffer.  I figure there's lots of rejigging to do but, it's gotta be done.
	   
TIME:  2011-06-12@07:00..13:00 - Initial work on String rewriting

TIME:  2011-06-12@14:30..17:00 - More work on String rewriting.

NOTE:  Added NormaliseIndex to primitives.h.  This is in an effort to keep it consistent
       across the entire code base.

NOTE:  Made change in declaration of Char (in primitives.h) from "unsigned short" to
       "unsigned int".  This is because I originally thought UTF-8 only handled up
  	   to 0xFFFF, which would fit into an unsigned short.  Unfortunately, UTF-8 can
  	   go from 0x000000..0x10ffff, meaning we need an int (until somebody comes up with
  	   a 3 byte integer which seems fairly unlikely).  This does, though, mean that
  	   instead of returning Char of 0 for bad characters, we can now return NaN.  That's
  	   the plus side of it since 0 is a valid UTF-8 character so we're not skimping
  	   with compatability issues any more.
	   
TIME:  2011-06-13@05:00..16:00 - More work on String rewriting

NOTE:  Found a couple of memory leaks and put MemoryInfo stats in MemoryStats.  Basically,
       if you uncomment the members of the MemoryInfo class, it'll add the newcount
  	   to the beginning of each raw memory buffer allocated and print the counter when
  	   it frees.  That way you can tell, by sequence, which memory blocks aren't getting
  	   freed.
	   
  	   Strings starting to work.  Still getting GPFs for now.
	   
TIME:  2011-06-13@18:00..20:00 - More GPFs in String fixed

TIME:  2011-06-14@08:00..17:00 - Finished String testing

NOTE:  Got String Slices working properly.  Genericised the difference between ByteBuffer
       and StringBuffer by separating ByteBuffer into core and separating the Errors.
  	   Tested and works.  This now lets us use ByteBuffers for various non-String
  	   thingies.
	   
NOTE:  Not sure if it's better to have Length()/Size() or Length()/Bytes().
       Length() is used to indicate the logical length of something, regardless of bytes.
  	   Bytes() is used to indicate the number of bytes.
  	   Size(), maybe, should indicate allocation size.  Dunno yet.   s
	   
NOTE:  May think about it a bit but might change Copy() to Clone().  It depends on
       whether Identity changes.  Some philosophy will have to be applied first.
  	   This all comes down to differentiating between "the real thing" and a cached
  	   copy of the real thing.  Need to play more with the Repository before that
  	   distinction becomes clear.
	   
TIME:  2011-06-15@07:00..20:00 - Default File class implementation

NOTE:  Got FileCstd opening/closing files and writing them.  It creates and deletes
       temporary files as well.  Temporary files won't be deleted if gKeepTemporaryFiles
  	   is set.  This allows us to look at temps for debugging.  Also, gVeryVerbose turns
  	   on the FileCstd class logging so we can see what's going on there.  Need to turn this
  	   into some kind of proper logging mechanism later.  But, that'll be after a while.
	   
NOTE:  Added File::NewSequentialFileName to create new, unique, sequential file names given
       path, prefix, number, and suffix.  Changed FileCstd.Open() to use this for temp file
  	   names.  This also allows us to use the same function for LOG file names in the future.
	   
NOTE:  Almost finished writing and ready to test FileLines.  It's pretty cool, fast, and
       way easy to write.
	   
TIME:  2011-06-15@21:00..04:00 - Finished FileLines class

NOTE:  Hurrah!  FileLine works and it's bloody fast.  4ms for readme.txt (without displaying
       output on the console.  Have to get "safe lines" though, because if you pass the lines
  	   around and keep the line after discarding the buffer, all hell breaks loose!
	   
NOTE:  Added GetLine() and GetDangerousLine() differentiation in FileLines.  The Dangerous
       one is about 6 times faster but it has the nasty side effect of having bad pointers
  	   in it if you use the line after discarding the source buffer.  Safer to use GetLine()
  	   unless you're absolutely sure about the relative lifetimes of the line data and the
  	   source data.  Anyway, did this by introducing a MakeMutable() method to String.
	   
NOTE:  Sped up String.AppendFrom and String.BuildFrom based on Const strings.  This made
       FileLines go a whole lot faster, especially if using GetDangerousLine().
	   
NOTE:  Added more awareness of isByte and isChar in String.  Added generic String info
       method in FormatOut to help look at strings when we want.
	   
NOTE:  Added Lowercase() and Uppercase() to String.  They turn the String mutable before
       they do their stuff so it's okay to call on strings that started out as (const char *)
	   
TIME:  2011-06-16@08:00..20:30 - Start of a brand new day. now for File/Path management

NOTE:  Beginnings of Path class.  Cleaned up Platform/OperatingSystem and implemented
       Platform.GetBaseLibraries() so we could tell at runtime which base libraries
  	   we're using (MinGW for now, maybe Msvcrt and Qt later, Android, OS X, Linux, etc.)
	   
  	   Hurrah!  Path's starting to work.  The automatic changing of the separator depending
  	   on which mode you select is neat.  Plus, parts of path split correctly.  Now, its
  	   time to get some meat on the bones and get IsDirectory() and IsFile(), and Exists(), 
  	   etc. working.
	   
  	   Path basic parsing and manipulation works.  Got Path.IsValid() working.  Now, need
  	   to get the hooks into OperatingSystem to do further validation.
	   
  	   Added -prag[matic] option for "practical pragmatism".  We'll have a play with
  	   that idea as a command line switch.
	   
TIME:  2011-06-17@01:00..05:00 - Worked on Path Validation

NOTE:  Path validation seems to work now with O/S specific checking.  We need to do more
       tuning of the UTF-8 stuff in String because, it seems, there are cases where
  	   isByte==false and isChar==false (meaning "unknown") because of appending
  	   things.  Also, if the string's empty and we append 4 or less ASCII characters,
  	   it shouldn't turn into a StringBuffer, it should use ASCII1..ASCII4 instead.
	   
TIME:  2011-06-17@11:00..15:00 - More String efficiency tidyup and Path/Id stuff

NOTE:  Fixed a couple of GPFs and got String working more efficiently with
       ASCII1..ASCII4.  Now, short strings initially only allocate a StringBuffer
  	   when the string contains more than one UTF-8 or becomes larger than 4.
	   
NOTE:  Filled out some more thoughts in BEFE.

TODO:  Still need to look at reducing down to ASCII1..ASCII4 or Unicode when
  	   StringBuffer based strings reduce to that size.

DONE:  Add yet another typing construct to String (in the reserved bytes)...
       A "multiple".  This will allow us to save tons of space for things
  	   like repeating characters in banner headers, etc.  This would subtly
  	   alter the implementation of operator*, and might not be that helpful.
	   
  	   Need to keep an eye on things and see if we use multiples enough so
  	   this becomes an issue.
	   
TODO:  Get path working totally, with Exists(), etc.

TODO:  Formalise Id and IdSpace.  Need to accomodate Address into it as
       a specialised form of "transient Id space".  This will help us
  	   formally model indexes and Slices as well since they're more
  	   applicable to Address spaces.
	   
TODO:  Formalise Symbols, as some form of Id.  Possibly a Symbol Id space?
       This is where UTF-8 fits in.
	   
TODO:  Need to get BitArrays working.

TODO:  After all the above is finished, it's about time to formalise
       and implement MemoryHeap, taking Process, Thread, SharedMemory 
  	   and, possibly, DiskRam (virtual memory).
	 
TIME:  2011-06-17@17:00..22:00 - FormatOut now formats Path info

NOTE:  Drastically simplified operator* and operator*= by adding a 
       UInt16 mult to String in the previously "reserved 3 bytes".
  	   Now, header strings are only 8 bytes in size instead of
  	   allocating a separate buffer for the multiplied string!
  	   This also gives us the ability to multiply it by zero and
  	   hide it from output.  Even more cool!
	   
FIX:   String.AppendFrom wasn't calculating correct destination buffer
       when appending from and to EMPTY and ASCII types.
	   
FIX:   String.AppendFrom wasn't using correct len when appending to
       small things.
	   
FIX:   Got Path.IsValid correctly validating through O/S.  Now, it
       properly doesn't consider Windows device names like 'CON' as
  	   valid file/directory names.
	   
TIME:  2011-06-18@05:00..08:00 - Trying to formalise/normalise File/Path/OS interface

TIME:  2011-06-18@11:00..00:00 - Getting SVN stuff in SVN.h and Win32 utilities

HOWTO: Jeez, had a difficult time getting SVN Revision in source.  What you have
       to do is...
	     
    		 1) Set $Revision$ somewhere in your source
	    	 2) Command "svn propset svn:keywords "Revision" <source file>"
		     3) Edit the file (put in/remove a bogus comment or something).
		     4) Command "svn commit -m <whatever>"
		 
	     Alternative to step 2 in Explorer with Tortoise SVN...
	   
	       o Right-click on the file in explorer
		     o Choose Tortoise SVN -> Properties
		     o Add svn:keywords Revision to the properties list
	
	     Then, from then on whenever you want it to change to say the latest
	     Revision, you have to change the file (just put a comment in or delete
	     the last bogus comment you put in, and commit it., SVN Commit it, and it'll change.
	   
	     Whew, maybe I'll put the lot in an SVN.H.  That would come in Handy!
	   
NOTE:  Platform class now has knowledge of hard coded Version number and Revision.
       Revision comes from latest SVN checkin number of Platform.cpp.
	   
NOTE:  Amazing!  Wrote utility Win32Drives with code nicked from Microsoft and,
       after turning the silly WCHAR and wprintf crap into char, etc.  It just
	     worked.  Cool!
	   
  	   Then, turned it into readable C/C++ in port/win32/win32utils.cpp.  It's
  	   astounding how readable the Windows code is without all that 90's wchar_t,
  	   WCHAR, TCHAR, crap!                                 s
	   
NOTE:  Even more amazing!  Got Win32GetVolumePaths() working with incredibly
       minimal effort.  Now OperatingSystemWin32 can get the known drive
  	   letters for validation.  Hurrah!

NOTE:  Got Win32GetLogicalDrives() working too.  Instead of the shorter list
       given by Win32GetVolumePaths(), this gives all drive letters, even
  	   those mapped to network drives.
	   
NOTE:  Got GetHostName() put into OperatingSystem class.

DONE:  Need to put GetAddresssIP() and GetAddressesIPv6() plugged into
       OperatingSystem class.  Actually, implemented a separate Network
  	   abstraction class framework similar to Process, OperatingSystem, etc.
	   
DONE:  Need to implement GetHostName() in OperatingSystemWin32 and
       NetworkWin32 classes... Have hostname in both OperatingSystem and
  	   Network.  They're different because the OS bases it on NT Domain so
  	   we get it from "volatile environment", but the Network bases it on
  	   hard computer name.  I think this will work properly.  Need to get
  	   on a real NT domain to check it out.

TIME:  2011-06-19@08:00..18:00 - Working on first Off-white paper

TIME:  2011-06-20@05:00..13:00 - Various

DONE:  Now we have the Network framework, need to start fleshing it out
       with GetAddressesIP(), etc.

TIME:  2011-06-21@00:30..06:00 - Thinking and blogging (finally got cigs)

NOTE:  This is where I had the epiphanous moment and decided to apply
       the concept of TIME to Id spaces, and SPACE/Containership to
  	   Address space.  Rather Einsteinian and realitavistic, but when
  	   you add indexing and slicing into the mix and top it off with
  	   a locking strategy using indexes and slices in these two spaces,
  	   it all turns into something quite cohesive and beautiful.
	   
  	   Thumbs up at this point, so far!

TIME:  2011-06-21@09:30..15:00 - Blogging and thinking
TIME:  2011-06-21@18:00..05:00 - Thinking MUCH MORE (epiphany!)

NOTE:  Deprecated FileCstd class, moved it into Win32File for now.
       This breaks FileLines until we get File asking the current OS
	     for a "real file".
       
TIME:  2011-06-22@??:??..??:?? - Still epiphanous (sp?) and rejigging port structure

TIME:  2011-06-23@07:00..19:00 - Almost got port structure rejigged

NOTE:  What a nightmare.  The doozy was MinGW and the bloody memcmp not
       being declared in objbase.h!!  FINALLY got a workaround hack.
       
DONE:  GPFs fixed.  First one was I'd accidently made MemoryCopyRaw call
       itself recursively when I was getting rid of the calls to malloc.
       
       Now, put Malloc()/Free() into port.cpp, which for now simply
       call malloc/free.
       
       Second one was MemoryCopyRaw was moving from dest to source not
       the proper way round.  Don't know how I screwed that one up.

DONE:  Finish banner string multiple doesn't work.

DONE:  Elapsed time is NaN.
         a) Handle NaN when formatting

TIME:  2011-06-24@07:00..13:00 Purism

NOTE:  Bloody Microsoft and MinGW!!! No "purists" there!!!

DONE:  Elapsed time is NaN.
         b) Get Win32 time working
             
NOTE:  Moved all ...::Current out of classes, and into globals.  These
       are now all set up by port specific code.
       
NOTE:  Added a couple of string and string array convenience typedefs and
       functions...

         o Added new type Strings, alias for ArrayString
         o Added ArrayString.Get(Int idx) to return String instance
         
       Added new methods to OperatingSystem.
       
         o Added GetDeviceNames()
         o Added IsDevice()
         o Added IsVolume()
         
       This is in preparation for genericising File/Path and setting
       the stage for implementation of File defering to Win32File and
       other future File implementations (like console, Null, HTTP:, etc.)

TIME:  2011-06-24@14:00..20:00 Operating System and Devices/Volumes

NOTE:  Got Win32OperatingSystem.GetDeviceNames working properly calling
       Windows function.
       
DONE:  SVN rename port.cpp to Win32.cpp.

NOTE:  Got sidetracked on tidyup and String utility functions...
       
         o Renamed port/win32/port.cpp to port/win32/Win32.cpp
           Now, everything in port/win32 is named "Win32..."

         o Got rid of StringArray used Strings instead
         
         o Made alias typedefs for
         
             ArrayByte   -> Bytes
             ArrayShort  -> Shorts
             ArrayInt    -> Ints
             ArrayChar   -> String
             ArrayLong   -> Longs
             ArrayString -> Strings
             
         o Changed all references to ArrayString to Strings
           except in Array.h, ArrayString.cpp, and testArray.cpp
           because that's the underlying class that's really being
           implemented and tested.
           
NOTE:  Rejigged old unused RecalacByteAndChar into ByteAndCharCount
       for use by Ellipsis and PadAndEllipsis and Pad code.

TIME:  2011-06-25@07:00..17:00 String pad/trim/truncate functions

DONE:  In String.Pad(), handle special cases where virtually one long
       and same character and len > vlen...  Just change vlen.
       
NOTE:  Got all the new String functions (Pad, Ellipsis, LeftTrim, and
       RightTrim) written.  Now, it's time to write the test code.
       
NOTE:  All the new String functions now tested and working.

DONE:  Need to put string formating of Device descriptions.
       Need to be both properly displayed in FormatOut.
       
NOTE:  Cleaned up of Win32.h, Win32OperatingSystem, and win32utils.cpp.

       win32utils.cpp was getting a bit messy and disorganised.  The
       idea with win32utils is to "hide" all the Win32 operating system
       calls away from the other C++ objects.  Just for insulation
       purposes.
       
NOTE:  Almost got Device description code.  Need to plug it into
       Win32OperatingSystem.

TIME:  2011-06-25@18:00..23:30 Worked on device descs in trythis.cpp
       
NOTE:  Another epiphany that was easy to put into practice.  The problem
       lies with C++ copy constructors and the operator= assumes value
       not object (weird for an object oriented language, eh?)  Anyway,
       to get around it I recommend the following for class <yourclass>...
       
         void Init();                       <-- Construct from "nothing"
         void Finish();                     <-- Prepare to go into "nothingness"
         void MoveTo(<yourclass> &that);    <-- Move home from one address to another
         void MoveFrom(<yourclass> &that);  <-- Move home to another address
         
       Then, the following should work (I implemented it and it DOES work!)...
       
         String s1 = "String 1";
         String s2 = "String 2";
         ...
         s1.MoveTo(s2);
         
         // Now, s1 is empty and s2 == "String 1" and no dangling pointers
         // or extra memory allocations.  Just a single MemoryCopyRaw!
       
       Easy peasy, eh?

DONE:  Plug device descriptions (have code in trythis.cpp) into Win32OperatingSystem.

TIME:  2011-06-26@08:00..18:00 Working on Win32File

       Formatting cleanup in FormatOut.  Since we're starting to iterate
       the devices and volumes in the output, for visual cleanlyness
       it depends on -v and -vv when to display what and when to put
       in blank lines.
       
       Subtle rejigging of Time semantics and methods.  Got rid of
       Refresh() and SetToNow(), and replaced with single Set(), just
       like you "set a clock".  Made sure NaNLong what used where
       appropriate.
       
       Started to reformalise File methods and semantics.

NOTE:  Finished semi-formalising File and getting it squared around with
       Win32OperatingSystem.  We're intentionally avoiding Paths right
       now because that'll probably turn into some kind of symbolic
       naming scheme more general than "file names and paths".  So,
       we keep the parts of the path split into an ArrayString (Strings)
       to keep from always having to wack about with splitting it and
       joining it when switching between native and abstract modes.

       What we do instead is to split the path when it's set, pass the
       parts to Win32OperatingSystem, and give the name to the callers
       based on whatever we choose depending on the setting of the
       "abstract" Boolean.

NOTE:  Plugged in "maxdiff" into MemoryStatistics.  This tells you the
       maximum number of outstanding memory allocations at one time.
       
DONE:  Now we have "maxdiff"in MemoryStatistics, which tells you the
       maximum number of concurrent allocations that weren't freed
       freed yet, it would be nice to know the maximu concurrent bytes.
       I think we already plugged each block size in there somewhere.
       We'll go from there.
       
TIME:  2011-06-27@06:30..14:30 Working on File

NOTE:  Got File class outlined now.  Win32File won't compile yet because
       we haven't updated it to the new ethos.  So, I commented it out.
       
NOTE:  Going to revamp ByteBuffer and Bytes to make a really general
       purpose byte array.  Then, it's time to change Array to use that.
       
TIME:  2011-06-27@16:30..21:30 Bytes and String MoveOnEquals

       Got foundation of Bytes defined in Bytes.h

       Got String.MoveOnEquals working.
       
       Got sidetracked on Slice.Parse, etc.

DONE:  Seems to be a problem with the mult in trailer header line.

TODO:  Write and test Bytes code.

TODO:  Do the equivalent for Strings.

TIME:  2011-06-28@08:00..16:00 Work on Bytes class

LOG:   Added Processor.GetPointeSize method and display it in
       FormatOut

LOG:   Blogged "Distance, Length, Direction, Address, and Size"t 

LOG:   Finished writing Bytes class.  Now, to test it.

TIME:  2011-06-29@07:00..17:30 Bytes and String MoveOnEquals

LOG:   Finished Bytes class.  Added ErrorSring function to turn
       error codes into readable string for output.
       
DONE:  Move trythis Bytes test code into testArray.

LOG:   Bytes testing code moved into testArray.cpp and other tests
       cleaned up to use ErrorString and gVeryVerbose versus gVerbose.
       

TODO:  Next, get back into Files and get Win32File and File working
       properly together.  Need to get this working well enough for
       FileLines to work, both read and write.
       
TIME:  2011-06-30@05:00..08:30 Rejigging of Array to make it more like Bytes
TIME:  2011-06-30@10:00..13:30 Rejigging of Array to make it more like Bytes
TIME:  2011-06-30@19:00..22:00 Rejigging of Array to make it more like Bytes

NOTE:  Revamping done.  Time to test now.

TIME:  2011-07-01 07:00..12:30 Rejigging of Char and testing Array
TIME:  2011-07-01 14:30..23:00 Rejigging of Char and testing Array

LOG:   Revamped Char into a teeny class.

NOTE:  Several initial GPFs.  Got those cleared.  Still a problem with
       Strings...  Always seems to be getting the 0th element.  Working
       on it.

LOG:   All Array/Strings and Bytes revamp GPF and bugs fixed.

DONE:  Fixed MemoryStats wrong block size counts.

TIME:  2011-07-02 05:00..09:00 Lifecycle

LOG:   Added seq directory for sequence operations and semantics.
       Moved Slice.h and Slice.cpp into it.

LOG:   Renamed all Init/Finish/Exit declarations and implementaions
       to StartUp/ShutDown for lifecycle model conformance.
       
TIME:  2011-07-02 10:00..14:00 Writing AllocDef

TIME:  2011-07-02 16:00..24:00 Major rework to abstract Numbers.

LOG:   Major rework to abstract numbers and put them in one place.
       This involved various things including...
       
         o Making Number subdirectory
         o Making Number.h and Integer.h in there
         o Moving memutils.h and memutils.cpp into Numbers/Integer.h/cpp
         o Revamping low level Bit and CRC functions to use Unsigned Ints, etc.
         o Moved Int, etc. definitions out of primitives.h and into Number.h
         o Renaming testmemutils.* to testNumber.*, and associated renaming
         
LOG:   Got empty shell of AllocDec written.  Tired of all these multitudes
       of C++ constructors, etc.  Decided to bite the bullet and encapsulate
       then into String functions and put the parsing in classes.  After all,
       they're all just bloody representations of numbers and basic
       fundamental sequence related data types.

TIME:  2011-07-03 06:00..16:30 Major rework of fundamental data types

DONE:  Write Char.Lowercase and Char.Uppercase, and the following operators...

         operator+
         operator-
         operator<
         operator<=
         operator==
         operator!=
         operator>
         operator>=
         
       These should take NaN into account and always return NaN or False.

       Also added Char.IsLowercase and Char.IsUppercase with same semantics
       as their friends above.

DONE:  Got UInt32FromString declared and written.  It should be given a String
       and a Slice.
       
       Got IntFromString (with and without Slice) written and tested.

TIME:  2011-07-03 20:30..02:30 Starting back on AllocDec

LOG:   AllocInc initial code written.  Now, for AllocInc.Parse...

LOG:   AllocInc.Parse written and starting to test.  Couple of infinite
       loops and GPFs.  Now too bad for a first go though!
       
LOG:   AllocInc written, tested, and working.

DONE:  Move AllocInc.Parse to Slice and update AllocInc.Parse to call it.
       While there, pass (const char *) containing a string, of at least 
       two characters, containing the valid '(' and ')', etc. combinations.
       
LOG:   Both Slice and AllocInc string specs now work! (see next DONE)

DONE:  Formalise InitDef as separate class from Slice.  Then we can add the
       optional reduce size to it.  In Array, we'll use one of those and
       separate elmsize out from it because it's a workhorse class, not
       really a basic fundamental type.
       
       Since InitDef/Slice are so common throughout all coding that they
       probably deserve special attention.
       
LOG:   Minor tweeks and MemoryStats now accounting for its own size.

DONE:  Figure out why TestArray class can't be used in Test.cpp.
       We get some kind of compile error I can't figure out.

       Test.cpp use of TestArray seems to have fixed itself.  Weird!

DONE:  TestSequence::testSlice has a problem with results from  string.ToEllipse.

       This one seems to have fixed itself too.  Maybe I'm going mad?

LOG:   Added all the possible bloody help options I could think of.
       Tired of, depending on how you're feeling when you need the help,
       the hard work needed just to get the bloody help!  No more, I think!
       
DONE:  There still seems to be one memory block missing when "befe -ms string"
       Actually, it's "befe -ms array" that's doing it.
       
       Strings.Clear wasn't clearing correctly.

TIME:  2011-07-04 07:00..12:00 Starting on ByteBuffer revamp

DONE:  Revamp ByteBuffer and pByteBuffer -> Bytebuffer and ByteBufferLow
       
       And make ByteBufferLow private and not exposed through the main
       class ByteBuffer.
       
       After starting it, decided it wasn't a good idea because then
       StringBuffer couldn't inherit from ByteBuffer.  There's places
       where you want the block head in the block itself to save
       spaces for the referencer (like String).  Other places it might
       belong in the referencer.
       
       Going to see how it goes keeping it in the variable part of the
       buffer instead of the referencer for now just because it makes
       referencers smaller if you've got arrays of them.
       
TIME:  2011-07-04 20:00..23:00 Side-tracked onto Id and IdSpace

LOG:   Cleaned up and formalised definition and usage of NaN regarding signed
       versus unsigned value.  This is a fundamental concept that needs
       to be easy to use, implemented consistently, and should ALWAYS be
       a question any proper coder keeps in the forefront of their mind.

       That's because we've drawn a distinction between NULL as used in a
       pointer context, and NaN.  We choose to apply different semantics
       than historically applied...
       
       NULL and 0, to a C/C++ coder, typically indicate "not allocated"
       or "cleared" memory.
       
       We've taken the approach that NaN should be used for "unintialised"
       memory and values.  This is because it's way more likely to use
       zero as an index, which is what an address is.  And, in real memory
       senses, both 0x00000000 and 0xffffffff probably won't be addressable.

       When you abstract the idea of addresses into the idea of an index,
       we figure it's way more likely to have 0x00000000 mean "the first
       one" and 0xffffffff mean "not a number".
       
       I can guarantee you, seeing 0xffffffff show up in a debugging
       causes you to pay more attention than having 0x0 show up.

TIME:  2011-07-05 05:00..13:30 Still side-tracked onto Id and IdSpace
       
LOG:   Completely cleaned up Test and testers to handle gQuiet,
       gVerbose, and gVeryVerbose cleanly.
       
LOG:   Semi-formalised Array Element with BEFE Lifecycle.  Almost there
       but not quite, I think.
       
       Now, back to Id and IdSpace implementation...
       
NOTE:  Made _tempcode directory for parking code that is half finished
       or ill thought out but still don't want it to go away until I'm
       absolutely sure.
       
       It shouldn't get in the way of all the "proper" code if it's
       placed here.  That way, it's under SVN control and "safely
       parked" where it won't do any harm.

TIME:  2011-07-05 14:30..19:00 Roger Helmendach and Range class
       
DONE:  Got Range written except for Parse.

DONE:  Rename AllocInc to Alloc

TIME:  2011-07-06 07:00..16:00 IntFromString and Range

LOG:   Rejigged low level IntFromString functions

LOG:   Changed default Alloc delimeters from '('...')' to '<'...'>'

LOG:   Changed Slice.Parse to calculate correct slice for indexes (eg, "[-5]")

LOG:   Range ToString and FromString all working!

DONE:  Write Range tester

TIME:  2011-07-07 03:00..05:30 Various tidying up tasks

DONE:  Fixed memory loss in "befe -ms string" and more in "befe -ms -vv string"

       The problem was Strings.ShutDown wasn't calling Strings.Clear(), it
       was calling the unknowing Array.Clear() insead.

DONE:  Fixed memory allocation distinct sizes weirdness.  "befe -ms -vv all"
       produced the following summary...
       
            Size       Count
         ---------- ----------
                 16          7
                 32        170
                 48        373
                 64         86
                 64          4
                 64          2
                144          7
                272          5

       Problem was MemoryCopyRaw was copying the bytes one by one and not
       checking for overlap of source and dest memory.
       
       Declared Memmove function and implemented in Win32.cpp.

TIME:  2011-07-07 07:00..18:30 Implementing SparseArray

LOG:   Framework ready to write SparseArray

LOG:   SparseArray ABORT skeleton written

DONE:  "befe -platform" GPFs

       It was a silly error in Strings CountAndSplit introduced when
       I put Char into BEFE.

LOG:   SparseArray main work finished in SparseArray.SubIndexRange.

DONE:  "befe -vv seq" isn't showing ranges properly.

       Problem was I had subtly rejigged Range to only normalise when
       requested so we could have -1:0 as a valid range with length 0.
       But...  Hadn't cleared status in Range.StartUp()

       Another problem was it wasn't handling '\' properly either.
       
LOG:   Tweeked Range so that N-1:N returns 0 on Length() if not normalised.

LOG:   Got SparseArray Length(Int index) and Size(Int index) working
       on missing Indexes.

TIME:  2011-07-07 22:00..23:00 Implementing SparseArray

LOG:   Ready to write SparseArray Array Element methods

TIME:  2011-07-08 05:30..10:00 Implementing SparseArray

DONE:  Uninitialised memory somewhere...

       Doing a "befe -vv -et -ms all" and I got something like this...
         ...
         Total Bytes Allocated:     35424
         Total Bytes Removed:     5755617
                                 --------
         Difference:             -5720193  <-- 144 for the MemoryStats themselves ;-)
         ...
       Something clearly wrong with "Difference..."
       
       It was, String::BuildFrom was doing a ShutDown() when it
       shouldn't have because it's called in an uninitialised state!

DEFER: Write blog about Microsoft and Graphics speed...

         "befe -vv -et -ms all >t.txt" - 8ms
         "befe -vv -et -ms all"        - 851ms (50 cmd depth)
         "befe -vv -et -ms all"        - 1s248ms (3000 cmd depth)
         "befe -vv -et -ms all"        - 1s151ms (5000 cmd depth)
       
       That's 5000/50 = 1151/851 for scrolling different sizes.
       
       Made the window smaller, took less time.
       
       So, they're scrolling the displayed graphics for each new line.
       Even though the human eye can only see 30 frames per second!!!
       
TIME:  2011-07-08 10:30..13:00 Implementing SparseArray

LOG:   SparseArray up to Append SubIndex works!  Insert SubIndex next
       by should be about the same as Append SubIndex.

TIME:  2011-07-08 14:00..20:00 Implementing SparseArray
        
LOG:   Added Range.InRange()

LOG:   ByteBuffer.RemoveBytes caused a GPF because it wasn't removing
       the right length.  Whoops!

DONE:  Finish SparseArray coding and testing

DONE:  Design and write SparseArray and HashArray.  These are needed for
       Id and IdSpace implementations.
       
       We'll defer HashArray until later until it's needed for 
       performance because we can do the same thing with SparseArray.

       In fact, we'll probably make HashArray have the same interface
       as SparseArray.  Good idea, eh?

TIME:  2011-07-09 05:00..08:00 Id and IdSpace
       
LOG:   Renamed ByteBuffer -> Buffer, and SparseArray -> Sparse

LOG:   Renamed StringBuffer -> SBuffer, and FileLines -> Lines

TIME:  2011-07-09 12:00..15:00 Id and IdSpace

LOG:   IdSpace framework completed and empty skeleton written.

TIME:  2011-07-09 07:00..10:30 Formalising IdSpace and BEFE Class Lifecycle

TIME:  2011-07-10 09:00..13:30 More IdSpace and BEFE Lifecycle

TIME:  2011-07-10 15:00..20:00 more IdSpace and BEFE Lifecycle

       Got a bit sidetracked onto more Lifecycle wih BEFE.  Turns out
       there's a strange self-circular naming problem because an
       IdSpace class is a factory for IdSpaces.  Each IdSpace, in turn,
       ends up being a factory for instances of the thing it's 
       controlling.  So, The IdSpace class needs two distinct sets of
       named lifecycle functions like Startup/Shutdown.  One for the
       class, and one for the instance.  Weird!  I hope this doesn't
       appear much anywhere else.
       
       Also, got more Time formatting working.  Microsoft reports
       9 minutes 52 seconds off of what it displays.  That's odd but
       I've verified it from Windows 7 on Jane's machine too.
       
TIME:  2011-07-10 23:30..01:30 More IdSpace and BEFE Lifecycle

LOG:   Added new common Ranges and Range functions.

LOG:   Twiddled with String Append.  Made Append(char *) to
       differentiate it from Append(const char *).

TIME:  2011-07-11 05:00..11:30 Formalising ToString and ToStrings

TIME:  2011-07-11 13:00..22:30 More IdSpace 
       
LOG:   Ready to debug IdSpace.New

LOG:   IdSpace starting to work properly!!!

DONE:  Implement URange

       Until we do, IdSpace ranges have to have a range of 0..NaN-1
       intsead of 0..UIntNan-1

DONE:  Formal Id and IdSpace implementation.

       *** At least for now.  There's still ABORTs in there for
       code that we intend to put there when needed.

DONE:  Declare and make URange
       
LOG:   Fixed nasty bug in IdSpace... It wasn't initialise the Sparses
       in the root IdSpace with the right element size, so it was
       walking over memory!
       
       Jeez!  I thought I was losing it there!  ;-(
 
TIME:  2011-07-12 09:00..13:30 Rework File and Win32File

LOG:   Initial Wrapper for File class.  Now, for the "real thing"
       with Win32File.
       
TIME:  2011-07-12 15:00..18:00 Rework File and Win32File

LOG:   Empty skeleton for Win32File class written and all compiles
       fine with no errors.

TIME:  2011-07-13 06:00..13:30 Win32File
TIME:  2011-07-13 15:00..20:00 Win32File

LOG:   File.Read() and File.Open() work.  Hurrah!!!

TIME:  2011-07-13 10:00..12:00 Win32File

LOG:   In the middle of GetExecutablePath Strings.Split and Strings.Join work.
       ***Won't compile at the moment***.
       Just checking in to save state of affairs.

TIME:  2011-07-14 07:00..18:00 Win32File

LOG:   Strings.Split works correctly now.  It wasn't incrementing
       the destination string pointer so none of the empty strings
       were populated and only the first one was.  The last in the
       source was empty, so the first (and only the way the code
       was working) was always empty too!

LOG:   Now, Strings.Remove doesn't seem to remove the last one in the
       Strings array.

LOG:   Buffer.RemoveBytes wasn't adjusting for negative indexes.

       Because of this... Array.Remove(-1) wasn't getting rid of the
                          last element.
       Because of this... Strings.Remove(-1) wasn't getting rid of
                          the last element.
       Because of this... TheOS->GetTempPath was returning a double
                          file separator in the temp path!

LOG:   Win32File.ModeToStyle was denying multiple ModeRead opens to the
       same file.
       
       Because of this... If you stopped in debugger with file open
                          for read, and invoke the process again
                          somewhere else, the 2nd attempt to open
                          read failed.
                          
       But, it works okay now.

LOG:   Got Win32OperatingSystem Exists, IsFile, and IsDirectory 
       working.

LOG:   Got -dep[recate] and global gShowDeprecated working.  Had to 
       do this for run up to release, because...
       
       We deprecated String.GetChar and turned it into String.Get instead.

LOG:   Added OperatingSystem.CreateEntries stub, not implemented yet.

LOG:   Fixed GPF in String.Append(const char *)... It called itself
       ad infinitum.  Should have called String.Append(String &).

LOG:   Fixed GPF... Win32OperatingSystem was calling CloseHandle
       instead of FindClose after FindFirstFile.
       
LOG:   Added Process GetEnvironmentNames and GetEnvironmentValue stubs.

LOG:   Strings.operator= wasn't clearing "this" before appending.

WEIRD: Windows GetEnvironmentStrings returns two empty named
       strings...
       
         '=D:=d:\Users\bferris'
         '=ExitCode=00000000'
         
LOG:   Got Win32Process.GetEnvironmentNames working.  Now, to get
       Win32Process.GetEnvironmentValue working.

LOG:   Tuning in on Win32OperatingSystem.GetTempFileName, but first
       have to get GetEnvironmentValue written.

TIME:  2011-07-15 07:00..14:30 Win32File
       
LOG:   Got Process.GetEnvironmentValue working

LOG:   Skeletal Befe Class in place.  All compiles but nothing works
       until we rejig and plug into existing initialisation code.

LOG:   Raised "artifact" 3367872 against CodeLite on sourceforge.net...
         3367872 	"Hover notes and focus, needs to listen to ESC key"
       Grrrr!!!!
       
LOG:   Befe class StartUp and ShutDown working now.  Not just that,
       STARTUP() and SHUTDOWN() not even needed in main()!!!
       
LOG:   Win32OperatingSystem.GetTempPath now looks for BEFE_Temp and
       BEFE_Root before TEMP and TMP.

TIME:  2011-07-15 15:30..22:00 Additional File read functions

LOG:   Added File(const char *), File(String) and File(const String &)
       constructors to set the file's name.

LOG:   File Lines() written and works like a charm!
       It only took 6 milliseconds to read an 18k .cpp file.
       Hurrah!!!                                                            s
       
LOG:   Did some work on skeleton of OperatingSystem.GetDirectories
       working.
       
LOG:   Renamed String.AppendFrom to String.Append for ease of use.
       Win32OperatingSystem.GetDirectories working.
       Still outstanding memory leak.

TIME:  2011-07-16 06:00..12:00 Memory leaks
       
LOG:   Fixed one memory leak in File.  It was a doozy...  It had to 
       do with a bad implementation of deferee.
       
       Still one leak left.

TIME:  2011-07-16 15:00..18:00 Memory leaks
       
DONE:  Find memory leaks in "befe -vv -ms t"

       Weird, the 2nd one was in File.deferee too!
       
       These are a bit difficult to find.  I guess it takes paying
       attention REALLY CLOSELY!

LOG:   Started one more stab at Alloc.  Now for the parsing...

LOG:   One more problem in File deferee.  File.GetDeferee didn't 
       return proper deferee in all cases.

TIME:  2011-07-17 02:00..05:00 Tidyup and blogging

TIME:  2011-07-17 08:00..18:00 Revamping Alloc
       
LOG:   Still working on Alloc.Parse...
         Added ToString(Alloc) and Alloc.ToString().
         Added gAllocDefaultOpen global in globals.h and globals.cpp
         Added gAllocDefaultOpen global test in Alloc tester.

LOG:   Alloc.Parse and Alloc.ToString almost working.

       Still some strange behaviour on defaults depending on the
       value of gAllocDefaultOpen.
       
       Still need to get Alloc Inc/Dec percents in there.

LOG:   Alloc seems to work properly now, with both gAllocDefaultOpen
       options.
       
       Just no '%' yet.

DONE:  Try to remember why we need a fourth member of Alloc.  It came to
       me the other night in the meanderings of a dream and seemed to make
       sense... Range = two values, Slice = three values, Alloc = four values.
       
       I just can't remember, at the moment, what the fourth one was, exactly!
       
       It may have been max.  So it would be 0.init, inc-dec, max.  ?????
       
       NOPE!!!!!  It was Maximum Alloc.  So, syntax is...

         <allocspec>  = <emptyalloc> | <fullalloc> | <allocdec>
         <emptyalloc> = '[' ']'
         <fullalloc>  = '[' <allocdec> ']'
         <allocdec>   = [<initelms>][:[<maxelms>]]['+'<incelms>]['%']]['-'<decelms>]['%']]
       
DONE:  Get % in Alloc.

TIME:  2011-07-18 09:00..12:00 More on File

LOG:   Tidy up Alloc.Parse to properly handle embedded spaces
       in parts of Alloc string.
       
LOG:   File.Write and File.Append works.  It's also creating temporary
       files ok.
       
       Next, we've got to get rid of the temporary files on delete if
       access mode says they're "transient".
       
LOG:   Added File::ModeWriteThrough for flushing OS file buffers on
       each write.
       
       This should be useful for logs.       
       It's also useful for debugging.
       It's also useful for ensuring persistent state of data.

TIME:  2011-07-18 14:00..18:00 Played around with Storage units

LOG:   Worked on File.Create, didn't finish it yet though

LOG:   Wrote Win32GetStorageLimits, tested it in trythis

TIME:  2011-07-19 07:30..14:00 Really into "Storage" as a Concept!

LOG:   Created storage main directory.  Put Memory, File, and Storage
       stuff all in there.
       
       This may seem odd, but we're starting to treat all "Storage"
       things (including Memory) as a general concept.
       
       This will probably separate into "Storage" and "Access".  Not
       quite sure where to plunk "Security" in there yet.
       
       But still, we'll see...

LOG:   Wrote proper String.Compare.

LOG:   File Open/Close/Read/Write/Append/Create/Delete all seem to
       work.

TIME:  2011-07-19 16:00..20:00 Slight detour to adjust Time implementation

LOG:   Renamed Time.time member to Time.value for clarity.
       Added Time.Spin and tested it... Negligible overhead.  Good!
       
LOG:   Fixed another side-effect of not initialising Time to
       Time::Now().  This was intentional because we don't want to pay
       the potential overhead just because you declared a variable of
       type Time.
       
       If you want it to be Now(), use time.Set() or xxx = Time::Now().

TIME:  2011-07-20 07:00..12:00 Worked on Stream and OS Devices

LOG:   Tweeked Stream in preparation of FileStream.

LOG:   1) Created File tester
       2) Put Spin test in Time tester
       
TIME:  2011-07-20 13:00..18:30 Windows Console research

LOG:   Played around with Windows Console functions to get ideas about
       building a generic Console class because I'm sick and tired
       of tired old cmd.exe!!!
       
LOG:   Fixed GPF in testFile.  Forgot to expand size of Time array!

LOG:   Move Stream to the storage directory

TIME:  2011-07-21 04:30..06:30 W32Kernel replacement for MinGW calls

LOG:   Implementing W32Kernel header and functions.  Won't link yet.

TIME:  2011-07-21 15:00..19:00 Decided against W32Kernel

LOG:   Didn't understand __declspec(dllimport) with g++ and MinGW...
       So W32Kernel was a bit of a "brain fade" and I backed it off
       to the point it was before I did it!!!
       
LOG:   Got utf-8 and colour wrinkles out of trythis().  About ready
       to write proper Console class and Win32Console as a
       specific implementation of it.

TIME:  2011-07-22 08:00..14:00 Worked on Console and Win32Console

LOG:   Backed off step and prime members in Range and URange...

       Going to make a Prime class and make separate RangeStep and
       URangeStep classes when the time comes.

LOG:   Added TestConsole class and got main invoking it.

       This is in preparation for the Console and Win32Console classes.

LOG:   Worked on formalising relationship between Stream and Console.

LOG:   1) Formalised Nominal integers (Nominal.h).
       2) Changed Id to be a specialisation of Nominal.
       3) Tidied up Time.Spin test result reporting.

LOG:   1) Got rid of deprecated String.GetChar usage
       2) Implemented WARN, Befe.Warn, BEF_NS::Warn
       3) Added -w[arnings] option to main

TIME:  2011-07-23 06:30..09:30 Worked on Console and Win32Console

DONE:  Changed most, if not all, usage of ABORT macro into WARN instead.

DONE:  Nothing important on Console or Win32Console though...  But,
       "paving the way" instead.

TIME:  2011-07-23 15:00..19:30 Worked on Console and Win32Console

LOG:   Skeleton of Console written and starting to work.

TIME:  2011-07-24 07:00..22:30 Removing external dependencies

LOG:   Removed all external dependencies except Windows!

       Release .EXE is about 500K!
       
LOG:   All ToString stuff pretty back to normal after getting rid of
       printf and cout.
       
       For some odd reason, "befe -v all" doesn't seem to do the tests.
       ... Got that working (I had commented it out in Main).
       
LOG:   Got Console colours written.
       Plus quick tidyup of MemoryStats output.
       
LOG:   Console colours all working including WARN and ABORT.
       Tests are all working too.

LOG:   Put IsBigEndian in Stream capabilities.
       Fixed bugette in FormatOut Stream Capabilities.
       
LOG:   Befe StartUp and ShutDown all work properly now.
       Plus, startup console colour attributes and code page are
       restored to originals as they were when our process started.

TIME:  2011-07-25 00:30..03:30 Minor bug fixes

LOG:   Got rid of yellow WARNs left from ToHexString missing.
       Still have problem with MemoryStats numbers.

DONE:  Fixed 'befe -v -ms -ma -mf none' GPF.
       
       Remember, DO NOT use String in low level memory logging!!!

DONE:  Figure out why our Win32 console stuff isn't going to cmd.exe's
       stdout.  Until it does, we can't pipe it!!!
       
       ConsoleWriteBytes wasn't handling output redirection properly.

TIME:  2011-07-25 08:00..10:00 Minor bug fixes et cetera

LOG:   MemoryStats.LogMemoryFree was displaying count in hex not dec

DONE:  Figured out why MemoryStats are not giving exact counts.
       *** Befe.Trailer wasn't Clearing FormatOut when finished with it.

TIME:  2011-07-25 17:00..01:00 Working on StringSpace

DONE:  StringSpace skeleton written.

LOG:   1) More work on StringSpace skeleton
       2) Got general ERROR macro implemented
       
DONE:  Get Foreground/Background colours in Console, and write
       Win32Console that implements it instead of using those rapidly
       getting out of control Console<xxx> functions in Win32.cpp

TIME:  2011-07-26 05:00..18:00 Working on StringSpace
       
LOG:   1) More on StringSpace
       2) Made Char and Id proper UInt values
       
LOG:   Major rework of C++ Lifecycle and BEFE Lifecycle.

       Actually, this is EXACTLY what Chris Brumme did to Sedona that
       long weekend that he worked 4 days 24/7 over the weekend and his
       wife was really pissed of at him!!!
       
       Now, I've done the same thing but it took less than a normal
       work day because I realised it sooner than he did and don't
       have tons of code hanging about to change!!!  :-)
       
LOG:   More tweeking on Console colours in Win32Console.

LOG:   Figured out the StartUp recursion problem.  Didn't need
       the gWin32Depth global after all!
       
LOG:   Had to get current process Handle and call TerminateProcess.

       This was because, for some odd reason, calling ExitProcess
       kept invoking our C++ Destructors.  Hmmmm...  I'll have to
       keep looking into this.

TIME:  2011-07-27 06:00..13:00 Working on Win32Console.GetLine

LOG:   Got it all designed and worked into Win32Console.  Abstracted
       it enough to fit into Stream and generic Console as well.
       
       So, it will work for FileStream when we write it...
       
LOG:   1) Put '\n' in front of Warnings, etc. if applicable
       2) Minor formatting adjustments (UTF-8 in header, etc.)
       3) String.Remove skeleton working and ready to write       

TIME:  2011-07-27 14:30..18:00 More on Win32Console.GetLine

LOG:   Revamped UTF8.GetChar to have GetChar and GetCharPos

LOG:   Console.GetLine working in all but one case...
         Where you type 'abcdefg' and backspace over the whole lot.

LOG:   That's working now.  Except, where you paste UTF into it.
       Maybe something to do with Input Code Page?

DONE:  Get String.Remove designed and working.

TIME:  2011-07-27 19:30..01:00 Working on some "MorphTo..." methods

LOG:   Structural skeletons finished for...

         String.MorphToBytes
         Bytes.MorphToString

DONE:  Get String.MorphToBytes and Bytes.MorphToString designed and
       working.
       !!! It's written now.  Still needs to be tested though!!!!

LOG:   Added Morphing test skeleton
          
LOG:   Finished with String->Bytes->String Morphing.  It all works!!!

DONE:  Look into the two following bugs...

         1) "befe -v -et -m -ms file" has weird 28 byte increment
            memory block sizes (why?)
            
            *** This seems to have reduced or disappeared since
            *** Fix in File.Lines (below)...
            *** Now, probably just because of MemoryStats distinct
            *** sizes list.  May want to keep an eye on that!!!
            
         2) "befe -vv file" displays weird UTF-8 (why?)
         
            *** Problem was File.Lines was using Strchr and NUL
            *** terminating the 4096 byte buffer, making it 4097
            *** and wreaking memory problems.
            ***
            *** Implemented Memchr instead, which is length
            *** limited.  Works just great now!

NOTE:  Microsoft's cmd.exe (or whatever cmd.exe uses for the 'type'
       command) has a bug in it...  Evidently it uses a 512 byte
       buffer and, if you do a "chcp 65001" and do a "type t.txt",
       where t.txt has UTF-8 characters in it...  Every 512 bytes
       in the file, spurious stuff get's output if the UTF-8 stuff
       crosses the 512 byte boundary.
       
       !!! You see, Microsoft can't get it right either !!!

LOG:   Fixed up FormatOut.ProcessHeader to only use UTF-8 if gVerbose
       or gVeryVerbose.
       
DONE:  Think about turning off Console colour unless -CC was specified.
       ***Disabled Win32Console colour of gConsoleColour == false

TIME:  2011-07-28 04:00..17:00 Trying to get proper Lifecycle working
       
LOG:   Geez...  Finally got it working sanely after dicking about with
       Lifecycle, memory allocation, and Console.  That was a scary
       one!  ;-)

LOG:   IdSpace starting to work. Still the odd GPF sometimes.

LOG:   Moved command line processing from trythis into new Command
       class in preparation for the "whole shebang!"

TIME:  2011-07-29 06:00..14:00 Working on Command class

LOG:   Command works just like Befe used to!!!  Now, need to get the
       prompt loop working where applicable.

LOG:   Command loop working.  Now, for some nice commands...

LOG:   Wrote String.Trim, String.LeftTrim, and String.RightTrim

LOG:   Got the following commands working...
         
         ?, h, help
         args
         q, quit
         e, exit

LOG:   Implemented commands sw[itch[es]] and test[s]

LOG:   Commands Range and URange skeletons written.
       Now, time to write the real code...
       
LOG:   Finished commands Range[s] and URange[s]

TIME:  2011-07-29 17:00..19:30 More commands

NOTE:  Commented Test call to testIdSpace, since it GPFs for now.

LOG:   Commands Range, URange, Slice, and Alloc all implemented and
       in a single function.

LOG:   Fixed minor problem in Alloc parsing...  decrement % wasn't
       being populated from proper place.  So, 'Alloc 1..10+50%-16'
       produced '1..10+50%-16%'.
       
       Now it works properly.  ;-)
       
LOG    Added opt[ion[s]] command as alias for sw[itch[es]].
       Plus... Minor formatting: Changed main to output '\n' at start.

TIME:  2011-07-30 06:00..15:00 Trying to figure out C++ startup in Mingw
TIME:  2011-07-30 18:00..02:00 Still Trying to figure out C++ startup in Mingw

LOG:   Various minor fixes...
         1) ToString(Int) was missing from ToString.h
         2) Added PrintMemory to ToStrings.h and ToStrings.cpp for debugging purposes
         3) Changed Platform formatting in ToStrings.cpp
         4) Various hacks playing with MinGW startup functionality

LOG:   MinGW startup processing almost sorted!

LOG:   All MinGW startup works just fine now!!!  Yippee!!!!

DONE:  Figure out why OS is being initialised differently "the first time"
       but not the 2nd...  Something to do with weird Windows heap versus
       .EXE startup?

DONE:  'befe -os' and 'befe -platform' show weird stuff

DONE:  Get Win32File using completely native stuff instead of fopen
       and its <stdio.h> friends.  NOTE: This was done quite a ways
       back, just noticed it now.  ;-)

TIME:  2011-07-31 06:00..09:30 Still Trying to figure out C++ startup in Mingw

DONE:  1) Got Win32 Psapi and Iphlpapi calls working.
       2) Make Win32OperatingSystem.StartUp defer Win32Network.StartUp
         to Befe because it allocates memory.
         
DONE:  Figure out why String.Append appears to work better and more
       consistently than String.operator+=.  Or, maybe it was because I
       was trying to debug it while OUTOFMEMORY keep occurring during
       MinGW startup mess???
   
       *** Yep!  It was because of the OUTOFMEMORY problem in
       *** the Two Phase StartUp
       
DONE:  Still something wrong with MemoryStats display at end...

       Command "befe -ms string" shows '-3' difference!

       Fix... Made MemoryAllocFree delcount >= newcount special case,
       ignore and not count.  This cleaned up the displayed memory
       statistics because it's for those odd cases where something
       allocated before startup is freed before stats are printed.
       
       *** Note: Need to keep an eye on this though!!!

TIME:  2011-07-31 16:00..22:00 OS and Get/Set Current Working Directory

DONE:  Get Path Query working in OperatingSystem
       Seems to have pretty much been there already.  A few problems
       with it were fixed though.
       
LOG:   Got OperatingSystem.GetCurrentWorkingDirectory and 
       SetCurrentWorkingDirectory working.
       
       Bloody Microsoft and their use of #defines instead of proper
       C++ namespaces!!!

LOG:   CommandOS commands starting to work!!!!
       'pwd' works.  Now, for 'cwd', and 'ls'...
       
LOG:   CommandOS 'ls' works now.

LOG:   CommandOS 'cwd' sort of works. 
       We need to update OS now and get that working (see TODO)

LOG:   Added UInts and Ids Array classes.

TIME:  2011-08-01 04:30..13:00 OS and Get/Set Current Working Directory

LOG:   Did a couple of things...

         1) Added OperatingSystem.GetListOperator, and...

         2) Changed mind on what FileSeparator and PathSeparator mean...
              o File separator is the file extension separator
              o Path separator is the '/' or '\' now
              o List separator is for the PATH variable, ';' or ','

         3) Changed Win32OperatingSystem Exists/IsFile/IsDirectory
            Uses GetFileAttributes now instead of FindFirstFile, etc.
            
LOG:   Moved SVN functions to ToString.cpp where they belong

LOG:   Removed String.GetChar because it was deprecated

LOG:   Added Case Insensitive handler registry to Command

LOG:   Added Slices class

LOG:   Added CommandLex to command processing.  Moved Sequence stuff
       out of Command and into there instead because that's where
       it belongs.
       
TIME:  2011-08-01 15:30..21:30 Working on VarTerm for Lexicon

LOG:   1) Initial coding of VarTerm for lexicon.
       2) Added Ranges and URanges classes

TIME:  2011-08-02 03:00..06:00 More work on VarTerm for Lexicon

LOG:   Threw out VarTerm use of Ranges array.  Added TermEntry
       instead.
       
LOG:   Added Lexicon command help and added VarTerm command.

LOG:   Added Optional/Required to TermEntry.

TIME:  2011-08-02 09:00..15:00 More work on VarTerm for Lexicon

LOG:   Added String.GetSlice(Int) short form for ease of use

LOG:   Implemented the two forms of VarTerm.ToString for debugging
       and ease of use purposes    
       
LOG:   Added gShowDebug global for Debug output

LOG:   About ready to write VarTerm.Compare, etc.  I think the
       underlying theEntries now have enough info to do the
       comparisons.  We'll see...
       
LOG:   VarTerm now ready for Match methods specification and
       implementation.
       
LOG:   VarTerm.Match methods specified.  Ready to implement it.

TIME:  2011-08-02 16:00..18:00 More work on VarTerm for Lexicon

LOG:   Getting closer to writing VarTerm.Match.
       Have various VarTerm Query methods now.  It's looking promising.

TIME:  2011-08-03 01:00..02:00 More work on VarTerm for Lexicon

LOG:   Made VarTerm more option sensitive (-v, -vv, etc.)

LOG:   Made Commands prompt with better prompts

TIME:  2011-08-03 09:00..12:00 More work on VarTerm for Lexicon

LOG:   Added Array.GetAddress null form and made both methods public

LOG:   Worked on a couple of IntBits functions for use in VarTerm

TIME:  2011-08-03 15:00..19:30 More work on VarTerm for Lexicon

LOG:   Installed _SanityCheck in BEFE StartUp

LOG:   More work on VarTerm... Started getting IntBit functions in 
       there and preparing for Match using them.

LOG:   Got IntBitScatter and IntBitCollect written and in number
       tester.  Now, to debug them...
       
LOG:   IntBitScatter and IntBitCollect seem to work now.

TIME:  2011-08-04 09:00..16:00 More work on VarTerm

LOG:   Ready to write VarTerm string generation code.

LOG:   Added Slice(Range) and Slice.Set(Range) for setting from a
       Range instance.  We'll see how whether this is a good idea
       or not.

LOG:   Generating required fragments now.

TIME:  2011-08-05 08:00..10:00 More work on VarTerm

LOG:   VarTerm almost works.  Still haven't sorted out semantics of
       'optional' versus 'required' on each level.
       
       That one's doing my head in at the moment.  ;-)
       
LOG:   Various command switch changes...
         1) Added +v and +vv
         2) Added +q
         3) Added +ma and +mf
         4) Changed semantics of -v -vv -q -ma and -mf
         
       Minor fixes to Lexicon command shell output...
         1) Got rid of double \n when leaving Lexicon shell
         2) Added sw/opt/arg command to Lexicon shell for switches

LOG:   Minor option glitch... '-q' wasn't detected properly.

LOG:   Ready for last push on VarTerm

TIME:  2011-08-05 14:00..20:30 Even more work on VarTerm

LOG:   Still more playing with VarTerm.  Seems to be right except
       required ('X') needs to be inherited to greater levels, maybe?

LOG:   Minor problem in String.operator*... Since we changed mask to
       be a UInt16, checking for "< 0" needed to be changed to
       "== UInt16NaN".
       
       This caused a real slowdown in an odd case.
       
LOG:   Did a few more tweeks to VarTerm to get it almost working.  One
       of them was throwing in a Max(...) because we were trying to 
       make a negative multiple of a string!
       
DONE:  Get level gaps out.

LOG:   Seems to work, but have to change VarTerm.GenerateStrings...

       Take this case: 'G[lobal[y]]U[nique]ID[[ent][ifier]]'
       
       Right now, GenerateStrings makes a single pass and doesn't
       generate all the posibilities.  What it has to do is to break
       it up into a stack ending up looking like this...
       
         G[lobal[y]]
         U[nique]
         ID[[ent][ifier]]
       
       Then, it nees to iterate all possibilities of each possibility.
       
       Right now, we miss out on 'GloballyUID', etc.  What a shame, eh?

TIME:  2011-08-06 07:00..10:30 And even more work on VarTerm...

LOG:   VarTerm permutation fragments (TermFrag) now generated and displayed.

LOG:   VarTerm displays TermFrags now as '|' in depth summary if +vv.
       This makes the +vv display much cleaner than detailing the
       TermFrags themselves.  So, commented out the TermFrag detail
       code in VarTerm.ToStrings.

TIME:  2011-08-06 14:00..16:00 More work on VarTerm

TIME:  2011-08-07 08:00..14:00 Final work on VarTerm, hopefully...

LOG:   VarTerm all ready for final rewrite of GenerateStrings.

LOG:   Hurrah!  VarTerm works perfectly now.  Time to write the
       tester for it.  Whew!!!!

LOG:   Finished TestLexicon class to test VarTerm.  It all works!!!
       Except, possibly, for Match.  We'll sort that when we plug
       it into Command.

DONE:  Need to sort out Depth in VarTerm TermEntry Array.  Until we
       get this sorted out we can't write Compare, CompareSensitive,
       and CompareInsensitive.

DONE:  Formalise String Ranges versus Fragments...

         ab[solute] = 'abs' or 'absolute'
         
         ab..solute = 'abs', 'abso','absol','absolu','absolut','absolute'
         
       So 'ab..solute' is equivalent to 'a[s[o[l[u[t[e]]]]]]'
       
       And, investigate the Other x*(...), x..y(...), and x..(...) syntax
       like...
       
         1..'0' means "One or more of the single digit '0'"
       
TIME:  2011-08-07 17:00..20:00 Various

LOG:   Added various Int versus UInt operators to String

LOG:   Added "const" to various functions and parameters to make them
       easily callable from const functions.

LOG:   Added various UInt functions to String.

LOG:   Applied and write IsFullPath in OperatingSystem and
       Win32OperatingSystem.  Also wrote skeletal ApplyFullPath method
       in preparation for writing it for real.

TIME:  2011-08-08 07:00..12:00 Various

LOG:   Put skeleton in for Win32OperatingSystem.IsRelativePath

LOG:   Exposed String.BufByteAndCharCount to public

LOG:   Wrote skeletal Args.RangeSplit for proper argument parsing.

LOG:   Massive overhaul of UInt versus Int usage...
         1) Length and Size now return UInts
         2) Buffer lengths/sizes are all UInts
         3) String.operator* and String.operator*= have UInt equivs
         4) Introduced CamelCase when changing functions
         5) Other UInt versus Int stuff
       Now, to debug the bastard!!!...
       
       There, all Debugged...  'befe +vv all' worked correctly, had
       no GPFs, no errors, and freed all memory!
       
TIME:  2011-08-08 14:00..18:00 Various

LOG:   Fixed small glitch left over from Int -> UInt conversion

LOG:   Fixed another Int -> UInt in UTF8

LOG:   Genericised WARN macro

LOG:   Added Slice URange constructor and Set(URange)

LOG:   Wrote and tested Args.URangeSplit for command line parsing.
       And added Command_ShowArgs to test it.

LOG:   Wrote Args.ExecuteOption for command line options
       And, Args.ExecuteOption works!!!  Now we can use it in all
       Command line processors!
       
LOG:   More Int -> UInt conversion cleanup

LOG:   Win32OperatingSystem.IsValidPathName now validates network
       paths (the ones starting with '\\')

LOG:   Implemented Win32OperatingSystem.IsRelativePath

LOG:   Implemented following CommandOS query commands...

         vf     - "Is Valid File Name?"
         vp     - "Is Valid Path Name?"
         ifp    - "Is Full Path Name?"
         irp    - "Is Relative Path Name?"
         exists - "Does this exist?"

       And, each use a common function CommandOS_Query to do the
       real work.
       
DONE:  Replace Int with UInt everywhere in String that's applicable.
       Especially in Length and Size, and any Lengths and Sizes.

       *** Need to stress that UInt is a statement that signed
       *** Semantics are NOT defined here!!!

TIME:  2011-08-09 00:00..02:00 Win32OperatingSystem.ApplyRelativePath
       
DONE:  Need to implement new function in OperatingSystem...

         o ApplyRelativePath  - To apply a relative path to a full path

       This are needed to get CommandOS's 'cwd' working properly
       without resorting to the horrid "current working directory"
       concept other than for UI purposes.  ;-)

       Then, we need to throw IsFullPath and possibly IsRoot into
       Win32File code for sanity checks.

       This will be really important when we come to writing general
       purpose NameSpace handlers.
       
       Then, we can use this to apply file names to 'cwd' and get
       their sizes, dates, etc. in 'ls'.
       
       ***Note: Also added it into CommandOS_cwd command handler.
       
LOG:   Tweeked CommandOS_cwd to check os->IsFullPath to handle
       currently unhandled case of 'cwd \'
       
TIME:  2011-08-09 08:00..17:00 Various things

DONE:  Tweek Win32OperatingSystem.IsRelativePath to accept '\', and
       change ApplyRelativePath of '\' to go to the root.

LOG:   Added new OperatingSystem Path methods...

         o PathToGeneric - Convert Full path to Generic Form using
                             Generic Path Separator
         
         o PathToNative  - Convert Full Path to Native Form using
                             Native Path Separator
         
         o PathSplit     - Split Path into Parts accepting both Generic
                             and Native Separators
         
         o PathJoin      - Join split Path Parts using native
                            Path Separator

LOG:   Put const in several places in Array and Strings

DONE:  Get Win32OperatingSystem able to handle either '\' or '/' as
       input delimeters.

LOG:   Also got Win32File to transform a Generic Path to Native Path
       when setting the File name.

LOG:   Fixed bug where Args wasn't processing last character on the
       command line.

DONE:  Write OperatingSystem Path Walker with callback.  This
       will create a good demo for release 0.2
       
       May need to add OperatingSystem.GetFileInfo and GetPathInfo
       to show it off.

DONE:  Think about adding a Span class to seq...  It's like a cut
       down Slice but without the step.  USpans as well.  The important
       difference between a Span and a Range is a Span is not inclusive
       but a Range is.

       Have to have a think about notational differences between a 
       Range and a Span.  Hmmmm...
       
       Ranges indicate numbered THINGS.  Spans indicate COORDINATES.

NOTE:  Maybe...

         o Ranges assign "number names" to consecutive things
             hence Length = A-B+1 "Things"

         o Spans are the number of things
             hence Length = A-B "Distance"
             
         o Gaps (which we don't have yet) are the gaps between things
             hence Length = A-B-1 "Gaps"

DONE:  Got Stream::IsInteractive exposed in Console and Win32Console.
       Win32Console will have to check to see if it's keyboard or
       File based and answer appropriately.
       
       Note: Actually, we side-stepped that keyboard or not issue for
             now.  It still needs doing but at some point in the
             future.  Have put it in the long term TODO list.

TIME:  2011-08-10 06:00..16:30 FileStream

LOG:   Got FileStream skeleton that only calls ABORT written.

LOG:   More dicking about with Int -> UInt conversion

LOG:   Made all Buffer members private in preparation for upcoming
       Buffer8 and Buffer16 implementation
       
LOG:   FileStream.GetLine almost written and working!!!
LOG:   FileStream.GetLine works, and with files bigger than 4096 bytes

DONE:  Get FileStream declared, written, and tested.

TIME:  2011-08-11 07:00..09:00 Technical Documentation

TIME:  2011-08-11 10:00..14:30 FileStream.PutLine and File.SetSize

LOG:   Implemented Win32File.SetSize and Win32File.SetLength

TIME:  2011-08-12 05:00..09:00 Finishing off FileStream

LOG:   A couple of fixes in Win32File...
         1) GetAccess wasn't returning Error::None
         2) Write (Move) wasn't adjusting file size member

LOG:   FileStream.PutLine and FileStream.PutBytes completely work.

DONE:  Now, get the code in FileStream.GetLine into GetBytes instead.
       Actually, put in in GetBytes "as well" for runtime efficiency's
       sake.
       
LOG:   FileStream seems to be completely working! Hurrah!!!!!

TIME:  2011-08-12 10:00..18:00 Array Specialisation

DONE:  Figure out why VerTerm doesn't barf at "a[[[b[c[d[e]]" when
       it's clearly got unterminated '[' in there!

       Maybe it's because we need to check for unterminated BEFORE
       we adjust depths?
      
       Note: Yep, VarTerm.Parse wasn't checking for unterminated '['
             just after main loop.

LOG:   Got test Array specialisation skeleton in place and ready to try

LOG:   Array specialisation seems to be starting to work.  Now, for
       some data in the ArrayInfo to see if it works.
       
TODO:  Seems to be a problem with Array specialisation...
       
         ArrayInfo.ShutDown is called when the Array shuts down,
         but ArrayInfo.StartUp isn't being called when the Array
         Appends or Inserts.  Hmmmm....

LOG:   Made several adjustments to Array for Specialisation

LOG:   Adjusted MemoryAllocRaw/MemoryFreeRaw to output 6 digit zero
       extended allocation numbers to make sorting and grouping the
       output easier

TIME:  2011-08-13 06:00..12:00 Array Specialisation
       
LOG:   Adding the ability to add multiple CommandHandlers in one go
       through a list of CommandSpec structs.  See Command.h

DONE:  Figure out why VarTerm doesn't generate things properly...

         o 'O[p[erating]][S[ystem]]' doesn't generate 'OS'
         o '[Var[iable]]Term'        doesn't generate 'Term'
         
       Probably something slightly wrong in VarTerm.GenerateStrings
       fragment iterator.
       
       Was, actually, two problems in VarTerm.cpp...
       
         1) VarTerm.GenerateStrings wasn't iterating properly
         2) TermFrag.Reset wasn't resetting to State zero
       
DONE:  VarTerm works properly in all Command processors.

LOG:   String copy constructor wasn't listening to moveOnAssign

LOG:   Array.StartUp wasn't returning Status

LOG:   Various trythis fixes...

         1) Major one... !!! ArrayInfo.Get wasn't returning copy from Array.Get !!!
         2) Minor formatting changes
         3) Wrong gShowDebug message
         
DONE:  Get Array specialisation working and tested.  This is crucial
       for Arrays of structures that contain Strings, Ints, Bytes,
       or other Variable Length values.

TIME:  2011-08-13 14:00..17:00 Array Specialisation

LOG:   Made a couple of tweeks to Strings.Get (both methods) to make
       them work better and "properly" in the formal sense, because
       they already worked just fine.
       
DONE:  Turn current trythis into a prototype BEFE example for
       implementing Array specialisations.

       Did this by starting an 'examples' source directory.  Put the
       code in ExampleArray.cpp
       
NOTE:  The above will come in helpful in the future to determine what
       impact BEFE Model changes have on existing external code.

LOG:   Buffer.Delete wasn't always setting return Status

LOG:   Several changes to Array...

         1) Copy copy constructor and operator= working
         2) Changes to clean up specialisation overrides

DONE:  Final fixes for missing memory in ExamapleArray when copy of
       array is taken and array_copy.Clear() isn't called.  For some
       odd reason, the destructor doesn't clear memory the same,
       I guess?????
       
       Note: This was a wild one!!!!  Buffer.Copy was calling New
             with the original specified initInc.  Changed to call
             MemoryCopyRaw with the right size and take a physical
             copy of the entire buffer, including the header!!!

TIME:  2011-08-14 08:00..15:00 Array Specialisation and other

LOG:   Added Befe.Congrats and CONGRATS for use instead of WARN,
       especially in examples.
       
DONE:  Figure out why commenting out the MemoryFillRaw in the
       Array.CopyTo method clears up the memory prolems in
       Example_Array.  Hmmmm....
       
       Aha!!!...  The problem wasn't with MemoryFillRaw in
       Array.CopyTo, it's something missing in Example_Array...

       <------------- Figure out why, exactly, later ------------->
          
       And that something was unexpected...  ExampleArray declared
       a "class Infos : public Array", and didn't declare
       "virtual ~Infos()".  So, and I can't figure this one out,
       when an instance of a array_copy in the example got destroyed,
       it called Array.~Array which called Array.ShutDown, but when
       that recognised it was specialised, it called ElementShutDown
       but THAT WASN'T THE Infos.ElementShutDown, even though that
       one's virtual.
       
       All I had to do was to declare "virtual ~Infos()", make it
       call it's inherited ShutDown (from Array), and the correct
       ElementShutDown got called.
       
       THIS IS A REAL MYSTERY TO ME at the time of writing !!!!!
       
       MAYBE I'M GOING CRAZY, or forgetting something fundamental
       here, or both ?????
       
DONE:  Buffer.SetBytes wasn't checking for IndexOutOfRange in case of
       NULL buffer       
       
DONE:  Implement Array Copy Constructor and MoveOnAssign, and
       get it into Strings, Bytes, etc. as well.
       
LOG:   Added "const" to String parameters in the following to make
       it easier to pass Strings built on the fly...
       
         Strings.Set
         Strings.Append
         Strings.Insert
         
LOG:   Started getting help in all Commands and non-prompt mode if
       tests run on native command line.
       
       Still needs more work though, since we haven't implemented
       'help <option>' yet.  Shouldn't take a lot of work to finish
       that one off so it's added to the TODO list.
       
DONE:  Add a Stat[istic[s]] command.  In it we'll start supporting the
       following sub-commands...
       
         o Mem[ory] - Memory Statistics
         o St[ream] - Stream I/O Statistics
         
       We'll add others as the need demands.

       This included...
       
         o Wrote FileStream.ClassStatsToStrings
         o Wrote Command_MemoryStats and Command_StreamStats

LOG:   Changed TestFile to test File AND FileStream classes at the
       same time.  Did this to not only test FileStream, but to get
       some StreamStats displayable from BEFE command line.

TIME:  2011-08-14 16:00..18:00 Some outstanding TODOs

LOG:   Changed Befe.ErrorString formatting

DONE:  Finish off Command_Statistics to invoke MemoryStats or
       StreamStats from the command line.
       
TIME:  2011-08-14 21:00..22:30 Some outstanding TODOs

LOG:   Implemented VarTerm.Match for quick and dirty matches

LOG:   Got Command_Help recognising help options

LOG:   Put all help strings in single place

DONE:  Finish off full BEFE help, especially 'help <option>'

       Note: Well, haven't written the help yet but it's all in one
             place so I'll fill it in when I need it next.
             
DONE:  Need to sort out the two failures in TestLex VarTerm

       Note: Made a couple of tweeks to VarTerm.  Still, last case
             in TestLex doesn't seem right.  Have added another
             TODO for later.
             
TIME:  2011-08-15 08:00..12:00 Some outstanding TODOs

LOG:   Changed moveOnAssign to isConsumable in Array, Bytes, and
       String classes and changed MoveOnAssign() to Consume().
       
       Also, got rid of moveOnCopy everywhere.

LOG:   Got rid of MoveTo and CopyTo everywhere

DONE:  Make all CopyFrom and MoveFrom be passed a const &

DONE:  Change String.MoveOnAssign() to String.Consume() const

DONE:  Change naming of MoveOnAssign and String.moveOnAssign to
       Consumable and String.isConsumable.  This makes more sense
       because, just because it's consumable doesn't mean it's
       been consumed, etc.
       
       While we're at it...  Change Consume() to return a String.
       That way we can pass it on after setting Consumable.
       
       And, add a 'Boolean String.IsConsumable() const' method.
       
       May even think about changing BEFE Lifecycle MoveTo and
       MoveFrom into a single Consume method.

DONE:  Think about adding a SetConsume and AppendConsume to String
       and Strings when passed a String.  This can be used when
       the caller doesn't care about the source String, so it can
       be Moved instead of Copied.
    
       *** No need to to this, Consume() works better than expected ***
       
TIME:  2011-08-15 15:00..17:30 More outstanding TODOs

DONE:  Figure out why invokation without prompt doesn't listen to -ms
       or other command line options.

LOG:   Fixed TestArray.testBytes, was getting a 'FixedSize' error.
       Evidently, Alloc hasn't been used in anger except for Bytes.
       
       Note: ***Keep an eye on this to make sure it's not causing
                unnecessary runtime overhead parsing strings.

DONE:  Look at all "// TEMP" and "// Temp" and see if they can be
       gotten rid of now...
       
       NOTE: Got rid of all of them but the one in testFile.cpp
             which needs ToString(Long) working and in Stream.
             
             Have raised a TODO to finish before release 0.2

LOG:   Did a bit of work on Buffer.txt because I'm not sure I want
       to even to Alloc8 or Alloc16 et cetera until I get the nitty
       gritty details worked out for Buffer.
       
TIME:  2011-08-16 08:00..12:00 More outstanding TODOs

LOG:   Sent off Buffer.txt to Dirck

LOG:   Modified it to get rid of the double '%' and sent it off to
       Dirck again.

LOG:   Tweeked Befe.StartUp to initialise globals, removing function
       call when accessing Cout and Cin.       
       
TIME:  2011-08-17 09:00..14:00 FileInfo

LOG:   Got rid of various spurious '\n' in output

LOG:   Got Console working with redirected stdin...

         a) Added Console.IsInteractive
         b) Added Win32Console.IsInteractive
         c) Added !IsInteractive code in Win32Console.GetLine
         d) Handled !Cout.IsInteractive() in Command.Main
         e) Added DisplayMemory function to ToStrings for debugging

TIME:  2011-08-17 15:00..18:30 More on FileInfo

LOG:   FileInfo related work...

         a) Declared/Implemented FileInfo Struct
         b) Declared/Implemented FileInfos Array
         c) Declared/Implemented ToStrings(FileInfo const &)
         d) Added GetFileInfo methods to OperatingSystem
         e) Implemented GetFileInfo method in Win32OperatingSystem
         f) Added Win32FileTimeToTime function in win32.h and win32utils.cpp

TIME:  2011-08-18 06:00..09:00 Sidetracked on Command and Consume

LOG:   Had molar pulled!!!

TIME:  2011-08-18 11:00..18:00 Sidetracked on Command and Consume

DONE:  Need to sort out globals in two steps...

         1) Get ALL globals (maybe even static class members) into
            a single class instance.
            
         2) Differentiate between '+' and '-' command line options so
            we can turn Boolean globals on/off.
            
DONE:  Get 'befe [<option>...] <script working for proper debugging

LOG:   Pretty much got stdin redirection working, plus...
         a) +echo and -echo command switch with gCommandEcho boolean
         b) OperatingSystem.GetFiles skeleton
         c) Array.Consume implemented
         d) Strings.Consume implemented
         e) +/- versions of all applicable switches
         f) Changed -os -platform, etc. to ?os ?platform etc.
         g) Got Console.IsInteractive and gCommandEcho tests
              in all command processors
         h) Updated help to reflect all this

LOG:   Renamed String.GetSlice(Slice const &) to String.Get(Slice const &)
       for ease of use.

LOG:   Command now ignores comment lines starting with ';', '#' or "//"

LOG:   Implemented 'echo ' command and fixed String.LeftTrim

LOG:   Rejigged StartUp again.  ?os now displays correct stuff.

DONE:  All the low level vtables seem to be missing again!!!!
       Do 'befe ?os' and it doesn't show the right stuff.

TIME:  2011-08-19 10:00..16:00 More sidetracked

DONE:  Figure out why 2 more allocations if stdin redirected

       Seems to have sorted itself and is pretty well behaved now.
       *** Should keep an eye on it though! ***

LOG:   Finally got this whole StartUp vtable and Cout not available
       in StartUp sorted out!!!  Whew!!!

DONE:  Clean up the rest of low level startup
       *** Sort of "DONE"...  May need to have a pass later that
       *** gets rid of TheOS, etc. being indirect by using the
       *** same crap we did with Console and deferTo

DONE:  Write and expose low level Warn, Abort, etc. so they can use
       theConsole instead of Cout.
       *** Didn't have to do this after the StartUp fix above ***
       
DONE:  Get -echo set if stdin redirected

LOG:   Added the following methods to OperatingSystem...

         o SetDefaultSearchPaths
         o GetSearchPaths
         o FindInSearchPath
         
DONE:  Added 'path' and 'which' to CommandOS

DONE:  Figure out why 'befe +ms +vv' doesn't show any allocations now.

       *** Was because I fixed BEFE_Path (had %release and it should
       *** have been %release%) so it was running the release code
       *** which was old and duff

LOG:   Fixed glitch in MemoryStats.LogMemoryFree which wasn't
       continuing when delcount was duff.  It can be duff when
       it's freeing something that was allocated before +ms was
       turned on
       
TIME:  2011-08-19 18:00..21:00 More sidetracked

LOG:   Put all globals into a Globals struct in preparation for
       GlobalStack to be used by Command Scripts and, later, for
       Persistent Settings.

DONE:  Fix Exit() to restore original code page.  If you run 
       'befe +vv all', and do a cmd.exe 'chcp' it'll be 65001
       
       *** BEF_NS::ShutDown forgot to call theConsole.ShutDown

LOG:   Got String functions PreEllipse, MidEllipse, and PostEllipsis
       written and working.
       
       Plugged it into Command_OS for reasonable prompting.
       
TODO:  Add optional '<len>' parameter to Command_OS Slice command
       to show how it resolves slices with lengths.

TIME:  2011-08-20 09:00..20:00 Sidetracked on CommandShell

LOG:   Got CommandShell working and the main loop's there instead of
       inside Command class itself.

LOG:   Implemented +indent and -indent for indenting command levels

NOTE:  Ready to implement CommandShell file stack for scripts

TIME:  2011-08-20 21:00..23:00 Sidetracked on File and FileStream

LOG:   Got copy constructor working for File and FileStream.  It now
       works just fine, copies current name, position, etc.
       
       *** NOW we're ready to get the File stack in CommandShell
       
LOG:   Fixed case where input not redirected but output was...
       Doesn't do an empty prompt now. 
       
DONE:  Design and write CommandStack class.  We'll then take the
       Main loop out of Command and put it there, where it belongs.
       
TIME:  2011-08-21 09:00..20:00 Command Scripting

LOG:   Made two flavours of Args.ExecuteOption

LOG:   Added +script[s] and -script[s] command options

LOG:   CommandShell Run command and command line tests works!!!

DONE:  Get 'befe <script>' working.  This will take a pulling of
       PATH environment variable and (check for BEFE_Path) and
       the equivalent of a "which" type of capability.

LOG:   Got '#!befe', '//!befe', et cetera working

LOG:   Added +headers and -headers command options

DONE:  Figure out why extra '\n' when headers turned off and running
       a script like examples/dir.befe

DONE:  Add "bailing out" check in CommandShell when too many
       contiguous command lines produced errors.
       
DONE:  Figure out why ?platform and ?processor don't show correct info

TIME:  2011-08-22 09:00..15:00 Various

DONE:  Figure out why 'befe +ms' shows Allocations/Removals of zero,
       but shows Byte Allocations/Removes non-zero.  
       *** Probably because the counters are at different places ;-)
       
       Nope, it was because of something I'm not quite sure of...
       Had to add tPrompt.Clear(), prompt.Clear(), and tLine.Clear()
       in CommandShell.Main before invoking the command.  It was these
       three Strings that were showing up in 'byte difference' as
       96 bytes (3*32).  Don't know why it showed up as zero allocation
       difference though.
       
       *** Note: Need to keep an eye on this

LOG:   OperatingSystem.GetFileInfo works.  Suspect GetFilesInfo works
       but will have to write analyse first?
       
DONE:  Define and implement FileInfo class/struct for OperatingSystem.

TIME:  2011-08-23 09:30..12:30 OS Analyse command

LOG:   CommandOS Analyse command skeleton in place

LOG:   CommandOS Analyse command works!  Now, for File analyser and
       size counts...

LOG:   CommandOS Analyse shows used disk space now
       
DONE:  Write Analyse command for CommandOS

TIME:  2011-08-23 14:00..21:30 OS Analyse command

LOG:   Completed ToString implementations for all types of Int...
         o Int16, UInt16
         o Int32, UInt32
         o Int64, UInt64
         o And all the ToString with len
         
DONE:  Get command 'help' working for all the topics

DONE:  Get OperatingSystem.GetUTCTimeDiff written and working and
       incorporated into ToString Time functions if +localtime set.
       
DONE:  Implement Command Date/Time with optional 'UTC' or 'local' arg.
       Plus, plug it into OS and Lex as well and update all the
       associated help text.

LOG:   Changed String.CountAndSplit to only complain when search
       character was UTF-8 instead of when the string has UTF-8
       characters in it.
       
TIME:  2011-08-24 10:00..18:00 Working on Sparse

LOG:   Implemented UArray as the base of all Arrays instead of the
       Array class.  The Array Class now inherits from UArray.
       
DONE:  Get UArray written which uses UInts as indexes and doesn't
       have negative ("from end") semantics.  This will be used as the
       basis for Sparse.

LOG:   Needed to override UArray.GetAddress in Array in order to
       handle negative indexes.
       
LOG:   Wrote proper Win32OperatingSystem.IsDevice method.

LOG:   Got Args.Split using Args.URangeSplit instead of String.Split
       in order to properly split the arguments if quoted.
       
LOG:   Added CommandOS shell [Is]Dev[ice] command.  Thought I would
       need it for testing quoted arguments but that was a different
       problem.  Still, it's nice to have.  ;-)
       
TODO:  Get specialised Sparse written, working, and tested.

TIME:  2011-08-25 10:00..20:00 Setting up new Windows 7 laptop 

TIME:  2011-08-26 08:00..12:00 Setting up new Windows 7 laptop

TIME:  2011-08-26 14:00..20:00 Setting up new Windows 7 laptop

LOG:   Had a terrible time trying to get TortoiseSVN working.  Finally
       figured it out, silly me...  I didn't know that Windows7 is
	   a '64-bit' operating system so I installed TortoiseSVN for the
	   '32-bit' and none of the Explorer hooks worked.  DOH!!!!

TIME:  2011-08-27 10:00..14:30 Setting up new Windows 7 laptop

LOG:   Minor modifications to get BEFE compiling from a newly installed
       CodeLite.  Still haven't figured out how to get rid of the
	     unwanted warnings.

LOG:   Aha!!! Got rid of unwanted warnings about long long constants

TIME:  2011-08-27 16:00..20:00 Started on Number Class

TIME:  2011-08-28 08:00..16:00 Dicking about with Windows7 & Eclipse
TIME:  2011-08-29 08:00..16:00 Dicking about with Windows7 & Eclipse
       
       *** Lost a couple of days here trying to figure stuff out
       *** with Windows 7.
       
       *** Didn't realise Windows 7 comes in two flavours, 32 and 64
       *** bit versions.
       
       *** It turns out that TortoiseSVN needs to be the 64-bit one
       *** because it's an explorer extension
       
       *** It turns out that Eclipse C++ needs to be the 32-bit one
       *** because I couldn't get the "proper" 64-bit one running
       *** at all because it couldn't find the 64-bit JVM (if there
       *** is such a thing).  So, I have to stick to the 32-bit
       *** Eclipse C++.
       
       *** Hmmmm...  I guess I'm not the only one* that doesn't
       *** understand Microsoft and 32 versus 64 bit implementations!!!
       
TIME:  2011-08-30 08:00..15:00 Eclipse and Ubuntu

NOTE:  Decided to install Ubuntu along side Windows 7 using the
       NTFS disk as is instead of creating a separate partition.
       Seems to work okay though.

TIME:  2011-08-30 17:00..22:00 Eclipse
       
LOG:   Tons of tidy up of warnings for Eclipse C++

TIME:  2011-08-31 08:00..16:00 Back to CodeLite for now
       
LOG:   Made String.Append expand this if mult != 1 and fixed a couple
       of errors introduced during Eclipse warning cleanup.
       
LOG:   For some odd reason, Strings.Insert was inserting the wrong
       "empty string" causing a GPF.  Don't know how we got by with it
       this far!

LOG:   Minor fixes for -cutf8 option

LOG:   Wrote Number Class skeleton

LOG:   Wrote Number.operator=(SInt32) and Number.operator=(UInt32)

TIME:  2011-09-01 05:00..13:00 Continuing work on Number Class

LOG:   Removed all #defines from primitives.h

LOG:   Got Number.operator+ with Digits working.  Next, need to work on
       Number.ToString...

TIME:  2011-09-01 17:00..22:00 Continuing work on Number Class

LOG:   Fixed bug in String.Get(Slice const &) when getting reverse
       slices.  Wasn't using right idx1 versus idx2 and was getting
       one too many characters.

LOG:   Number.ToString works now for TypeDigit numbers.

LOG:   Number.operator+ works now except for when signs are different.

TIME:  2011-09-02 05:30..08:30 Continuing work on Number Class

LOG:   Number.operator+ seems to work with type TypeDigit and with
       zeros and different signs
       
TIME:  2011-09-02 10:30..15:00 Continuing work on Number Class

LOG:   Implemented ToString functions for Number

LOG:   Implemented Number.operator- for type TypeDigit

LOG:   Implemented Number.operator=(UInt32)

TIME:  2011-09-02 22:00..01:00 Continuing work on Number Class

LOG:   Preparing to make Buffer and SBuffer consumable

LOG:   Renamed Consume() to Consumable() everywhere

TODO:  Modify String/Array CopyFrom to not clear isConsumable and 
       change operator= to clear it instead.
       *** Half done, did it in string.  Now, for Array...

TODO:  Get Consumable working in Buffer and SBuffer using the low
       bit of the address.  This one's going to be a bit tricky.  ;-)

TODO:  Fix the various tests... Some are misbehaving

TIME:  2011-09-03 10:00..18:00 Sidetracked on rewriting Buffer

LOG:   Decided to turn Buffer into BufferLow, define different size
       Buffer headers, and make a Buffer class that's really a pointer
       to the BufferLow.  This will cause a bit of bother at the low
       level but make it much easier to use higher up.
       
TIME:  2011-09-04 08:00..13:00 Sidetracked on rewriting Buffer

LOG:   Buffer and Buffer low finished except for three teeny BufferLow
       methods.

LOG:   Finished writing Buffer and BufferLow.  Now, for the BIG DEBUG
       session to get it back to a working state.

TIME:  2011-09-04 15:00..19:00 Sidetracked on rewriting Buffer

TIME:  2011-09-05 21:00..00:30 Sidetracked on rewriting Buffer

LOG:   Buffer and BufferLow not GPFing for now.  Still, lots of
       outstanding stuff that doesn't work yet.
       
TIME:  2011-09-06 07:00..11:00 Sidetracked on rewriting Buffer

TIME:  2011-09-06 12:00..16:00 Sidetracked on rewriting Buffer

LOG:   Getting there on Buffer and BufferLow rewrite.  Just a couple of
       GPFs left, I think!
       
TIME:  2011-09-06 20:00..01:00 Sidetracked on rewriting Buffer

LOG:   Buffer and BufferLow all seem to be working except SBuffer.Clear

LOG:   Buffer and BufferLow all work except for Buffer -> SBuffer morph

DONE:  Figure out Buffer -> SBuffer morph problem
       *** Buffer.GetUsedBytes returned UNaN if pointer was NULL,
       *** should have returned zero.

TIME:  2011-09-07 00:00..02:30 Quickie

LOG:   A couple of quickies...

         a) Wrote and tested MemoryExchangeRaw and MemoryReverseBytesRaw
         b) Changed BufferLow.CopyFrom to just swap pointers if
            (*thatp)->IsConsumable() after NULLing dst buffer.

DONE:  Design and write MemExchangeBytesRaw in memutils.cpp for use
       during Sort.

DONE:  Figure out how to find "Endian" flavour in G++.

       *** It's __BYTE_ORDER__ defined as one of the following...
       ***
       ***   __ORDER_LITTLE_ENDIAN__
       ***   __ORDER_BIG_ENDIAN__
       ***   __ORDER_PDP_ENDIAN__
       
       And, while we're at it, write MemReverseBytesRaw() in
       memutils.cpp for reversing Endian bytewise.
       *** See LOG above ***     
      
TIME:  2011-09-07 05:00..07:00 More Quickies

LOG:   Modified ToString(UInt64) and ToString(Int64) to use
       MemoryReverseBytesRaw instead of using local buffer.

LOG:   Several things...
         a) Changed most StringManip.cpp methods to return String &
         b) Changed TestFile to Ellipsis lines (using above)
         c) Fixed minor casting bug in ToString(UInt64) and ToString(Int64)

LOG:   Made Command show header regardless of Console.IsInteractive().

TIME:  2011-09-07 08:30..14:00 More Quickies

LOG:   Changed String.Consumable to use SBuffer.Consumable

LOG:   Fixed ToString(UInt64) and ToString(Int64) to do proper casting
       of (char) instead of appending weird stuff
       
DONE:  Fix 'befe dir' so it finds the Befe_Path\dir.befe
DONE:  Fix CommandOS 'dir'
DONE:  Fix TestFile... Seems to still be looking at 'D:/...'
       
       *** All three of these had to do with the two LOGs above ***
       
DONE:  Figure out why 'befe dir' prompt for input -- and silently!!!
       *** Was because BuferLow.New forgot to set IsConsumable to zero 
       *** for new BufferLows (cleared memory to 0xff but didn't set
       *** it to zero)

LOG:   CommandShell now handles input echoing properly if input is
       coming from a script
       
LOG:   Added ?header and ?footer options and renamed loads of FormatOut
       and cmdutils functions
       
DONE:  Maybe the 16 bytes left after '+vv +tests all' has to do with
       String.Append not consuming the source?
       *** Seems to have gone away now!!! ***

TIME:  2011-09-07 15:00..16:30 Continued on more 'Quickies'
       
DONE:  Figure out why 'echo ...<some utf-8>' produces error GEN+18
       
       Was several UTF-8 problems...
       
         a) UTF8.GetCharPos wasn't initialising newpos right when a
            negative index was passed
            
         b) String.MorphTo wasn't morphing from type Unicode to Buffer
            properly
            
         c) String.Remove wasn't initialising correctly when passed
            negative indexes in Strings containing UTF-8 characters

DONE:  TestString gets internal error in String.PostEllipsis
       *** It was because we changed Truncate to return 'String &' and
       *** hadn't changed the call from PostEllipsis  ;-)
       
TIME:  2011-09-08 05:00..09:00 Rewriting Sparse

LOG:   Sparse skeleton written

TIME:  2011-09-09 12:00..17:00 Rewriting Sparse

LOG:   Sparse C++ and BEFE lifecycle written

TIME:  2011-09-10 17:00..22:00 Rewriting Sparse

LOG:   Sparse contents info methods written

LOG:   Wrote Sparse.Get(UInt)
LOG:   Wrote Sparse.Get(UInt, Int)

TIME:  2011-09-11 07:00..12:00 Rewriting Sparse

TIME:  2011-09-12 05:00..09:00 Rewriting Sparse

LOG:   Just a couple more low level methods to write in Sparse then
       ready to test.

LOG:   Ready to start testing Sparse
       
TIME:  2011-09-12 12:00..18:30 Rewriting Sparse

TIME:  2011-09-13 08:00..12:00 Rewriting Sparse

LOG:   Added Alloc.SetOpen and Alloc.SetClosed methods

LOG:   Sparse.Append starting to work.
LOG:   Sparse.Exists starting to work.

TIME:  2011-09-13 15:00..20:30 Rewriting Sparse

LOG:   Sparse.Append now inserting in correct place

LOG:   Sparse.Append and Sparse.GetAddress are working now, and 
       Sparse.Get finds elements as well.

TIME:  2011-09-14 03:00..05:00 Rewriting Sparse

LOG:   Filled out full BEFE Lifecycle in Strings

LOG:   Added HashSensitive and HashInsensitive methods  to String

TIME:  2011-09-14 08:00..16:00 Testing Sparse rewrite

DONE:  "befe +tests t" fails finding String 2 Insensitive hash

LOG:   Got Sparse binary search working, especially in the case where
       it's not found.
      
LOG:   Fixed some  bugs in Sparse (using TestArray.testSparse to test)

DONE:  Find Webster and South African dictionaries from old laptop
       and put them into SVN somewhere.
       
       *** They're already "somewhere"...
       ***   c:/cloud/dropbox/lists/corncob_lowercase.txt
       ***   c:/cloud/dropbox/lists/Websters_2nd.txt
       *** Put them into c:/cloud/dropbox/SVN/C++/_testdata
       *** and added them to the SVN repository

LOG:   Fixed more bugs in Sparse implementation

LOG:   Modified TestArray.testSparse to correctly handle expected
       errors in getting/setting test cases.  Now, there's only a
       couple of proper bugs left.
       
DONE:  Uncomment other tests (Bytes and Strings) in TestArray.Run

TIME:  2011-09-14 18:00..21:00 Final Sparse testing

LOG:   Had to separate Sparse.GetAddress into Sparse.GetPhyAddress and
       Sparse.GetLogAddress

LOG:   Sparse.ResolveGet was doing wrong check for subindex
LOG:   Sparse.SubIndexRange was returning silly values

DEFER: Need to think about getting rid of Sparse Insert/Append and just
       doing it all through Set instead?  On the other hand, we'll need
       Insert/Append for Sub-Indexes.  Hmmmm....
       
       *** Nope, we'll keep Sparse.Append(UInt) and then write
       *** Sparse.Insert(UInt index, Int subIndex) when needed
       *** It'll be quite easy with what we've got now so we're
       *** going to DEFER this       
       
DONE:  Still a few bugs left in 'befe +v +tests array'
       *** Hurrah, Sparse seems to completely work!!!
       *** We'll put it to bed now for a while! ;-)

LOG:   Moved test code in trythis.cpp into TestArray.testSparse2

TIME:  2011-09-15 08:00..12:00 Working on Sort and StreamBuffer

LOG:   Added some handy additions to Buffer...
         a) Append(char const *)
         b) Append(const *)
         c) Allocate(UInt)
         d) Changed Buffer.GetAllocBytes to return 0 if not allocated       

LOG:   Added various ToStrings(Buffer const &) functions
LOG:   Added more handy functions to ToStrings
LOG:   Initial BufferStream implementation written

DONE:  Preparing for Sort... a) Add ReadLine/WriteLine to Stream (plus capabilities)
DONE:  Preparing for Sort... b) Write BufferStream (and implement ReadLine)
DONE:  Preparing for Sort... c) Write MergeSort tester using BufferStream to get lines
                                and sort array of String Hashes from lines
                                
TIME:  2011-09-15 15:00..21:00 Working on Sort and StreamBuffer

LOG:   More work preparing for Sort, including beefing up BufferStream
       and making it more quick and dirty to use
       
LOG:   Created and implemented StreamStats class for each Stream

LOG:   All cards are line up now to write SortMerge()

LOG:   SortMerge first pass written and working.

TIME:  2011-09-16 08:00..15:00 Working on Sort

LOG:   Throwing away Merge Sort and implementing Bubble Sort instead.
       This is because Bubble works entirely on swapping, where Merge
       needs to "emit" to "temporary place".

LOG:   Bubble Sort working in trythis.  Ready to implement properly.

TIME:  2011-09-16 21:00..00:00 Working on Sort

LOG:   Got rid of in-place swap in Sorts and redefined them to return
       a UInts array containing sorted indexes.       

LOG:   Cleaned up UTF-8 output in MemoryStats based on the gConsoleUTF8
       switch setting       
       
TODO:  Expand SortTarget class to have Emit and associated temporary
       storage methods.

TIME:  2011-09-17 05:00..10:00 Working on Sort

LOG:   Got SortInsertion, SortSelection, SortBubble working.  Ready
       to do SortMerge.

TIME:  2011-09-18 11:00..13:00 Working on SortMerge

LOG:   Moved sorts out of trythis.cpp and into separate Sort<xxx> 
       files.  Also, made two versions of each...

         o In-place sort
         o Out-of-place sort

TIME:  2011-09-18 17:00..19:00 Working on SortMerge

LOG:   SortMerge Out-of-place works.  Now, for In-place SortMerge...

LOG:   Fixed bug in CommandShell when output redirected but script run
       from command line (eg 'befe t >t.txt')
       
TIME:  2011-09-19 08:00..11:00 Working on SortMerge
TIME:  2011-09-19 13:00..17:00 Working on SortMerge

LOG:   Got trythis loading Webster's 2nd dictionary strings
         
TIME:  2011-09-20 10:00..17:00 Working on SortMerge & Dictionary

LOG:   Got Dictionary skeleton written

LOG:   Did  little clean up of String BEFE Lifecycle methods

LOG:   Dictionary implementation working.  Now for Sorting it

TIME:  2011-09-20 18:00..00:30 Working on SortMerge & Dictionary

LOG:   Playing about with BEFE overall Lifecycle and memory allocation
       to see why running scripts causes differences that aren't there
       when running same stuff from command line.
       
LOG:   Added ConstLen type to String Class

LOG:   Fixed Stream operator<< to output Long properly

DONE:  Figure out why "befe +ms +mf +ma t >t.txt" blows
       *** This has something to do with MS C++ runtime (msvcrt) and
           memory lifecycle outside of main.  Hmmmm....
       *** For some odd reason, this seems to work now.
       *** KEEP AND EYE ON THIS!!!

LOG:   Fixed minor glitch due to recent addition of StringType ConstLen

TIME:  2011-09-21 06:00..12:00 Slight code cleanup departure

LOG:   Did various minor things including...

         o Added Reset() to Strings, UArray
         o Fixed Mask in Error.h (was displaying wrong error code)
         o Added gDefaultBufSize to globals.h and globals.cpp
         o Got rid of most 4096 references in code, change it to
             use gDefaultBufSize instead
         o Started writing FileStream.GetLines so it loads fast on
             big files like "Websters_2nd.txt"
         o Various changes to TestFile...
           - Use Stream.GetLines instead of iterating
           - Load Websters_2nd as well
           - If lots of lines, only display first/last 50 or so

LOG:   File.GetLines now returns fast Lines instance, even on
       "big files" like Websters_2nd.txt

LOG:   Added GetLineAddress method (transient pointer) to Lines for
       use in Dictionary sorting code (still to be written)

TIME:  2011-09-21 13:00..17:30 Working on SortMerge & Dictionary

LOG:   Did a couple of things...

         o Changed UArray.bBuf to UArray.Buffer
         o Added UArray.SetLength method
         o Changed SortMerge to use SortTarget.Selected       
         o Changed all Out-of-place sorts to use SortTarget.Selected

LOG:   Finished writing and ready to debug Dictionary with sort/select

TIME:  2011-09-21 20:30..22:30 Working on SortMerge & Dictionary

LOG:   Did a little fiddling about with UArray.AllocateBuffer and
       Alloc.Normalise so they work more sanely.

DONE:  Fix UArray.AllocateBuffer to be passed a size and, if it's not
       UNaN, populate the Alloc before allocating first time.
       *** The current way needs a double allocation on StartUp if
       *** SetLength is being used.  That's bad!!!
       
LOG:   Dictionary works now reading from text file.  Need to write
       Exists, ExistsInsensitive, et cetera       

LOG:   Dictionary now checks to see if the words are already in sorted
       order and, if so, doesn't bother sorting them.

TIME:  2011-09-22 06:00..08:00 Documentation

LOG:   First stab at BEFE Persistent Lengths documentation

TIME:  2011-09-22 10:00..13:00 Persistence

LOG:   Beginnings of Persist and Class classes

TIME:  2011-09-22 16:00..19:00 Dictionary Persistence

LOG:   Skeletons of Persist class and Dictionary.SaveTo/LoadFrom written

TIME:  2011-09-23 06:00..08:00 Dictionary Persistence

LOG:   Added String(char const *, UInt) and BuildFrom(***same***) to
       String implementation.

DONE:  Remove UTF8::Count in String.BuildFrom(char const *) and have
       if set isByte=isChar=true just like it is in the method
       BuildFrom(char const *,UInt32).

TIME:  2011-09-23 10:00..20:00 Dictionary Persistence

LOG:   Wrote IntReverseBytes() for MSB network byte order

LOG:   Declared Multiple Value methods for Member and Atomic Values
       in the Persist Class

LOG:   Win32File now opens a temp file by default if no File Name given

LOG:   Changed Win32File.Open to abort with mesage if temp file and
       BEFE_Temp path doesn't exist

LOG:   Got complete Persist skeleton written, debugging with Dictionary
       for now...       
       
TIME:  2011-09-23 22:00..01:00 Dictionary Persistence

LOG:   Win32File.Size wasn't restore saved Access flags correctly

LOG:   Added FileStream.GetAccess() method

TIME:  2011-09-24 10:00..18:00 Dictionary Persistence

LOG:   Fixed small glitch in Win32File.Open caused by above Access fix

LOG:   Added String.PersistWriteAtomic and tweeked String.ToBytes to
       handle UInt values properly

LOG:   Added UInt Main/Sub Version/Revision methods to Platform for use
       in BEFE Persist signature (to be written)

LOG:   More modifications to Platform...  Added GetPort method to
       indicate which port we're running on
       
LOG:   Added Signature to Persist.StartWrite

TIME:  2011-09-24 21:00..02:00 Dictionary Persistence

LOG:   Dictionary.WriteTo and Persist methods seem off to a good start.

       It takes 93ms to load Webster's 2nd dictionary (260,000 words)
       from text file.  It takes 33ms to write loaded dictionary.  So,
       that makes it 1/3 to write.  Hopefully Dictionary.ReadFrom,
       when we start working on it, will read in about 33ms as well.
       That would give us a 3 times speed improvement over text I/O!!!

LOG:   Added Unicode document "CaseFolding.txt" to _testdata   

TIME:  2011-09-25 09:00..18:00 Back to before Persist/Dictionary

DONE:  Add ConstLen string type, and shove the len (0..127) into
       reserved member.
       
DONE:  Figure out why ?os, ?platform etc shows bogus unterminated
       strings.  Probably has to do with the String.ToBytes stuff
       recent changes. 
       *** String.Append wasn't appending from ConstLen types properly
       
DONE:  When running BEFE command prompt, backspacing to before the 
       beginning of the line gives you the following...
       
           Befe> os
             C:\BEFE>
           !!! WARNING: Error from String.Remove
           !!! WARNING: Error getting command line
           Error BEFE.GEN+11
           *** ERROR Command.Main: Error BEFE.GEN+11

LOG:   Lots of work analysing +ms +ma +mf output to figure out why
       running scripts gets a memory leak.
       
       Got some of the leaks fixed.
       
TIME:  2011-09-26 09:00..19:00 Still working on memory leaks

LOG:   Moved text file Memory analysis into CommandOSAnalyse.cpp
       instead of sitting alone out of context in trythic.cpp

LOG:   After lots of BEFE Lifecycle tweeking, almost got the memory
       leaks sorted.  Still 2K left if scripts run.  ;-(

TIME:  2011-09-27 06:00..13:30 Still working on memory leaks

DONE:  Use non-String based Cout functions for displaying MemoryStats
       because it's causing tonnes of extra allocations just to
       use +maf option

DONE:  Write MemoryReverseShorts, MemoryReverseInts, and MemoryReverseLongs

DONE:  Figure out why when running script, +ms shows difference in
       bytes allocated versus freed.

       *** Whew!!!  This one was hard work.  ;-)
       
LOG:   Added gShowMemoryStats global, changed +ms/-ms options to
       set/clear that, and used gShowMemoryStats to determine whether
       to display MemoryStats on exit.

TIME:  2011-09-28 07:00..18:30 Worked on reducing memory allocations

LOG:   Renamed String.Split(...) to Strings.SplitToStrings(...), and
       added skeletal String.CountAndSplit(...Ranges...) and
       Strings.SplitToRanges(...)

LOG:   Changed CommandOS_txt.cpp text file analysis to use new String
       Range splitting and Get methods.
       
       *** Changed from 414004 memory allocations down to 41808
       ***   That's a reduction to 10% of what it was by using Ranges
       ***   instead of Strings for "parsing".

LOG:   Finally, after tonnes of bugs etc, got MemoryStats analysis of
       .txt files working with extremely reduced memory usage.  Still
       not happy with the speed though.       
       
DONE:  Implement File.ReadLineRanges() and File.ReadComplete() using
       a Buffer instead of strings.  And, once that's done, change
       CommansOS_txt.cpp text file analysis to sort using the ranges
       instead of actual strings.  This should cut down the allocations
       by another 10x factor.
       
       *** Either the numbers above are wrong or it got worse.  Hmm...
       *** Now, it's all working with Ranges and a single buffer
       *** for the entire t.txt file (5300 or so lines) and there
       *** seems to be 63000 allocations total.  Although, it's all
       *** sorting fairly fast, etc.
       ***
       *** Will have to keep an eye on this one.
       
LOG:   More fine tuning on MemoryAlloc .txt file analyser

       *** Now, it's only taking .25 seconds for c:/befe/t.txt, which
       *** is 302KB (4 seconds for tnew.txt which is 6MB).  And, with
       *** t.txt we only have 30,000 allocations.  Getting pretty good
       *** now because that's only 6 allocations per line.

NOTE:  Had a weird one...  Was running analysis on c:/befe/tnew.txt
       and piping the output to x.txt.  Then, after running it a couple
       of times cmd.exe gave us "OUT OF MEMORY" when doing the command
       "more x.txt".  Weird!!!!  Maybe it's time to write our own heap
       manager.  We'll put that on the back burner for now. 

TIME:  2011-09-28 22:00..03:00 Preparing for String.SplitToConstStrings

LOG:   All set to write Strings.SplitToConstStrings now

LOG:   Added Bytes.MorphToString(Boolean makeMutable) for showing
       express intent to make a ConstLen(ish) String (it then makes
       String.isMutable=false) if told to, allowing the String
       SplitToConstStrings usable with knowledgable intent having been
       expressed.

DONE:  Design some kind of general purpose Array (?) sorting mechanism.
       Sort type (Qsort, etc.) must be selectable.
       
       Should use some kind of Sort callback function for comparing.
       
       *** Note: We finished this a couple of days ago but put "DONE"
       ***       here because we finally got it working pretty sanely
       ***       today without using up tonnes of memory allocations

TIME:  2011-09-29 06:00..18:00 Writing String.SplitToConstStrings

LOG:   String.SplitToConstStrings all in place and working

LOG:   String.Trim, String.LeftTrim, and String.RightTrim now work on
       ConstLen Strings without allocating memory.
       
       *** String.LeftTrim works find on Const strings, but
       *** String.RightTrim obviously needs to mutate it.

LOG:   CommandOS_AnalyseFile_txt now works entirely with ConstLen
       Strings and works fast.  :-)
       
       *** Now, instead of the original 414004 memory allocations,
       *** there's only 7900 of them (most of which are standard
       *** startup allocs having nothing to do with the analysis).

TIME:  2011-09-30 08:00-12:00 General "TODO" tasks

DONE:  Fix the three outstanding memory leaks when running analysis
       on c:/befe/t.txt
       
       *** Finally found them... It was UArray.Reset was calling
       *** UArray.Clear instead of calling buffer.Reset().
       ***
       *** So remember: In Reset() always RESET, never CLEAR!!!!!       
       
DONE:  Get rid of itoa, etc.  Do this by puting -nostdlib (or
       whatever) in the Linker options.
       
       *** Actually did this through time but just verified it today

LOG:   Added REG_EXPAND_SZ handling in Win32RegGetValueString

LOG:   Got Win32OperatingSystem.GetTempPath to do a rigorous
       environment variable AND registry setting search for temporary
       paths.
       
       And, while there, changed it to warn if a bogus temporary path
       was specified wherever it found it specified.
       
DONE:  Make sure Befe_Temp "not exist" works properly and shows up
       in TheOS->GetTempPath if set and exists.
       
       This will show off coming intent with BEFE persistence.
    
       *** Note: see above LOG note
       
TIME:  2011-09-30 14:00-18:00 General "TODO" tasks

DONE:  Get String.CountAndSplit using proper Memchr to search for
       the character.  This should be a whole lot faster than it
       currently is.
       
DONE:  Make sure all calls to UTF8::Count in String implementation
       are properly checked before hand by testing !(isByte^isChar),
       in which case they're already figured out and we know it!
       
       Note: This will take a bit of serious testing in UTF-8 cases
       .
       Note: We'll also have to look at all calls to SBuffer.Length
             and Strings.BufByteAndCharCount to make sure it's not
             "hidden" by surrounding code
 
       *** Seems to be right, checked all calls and every that stuff's
       *** used seems to be when it wants charCount.  ;-)

LOG:   Changed "Status result" to "Status status" in ALL the code.
       Finally!!!!

LOG:   Got rid of switch in String.Split methods, used modified
       String.BufAndSize to get the Byte buffer and length in bytes
       
DONE:  Get "while (false)" everwhere.

TIME:  2011-10-01 09:00-18:00 More work on String class

LOG:   Turned String::Unicode into String::UtfInline, and now keep
       single character UTF-8 as encoded bytes.  Almost works, a few
       minor bugs to fix still.

DONE:  Fix remaining bugs introduce by the above UtfInline change.
       
DONE:  Turn String "Unicode" type into "UtfInline" type and keep the
       UTF-8 encoding in this->data.  
       
DONE:  Get rid of the "utfbuf" parameter in String.BufAndSize

TIME:  2011-10-02 12:00-18:00 More work on String class

LOG:   Took a long hard look at personal Wiki products out there in
       case we wanted to use one for our own documentation.
       *** Nope, none of them cut the mustard
       
LOG:   Renamed String.GetSlice and String.GetRange to String.Get

DONE:  Optimise String.Get(Slice) for ASCII and step==1

LOG:   Start rationalising/normalising C++/BEFE Lifecycle methods in
       all UArray/Array type Classes.  Removed all virtual methods
       because that way didn't work very well.  Instead, we're simply
       writing wrappers for each class that pass the right stuff to 
       the underlying Array/UArray.

TIME:  2011-10-03 12:00-18:00 More work on Array/Bytes rationalising

LOG:   Decided to only use Array for variable length elements.  We'll
       use Bytes instead and make UInts, Ints, etc. inherit from that.

LOG:   Bytes revamped and ready for inheritance.
       
TIME:  2011-10-03 21:00-00:00 More work on Array/Bytes rationalising

LOG:   Finished all Bytes/Array revamping except for FileInfos

TIME:  2011-10-04 09:00-17:00 Debugging Array/Bytes specialisations

LOG:   Finished writing FileInfos Array specialisation.
       Now for debugging the lot...

LOG:   Wow, that was EASY!!!  Array/Bytes specialisations all seem to
       work okay.  Need to take a close look and make sure FileInfos
       works though.
       
DONE:  Finish rationalising Lifecycles and all UArray like Classes

LOG:   Fixed minor glitch when building ASCII1-ASCII4 string (it didn't
       populate constLen properly)

DONE:  Get String.isSensitive implemented along with case sensitive and
       case insensitive comparisons.  Make Compare() do whichever is
       appropate based on String.isSensitive.

       *** Implemented with String.isSensitive flag, default 'true'.
       *** Plugged into Compare, operator==, and Hash methods       

LOG:   Fixed Range/URange InRange methods which didn't work properly

LOG:   Fixed Command to handle String sensitivity logic change
       (The String.Compare with flag changed to be the opposite of the
       original semantics)

LOG:   Added GetMemoryPageSize to OperatingSystem, and added
       AddressIsReadable and AddressIsWritable to Process Class.  This
       lets us get around using signal.h and the silly SIGSEGV trap.
       I figure it's better to check than to respond to traps!!!
       
DONE:  Figure out how to catch divide by zero, and SIGSEGV traps
       *** To handle divide by zero, check first!
       *** To handle SIGSEGV, check first! (see LOG note above)
       
LOG:   Got rid of the vast majority of #defines in the .h files

TIME:  2011-10-05 07:00-20:30 UTF-8 Unicode Folding

LOG:   Added Sparse.DistinctLength to get distinct Sparse index count
      (Sparse.Length return TOTAL count including sub-elements)

LOG:  Changed Char.operator Int to Char.operator UInt to make it proper
      semantics since Char's are not signed values
      
LOG:  Finished Unicode Fold parsing from text file working in trythis.
      Now, to get it properly into UTF.h and UTFFold.cpp...

LOG:  Changed String Ellipsis methods to return copy of "this".  We did
      this because, quite often, we'll simply use the Ellipsis methods
      on their way out to Cout, etc.  That way, we don't destroy the
      original string.

LOG:  Plugged trythis code into UTF8Fold.cpp.  Next, the actual UTF-8
      Folding methods, followed by C++ code generation from the file
      ".../_testdata/CaseFolding.txt" to make the default Folding
      really FAST!!!
      
      *** Note: We've added the CaseFolding.txt reader so that we
      ***       don't lock ourselves into the "current" Unicode
      ***       standard as published, plus it lets anybody override
      ***       the default coding if they don't like it.  ;-)

LOG:  Simple Unicode Folding starting to work.  Weird though...
      I thought the mappings went from lowercase to uppercase, but they
      go the other way around.  Hmmmm...
      
LOG:  Folding works.  Added Simple/Common Unfolding into UTF8Fold.cpp

TIME:  2011-10-06 07:00-16:00 UTF-8 Unicode Folding

LOG:  Added Sparse.SetLength and Sparse.GetPhysical methods

LOG:  Combined UTF8 Common Folds into Simple and Full fold result in
      UTF8.LoadFolding.  Next, do the same with the Unfolds...
     
LOG:  Adjusted several methods to String and added String.operator+(Char)
      so we can easily form strings on the fly using Unicode characters
      
LOG:  Plugged Unicode Unfolding functions/statics into UTF8

LOG:  Rejigged underlying Char methods

TIME:  2011-10-06 15:30-21:30 UTF-8 Unicode Folding

LOG:  Moved Unicode Folding test into proper UTF8 Test function

LOG:  Added +U[nicode]F[olding], -U[nicode]F[olding],
      +U[nicode]T[urkish], and -U[nicode]T[urkish] to switch settings

LOG:  Hooked +U[nicode]F[olding] etc into UTF8 properly.  Now, UTF8
      will clear gUnicodeFolding if it can't load it.  And... hooked
      proper UTF8 calls into Args.cpp so using the +/- UnicodeFolding
      options properly releases memory and sets globals properly.

      *** Ready to implement gUnicodeFolding in String and Char

DONE:  Fix Command_ShowArgs to actually display the switch settings.
       And, while we're at it add ?sw[itch[s]] and ?opt[ion][s] to the
       command options.

LOG:   Added +warn and friends (don't know why I missed that!)  Also
       changed UTF8.LoadFolding to only warn if gShowWarnings is set
       instead of using gShowDebug -- which was the wrong way to do it
       to begin with.  ;-)
       
TIME:  2011-10-07 07:30-19:30 UTF-8 Unicode Folding

LOG:   Cleaned up and rationalised String compares in preparation for
       Unicode Folding in String comparison
       
LOG:   Identified and isolated String Unicode Folding in Compare
       Insensitive methods
       
LOG:   Rationalised Globals Class member names (got with of the
       lowercase 'l' in them)

LOG:   Plugged Unicode Folding stubs into String.Lowercase and
       String.Uppercase and wrote minimal test in TestUTF8.testFolding       
 
TIME:  2011-10-08 07:00-16:00 UTF-8 Unicode Folding

LOG:   Added UTF8.DecodeChar and moved that code out of UTF8.GetCharPos

LOG:   Various changes to String...

         o Finished String.ToLowercase
         o Stubbed  String.ToUppercase
         o Finished String.Lowercase
         o Finished String.Uppercase
         o Matured String mutability methods and moved into String.cpp

       Now, for testing...         

LOG:   Unicode case folding/unfolding working
       String  case folding/unfolding working
       String  case sensitive/insensitive compares working

DONE:  Get String Unicode case folding working properly in all cases
       and write a tester for it

DONE:  Change String.Lowercase and String.Uppercase back to returning
       "String &" and make them only make a local copy if they change
       any character in the string (eg, if it's already lowercase, then
       String.Lowercase shouldn't make a mutable copy).
    
LOG:   Sort of minor fixes/changes...

         o Put in Globals.UnicodeMaxFullFoldChars
         o Fixed Globals.CopyFrom (was copying wrong way)
         o Changed Time.Set to return current time as Long
         o Added Globals.UnicodeMaxFullFoldChars to ToStrings(Globals &)
         o Tidied up ToStrings(Globals &) formatting
         o Changed BEFE_NS::StartUp to set TheGlobals.StartTime as soon as
           we possibly can (Win32OperatingSystem needs to be started first)

TIME:  2011-10-09 06:00-10:00 UTF-8 Unicode Folding and More...

LOG:   Got Turkish working fine in String.CompareInsensitive

DONE:  Still a slight glitch in folding/unfolding Turkish special case
       of U+0130 and U+0131.  Need to make sure this folds/unfolds
       properly but, when comparing, they fold to latin lowercase 'i'
       instead of U+131.

LOG:   Added UnicodeCurFullFoldChars to Globals, set/unset it in
       UTF8.LoadFolding and UTF8.UnloadFolding, and displayed it
       in ToStrings(Globals &)
       
TIME:  2011-10-09 13:00-19:00 UTF-8 Various things...

FIXED: The following scenario gets buggered...
      
         Befe> opts +uf
         Befe> opts -uf
         Befe> help
       
       *** Was because of a stilly mistake when checking for Unicode
       *** case in String.CompareRelativeInsensitive       
       
DONE:  Add the +info and -info options to display various information
       during processing.
       
       *** And, change UTF-8 LoadFolding to display info at the end
       *** if it's set
       
FIXED: Unfolding warnings seem a bit dodgy...  Line 335...03C0 is one
       example where it's probably wrong.
       *** Actually, it wasn't a bug, because I verified each one and
       *** it's reporting reverse folding duplicates correctly.
             
TIME:  2011-10-10 07:00-11:00 Various other things...

LOG:   Changed Span and USpan to parse separator ':' instead of '-<'

LOG:   Fixed weird cases of '\' in Span and USpan.

LOG:   New Range, URange, Span, and USpan declarations and methods
       written.
       
       Now, it's time to update CommandLex to have various commands for
       testing these buggers!!!

TIME:  2011-10-10 16:00-23:00 Various other things...

DONE:  Change Span syntax (Span::Parse) to be N:M instead of N-<M
       because things like -2-<-1 looks daft but -2:-1 would
       be much better.
       
       *** In fact, a Span is simply a Slice without the step.
       *** This means it should used the same syntax, have the
       *** same methods, and act just like a Slice but with the
       *** comfortable knowledge that there's no "gaps" like might
       *** be present in Slices.
       ***
       *** So... Make sure Span has all the same appropriate methods
       *** that Span has (like Normalise, etc)
       
LOG:   Played around, in trythis.cpp, with a Lexical Token parser.
       It turns out that with Strings, Ranges, etc., it's incredibly
       fast to determine the low level C, C++, Python, and Java
       tokens.

       In fact, it read and processed the 11MB 'big.xml' file in about
       31 seconds.  It has around 350,000 lines, and over 4 million
       tokens.  So, in that respect, I guess it's not to shabby!!!
       
TIME:  2011-10-11 07:00-13:00 Various other things...

LOG:   Moved Token code from trythis.cpp into Token.h and Token.cpp

LOG:   Moved Token into lex/Token.h and lex/Token.cpp and saved
       trythis.cpp in _thisthis_7._cpp
       
DONE:  Implement USpan and USlice and test them.
       *** Actually, only implemented USpan.  Not sure USlice makes 
       *** sense to declare.
       
DONE:  Implement Spans and USpans Array implementations
       *** Defered the testing for later TODO item

TIME:  2011-10-11 17:00-20:00 Various other things...

LOG:   Tidied up what Token.Next analyses, including HashLines and full
       set up single character operators.
       
LOG:   Added Lexical analyse to various files types in OS Analyse command

LOG:   Changed Sparse to use and return Spans instead of Ranges to
       indicate index and sub-index ranges.  Sparse now works again
       and properly.
   
LOG:   Got rid of all 'virtual' in Array, UArray, and Sparse.  Reduces
       sizeof(Array), etc to 8 bytes instead of 12 (the vtable wasn't
       needed).

TIME:  2011-10-12 09:00-13:00 Various other things...

LOG:   Cleaned up UArray, Array, Bytes, Ints, etc. and got rid of all
       SetSize methods and added a Allocate method.

       Adjusted Alloc.Normalise to return normalised Alloc instead of
       messing up the "original".

LOG:   Got Bytes.Allocate behaving quite sanely with fixed and limited
       sized Allocs passed to Allocate method.
       
TIME:  2011-10-13 08:00-12:00 Various

FIXED: 'befe +tests lex' VarTerm test doesn't work.
       *** It's associated with the recent change of semantics to the
       *** Range Class.  Most probably because now we don't ever have
       *** a Length of zero.  Suspect we need to change VarTerm to use
       *** Spans instead, that would be the "proper" way to fix this
       *** one.  Oh well, on with it...
       Was quiet simple, really.  So, VarTerm works correctly now.
       
LOG:   Removed 'using namespace BEF_NS' from primitives.h

TIME:  2011-10-13 13:00-17:00 Various

LOG:   Various related fixes...

         o Added Strings.CountAndSplit(...Spans...)
         o Added Strings.SplitToSpans(...)
         o Added Slices, Spans, and USpans to BEFE.h
         o Got rid of Slice.h, Alloc.h, Range.h, and URange.h from BEFE.h
         o Changed UTF8Fold.cpp to use Spans instead of Ranges internally
         o Finished rationalisation of Array-like methods in FileInfos.h

LOG:   Implemented String.Get(Span) methods and optimised the Range and
       Slice Get methods

LOG:   Had to add Win32ConsoleControlHandler to Win32Console when
       CTRL-C pressed because, evidently, the default behaviour does
       something weird and GPFs, don't know if it's MinGW or Windows.
       
       Oh well!!!!

LOG:   Fixed small bugette when reversing bytes --
       "Always make the string mutable if you're going to mutate it!!!"       
              
LOG:   Added a few more NaN enums

LOG:   Added a few more ToHextString function implementations

LOG:   Sorted out an ambiguous ToHexString call because of new
       ToHexString functions
       
FIXED: String BuildFrom wasn't copying mult properly

TIME:  2011-10-14 08:00-14:00 Various

LOG:   New blog on "The Surrogate Pair Pandemic"

TIME:  2011-10-15 09:00-16:00 Filling out Scalar Arrays

LOG:   Massive rewrite of Arrays of Scalars, and implemented
       Longs and Shorts

DONE:  Write the following classes to fill out the picture...
         USpan, USpans, Longs, ULongs, Shorts, UShorts, Booleans
       *** Not going to do Booleans until we decide about UBoolean,
       *** SBoolean, and UBoolean, and what's the difference between
       *** that and Bits????

TIME:  2011-10-15 21:00-00:00 String.IsConsumable in String.Build

LOG:   Can't quite figure out if we need to check isConsumable in
       String.Build.  Left commented code in String.Build(String) for
       that case.
       *** We'll just keep an eye on this
       
LOG:   Renamed Number class to Integer in preparation of importing old
       Number class from 2002 XML work

LOG:   Got 2002 Number class plugged into BEFE in the style neede by
       a proper BEFE Class.
       
TIME:  2011-10-16 09:00-13:00 Getting 2002 Number code working

LOG:   Got Number (Oracle Number) working in BEFE.  Needs thorough
       testing and addition of methods like Add, Subtract, Multiply,
       Divide, Remainder, etc.

TIME:  2011-10-16 16:00-18:30 Getting Number code working

LOG:   Finished with Number class for the moment.  Put test into
       TestNumber.testNumber().       
       
DONE:  Implement Number using Number from 2002's XML code.  For now,
       force it do be an integer, maybe.
       *** Nope, didn't stick with the "force to be an integer"
       *** idea, kept it as it was
       
TIME:  2011-10-17 05:30-08:30 Various

LOG:   Added more constructors to Number Class

LOG:   Added missing comparison operators to String

LOG:   Fixed various String bugs and tidied up test output

TIME:  2011-10-17 10:30-17:30 Oracle

LOG:   Spent ages installing Oracle 11 and trying to figure out how
       to get a GNU compatible OCI and OCCI library.  No luck so far.

TIME:  2011-10-17 20:00-00:00 Oracle

LOG:   Thanks to Dirck, I got intitial calls to OCI working enough to
       start debugging a full init, logon, logoff, and finish.
       *** Hurrah!!!
       
TIME:  2011-10-18 09:00-18:00 Oracle and other stuff

LOG:   Uninstalled Oracle and reinstalled it with "Database Server"
       option instead of "Laptop".
       *** This solved my earlier complete failure in OCI to connect
       *** to "befe/befe@befe".  Hurrah!  Evidently the "Laptop"
       *** configuration doesn't to TNSNAMES properly, although it 
       *** goes through the motions.  And, I couldn't find any obviuos
       *** way to tell the OCI that there was no "dbname" when calling
       *** OCILogon().  Surely, there's a way.  Maybe I'll ask Karl?

DONE:  Get Stream using Span instead of Ranges for positioning ranges.
       *** This is because we've formalised Ranges in favour of
       *** letting them have negative "direction" as opposed to zero
       *** Length.  Since we'll never have zero Length with Ranges then
       *** they are not suitable for what they're used for in Stream.
       ***
       *** Changed this several places but left it in Stream because
       *** it made sense there.

LOG:   Got stubs for all the Remove flavours in Bytes and String
       *** Still needs going into Array and UArray

TIME:  2011-10-19 09:00-15:00 Various

LOG:   Saved trythis.cpp Oracle code in _trythis_10._cpp

LOG:   Several String Class modifications...

         o Changed all FindChar methods to Find
         o Moved all Find methods in StringFind.cpp
         o Added special case optimisation to Find methods
         o Put String.Find test into TestString tester  
         
       And Fixed Slice.Resolve for negative steps
  
TIME:  2011-10-20 09:00-18:00 Various

LOG:   Several small unrelated things...
         a) Tidied up UNaN versus NaN at various places
         b) Saved trythis.cpp String limited/unlimited Span test code

LOG:   Got Bytes Span/Range/Slice remove written and tested in trythis

LOG:   Bytes.Remove Span/Range/Slice all working and in Array tester.
       There was a slight snag when removing Slice("-1:17:2")...  To
       keep reverse semantics clear, had to add one to Min/Max of
       slice.idx1/idx2 to do proper thing.
       
DONE:  Implement Remove method with Slices, Spans, Ranges, USpans, and
       URanges in all Array types AND String (like Ints, Bytes, Array,
       UArray, etc.)

LOG:   Added Sequence Cycle class as an initial stab at it.
       *** Not completed or tested yet.
       *** Needs a bit of playing with first

TIME:  2011-10-21 07:00-15:00 Various

LOG:   Finished Cycle class and put full test in TestSequence.
       *** It all works just fine!!!
       
LOG:   Worked a bit on learning OpenOffice enough to make reasonable
       presentations.  Started on VisualTricks.odp

LOG:   Upgraded to TortoiseSVN 1.7 and it seems to work fine.

LOG:   Added Int versus UInt methods for most Bytes methods that are
       passed an Index.  We need to define the IndexType enum in
       Sequence.h, add a GetIndexType and SetIndexType to Bytes, and
       implement the different types (Ring, Stack, Queue, et cetera)
       in the Bytes Class.
       
       *** Once finished, we should be able to get rid of the recently
       *** created Cycle class

TIME:  2011-10-22 08:00-16:00 Various

DONE:  Remove SVN $Revision$ from Process.cpp and move it into BEFE.h
       for easier management at build times.
       
LOG:   Added new Int versus UInt methods to Bytes.
       *** Still need to implement different IndexType indexes though.       

LOG:   Added Sequence.IndexType enum to Sequence.h

LOG:   Implemented Bytes.ResolveIndex and changed all Int index methods
       to resolve through that method.
       
LOG:   Added curPos to Bytes Class and implemented GetPosition and
       SetPosition.  Ready to write tester.

DONE:  Change TestSequence to use common function for Range, URange,
       Span, and USpan.
       *** DONE because not really needed because different
       *** specification syntax

DONE:  Seriously consider rearranging Bytes, etc. to separate indexing
       mechanisms from underlying implementations.  So, perhaps, we'll
       put a flag indicating indexing like...
       
         o Unsigned ("Raw")
         o LengthWrap (-1 means "from end")
         o Ring (as currently in Cycle class)
         o Stack (LIFO, 0 = Tos which doesn't exist, 1 = tos-1, etc.)
         o Queue (FIFO, 0 = First In, Length-1 = Last In)
         o et cetera
     
       *** Did all that but take a look at Bytes.h, Bytes.cpp and
       *** Sequence.h to see what was done
       
TIME:  2011-10-23 09:00-18:30 Various

LOG:   Fixed bug in VarTerm.GenerateStrings, was incrementing fragments
       in WRONG order! (see next DONE)

DONE:  VarTerm doesn't quite implement the following case correctly...

         "[[abc]d[efg]]TOP[[h[i]]]"
         
       For some reason, it generates "abcTOP" in there.  It shouldn't
       because it's clear that 'abc' is only optional if 'd' is 
       present!!!!

       *** Maybe we need to only loop on depth and produce all the
       *** optional combinations across the Frags instead of for
       *** each treating Frags as "digits"???

LOG:   Various things...

         o Added Strings.Contains method.
         o Changed VarTerm.Generate to only append string if it wasn't already in list.
         o Added String.Consumable calls at various places.

LOG:   Renamed Number Class to OraNumber class in preparation for
       "proper" Number Class.
       
DONE:  Rename Number Class OraNumber, and redo it using an 8 byte structure
       with a Type flag.  Keep the number always zero or positive integer,
       keep a sign bit, and use bytes 1..7 to contain "shorter" numbers.
       Then, if they need more than 7 bytes, change to to Buffer, and use
       the last 4 bytes as a Buffer instance.
       
LOG:   Initial stab at "proper" Number Class, starting from OraNumber
       *** Need to write ToString and Add, Subtract, Multiply, and
       *** Divide methods as well.

LOG:   Number Class methods FromString and ToString starting to work.
       *** Need to test exponent and proper decimal point placing

TIME:  2011-10-24 08:00-18:00 Number

LOG:   Number class handling decimal point correctly now. 
       Now, for testing exponents...
       
LOG:   Number class starting to work pretty well.
       *** Next, Compare and arithmetic.
       
LOG:   Added Number.Exponent method and tidied up TestNumber.testNumber
       output to display labelled columns.

LOG:   Wrote Number.Compare. Now to write tester and test it...

LOG:   Fixed bug in String.Append when appending to ASCII1..ASCII4 type

LOG:   Number.Compare tests and seems to work

LOG:   Number.ExponentSpan method written and working
      
LOG:   Fixed Number.FromString bug with ".00123456"...  Wasn't trimming
       leading zeros and adjusting exponent properly
       
TIME:  2011-10-25 07:00-12:00 Number

LOG:   Crc32.Update(Byte *, Int) was resetting Crc and it shouldn't do!

LOG:   Wrote and tested Number.Hash

LOG:   Wrote and tested Number.ToExpString

DONE:  Write Number.Compare and get it working and tested
       *** While we're at it, write Number.Hash as well
       *** While we're at it, write Number.ToExpString as well
       
DONE:  Figure out why the following in Number.ToDebug didn't compile...
       *** There's something incredibly basic I don't understand here!!
       
         ...out.Append(String("Exponent: ") + ToString((UInt)exp))...
         
       *** !!!!!
       *** It wasn't "something incredibly basic", it was something
       *** "incredibly silly"...  OraNumber had a ToString method
       *** itself so it got confused on the namespace!!!  Hee hee!!!
       *** !!!!!

LOG:   Added the following methods to Number...
         o Consumable
         o NotConsumable
         o IsConsumable
         o operator ==       

TIME:  2011-10-25 14:00-18:00 Number and Numbers

LOG:   Fixed bug in String.MidEllipsis.  It wasn't getting Slice from
       the right place when it had to do the ellipsis.

DONE:  Write Numbers class -- almost exactly like Strings class.

TIME:  2011-10-26 07:00-11:00 ArrayOf<T>

TIME:  2011-10-26 12:30-17:00 ArrayOf<T>

LOG:   Wrote ArrayOf<T> implementation and got rid of Ints, Shorts,
       etc.  Now, to debug it...
       
TIME:  2011-10-27 09:00-21:30 ArrayPrimitive<T> and ArrayValue<T>

LOG:   Array template starting to work, at least enough to prompt now!
       There's still some wrinkles to iron out though.
       
LOG:   Got that strange compile problem in Win32Console sorted out so
       renamed ArrayOf<T> back to Array<T>

LOG:   Array<T> seems to work completely.  Now, for ArrayDynamic<T>
       or whatever we end up calling it.  We'll use this one for the
       Strings, Numbers, FileInfos and other non-static length
       implementations.
       
DONE:  See if it makes sense to make ArrayVar and ArrayFix template
       classes.  Can try by making Strings and Numbers a type of
       ArrayVar.
       
       If this works out and doesn't get in the way for Debugging
       purposes, we can change Bytes, Ints, etc. into ArrayFix
       classes instead of keeping separate code for each of them.

LOG:   Renamed Array<T> to ArrayPrimitive<T>, and wrote the 
       ArrayValue<V> template for BEFE lifecycle values like Strings.

TIME:  2011-10-28 07:30-13:00 ArrayValue<String> debugging

LOG:   Strings implemented as ArrayValue<String> almost works.
       VarTerm seems to be causing some bad problems though. ;-(
       
LOG:   Encapsulated Alloc members because incElms and decElms don't
       cast properly to UInts if they're 0x7fff.  So, changed it and
       called the wrappers everywhere it was used.
       
TIME:  2011-10-28 16:30-22:00 ArrayValue<String> debugging

LOG:   ArrayValue<V> template all working now.  Still, a couple of
       outstanding unfreed memory allocations.
       
DONE:  Get ArrayValue<V> implemented and implement Strings, Numbers,
       FileInfos et cetera this way.  This is the case where there's
       members in a Class that don't have a static implementation
       length and we want an Array of them.
       
DONE:  Figure out why "befe t" gets error in CommandShell.PushInputFile
       *** Hadn't converted CommandShell to use ArrayValue<FileStream>
       *** for inputfiles member

LOG:   Added missing call to ArrayBase.ShutDown in ArrayValue<V>.ShutDown
       *** Did this while searching for missing memory frees.  But, the
       *** problem goes a little deeper than that, so defered the
       *** real "tidy solution" to the next release (see DEFER below
       *** until it's marked as DONE)

DONE:  Figure out how to remove calls to gcc's silly exception stuff
       _Unwind_SjLj_Unregister and _Unwind_SjLj_Register when it's
       down in our code that is NOT going to throw exceptions!!!!
       *** It was '-fno-exceptions' in compile options

TIME:  2011-10-29 05:00-13:00 ArrayValue<String> debugging
       
LOG:   Found and fixed final remaining un-freed memory allocations
       caused by ArrayPrimitive<T> and ArrayValue<T>.  Hurrah!

LOG:   Renamed Sparse Class to SparseBase class in preparation for
       SparsePrimitive<T> and SparseValue<V> templates.
       
LOG:   SparseValue<T> works except for a couple of bugs.  Fails in both
       tests utf8 and array.
       
TIME:  2011-10-29 15:00-18:00 ArrayValue<String> debugging

LOG:   SparseValue<T> works except for a couple of bugs.
       
LOG:   Cleaned UTF Folding to use proper SparseUInt arrays instead of
       generic Sparse.
       
LOG:   SparsePrimitive<T> working now.  Next, SparseValue<V>...

LOG:   Various fixes regarding normalising Alloc based on elmSize in
       places that were coded wrongly during the switchover to
       templates.

TIME:  2011-10-30 07:00-12:00 SparseValue<V>...

LOG:   Finally got UTF8 folding/unfolding and SparsePrimitive<T>
       working for SparseChars et cetera       

LOG:   Almost got SparseValue<V> template written

TIME:  2011-10-30 14:00-17:00 SparseValue<V>...

LOG:   SparseValue<V> pretty much working now
       
DONE:  Get SparsePrimitive<T> and SparseValue<V> templates working and
       their various common flavours like SparseUInts, et cetera
       defined and working.

LOG:   Fixed a couple of glitches in SparseBase...
         o Problem caused when changing elementSize to elmSize
         o Problem in ResolveInsert
         o Problem in ResolveGet

TIME:  2011-10-31 06:00-11:00 ArrayValue<> and SparseValue<V>...

LOG:   Got ArrayValue<V> and SparseValue<V> MoveFrom/CopyFrom written.
       *** Now, for testing...

LOG:   ArrayValue<V> and SparseValue<V>  MoveFrom/CopyFrom tested and
       all working!!!
       
DONE:  Get SparseStrings tester written and working from trythis.cpp
DONE:  Get ArrayValue<V> and SparseValue<V> CopyFrom methods working.

LOG:   Changed UTF8::LoadFolding to search for file 'CaseFolding.txt'
       instead of using BEFE_TestData environment variable.

DONE:  Make sure out MoveFrom, Consumable(), etc aren't replaced by
       C++11's && and Move Constructors!!!
       *** They're not...  C++ Move Constructors and && are compile
       *** time and not run time.  They seem to be used mostly for
       *** C++'s horrid templates.  Still, they might come in handy
       *** at some time, just like '&' comes in handy for coding brevity.

TIME:  2011-11-01 09:00-14:00 MapBase and related templates

LOG:   Put MapBase hooks into SparseBase and implemented SparseBase._MoveFrom

LOG:   MapBase skeleton in place

LOG:   MapBase code completed.  Now, for the templates...

TIME:  2011-11-01 15:00-19:30 MapBase and related templates

LOG:   IntMapPrimitive<T> template working

LOG:   IntMapPrimitive<T> and IntMapValue<V> Templates written and
       working in trythis.cpp

TIME:  2011-11-02 07:00-16:00 MapBase and related templates

LOG:   Added TestArray.testIntMap to testers
       
LOG:   Fixed glitch in SparsePrimitive<T>.Remove and SparseValue<V>.Remove

LOG:   StringMapPrimitive<T> declared and skeleton partially working

LOG:   StringMapPrimitive<T> written, tested, and works.  Hurrah!!!
       *** Now for StringMapValue<V>...
       
DONE:  Normalise SparseBase _PhyInsert/_PhyRemove with Append/Remove
       *** Didn't really need resolving.

TIME:  2011-11-02 18:00-20:00 MapBase and related templates

LOG:   StringMapPrimitive<T> and StringMapValue<V> both written,
       tested, and working.  Hurrah!!!
       
DONE:  Get Map base class working, and then StringMap, IntMap,
       StringMap<V>, IntMap<V> and all the other variants working.

TIME:  2011-11-03 08:00-14:30 MapBase and related templates

LOG:   Map template copy constructors and operator= seem to work properly now

DONE:  Get StringMapPrimitive<T>, StringMapValue<V>, and IntMapValue<V>
       template CopyFrom working properly.

TIME:  2011-11-04 08:00-16:30 Various

DONE:  Add Insensitive Method into StringMap templates.
       *** While there, make sure it is only specified when empty and
       *** mixing String key types clears/sets the key's isInsensitive
       *** flag reflecting the Map setting.

DONE:  Write, implement, and test MapBase.Keys

DONE:  Add Reverse to Array

DONE:  Deprecate UArray.
       *** Need to get VarTerm and MemoryStats using proper Array
       *** templates now.
       
DONE:  Find missing memory frees on 'befe +ms +vv +tests all'.
       *** Didn't seem to show up until we got rid of UArray so it's
       *** probably related to either MemoryStats or VarTerm
       ***
       *** Hmmm...  Maybe it has to do with recursion in LogMemoryAlloc
       ***          and LogMemoryFree?
       ***
       *** Nope, it was because ArrayValue<V>.CopyFrom wasn't shutting
       *** down the current contents when it called the low level
       *** MoveFrom.  So, it wasn't releasing it's values first.
       
DONE:  Get Console.PutBytes testing if last character is '\n' so
       that GetCursor() can be called to check if in column 0 even if
       redirected to a file.
       ***  o Added lastByteOutput member for last physical byte output
       ***  o Change Console.GetCursor to set cursor.x=0 if output redirected
       ***      and last byte was '\n'
       ***  o Changed MemoryStats.LogMemoryAlloc and LogMemoryFree to
       ***      just look at cursor.x instead of checking for 
       ***      OutputIsRedirected itself.   
       
DONE:  Write Detailed MemoryStats code which keeps track of counts for
       each distinct non-rounded size in bytes.
       *** Turn it on/off with new option +mas and -mas

TIME:  2011-11-04 18:30-22:00 Various

DONE:  Write AllocFixed, and AllocOpen as subclasses of Alloc, then
       get rid of the old Globals.AllocDefaultOpen.
       *** Got rid of gAllocDefaultOpen switch and associated code.
       *** It's not needed and is dangererous option because it makes
       *** code's behaviour determined by the switch NOT by what the
       *** code really does.

DONE:  Get user extended (and FileInfos) UArray and Array working again
       with virtual methods.
       *** Isn't needed any more.  ArrayPrimitive<T> and ArrayValue<T>
       *** templates now working and that's the way to do it properly.       

LOG:   This release v debug GPF is a doozy.  Spent ages on it so far...

TIME:  2011-11-05 03:00-05:00 Various

LOG:   Various fixes, but mostly cosmetic.  Important ones are...
         o Console.PutBytes wasn't returning numwritten properly
         o intcrc32 wasn't calculating CRC of a 32-bit value properly
           *** This one was a real bugger to find because it was reading
           *** from weird places in memory, but only in Release build!!!

DONE:  Figure out why release build has different allocations than
       the debug build has.
       *** And, why 'befe +ms +vv +tests all >t.txt' fails on release
       *** but not debug.
       ***
       *** Whew!  See LOG above!!!

TIME:  2011-11-05 08:00-12:00 Various

LOG:   Fixed Win32Console.PutBytes to return correct number of bytes
       written.  WriteFile is documented wrong when it's output to a
       console buffer...  Evidently, it treats UTF-8 as one "byte" in
       the return "numwritten" value even though it's documented as
       "number of bytes".  Bloody Microsoft bastards!!!       
       
LOG:   Change StringType Empty to StringType Null in preparation for
       the upcoming ASCII0 StringType.
       
DONE:  Add ASCII0 to String buffer type and implement it.  This is to
       make a differentiation between Null and an empty String.
       *** Not sure whether it should default to Null or ASCII0 though.
       *** Probably ASCII0 because Null should be explicitly set from
       *** things like Json because it's not a natural concept and
       *** Null breaks comparison rules and other operations.
       *** That goes against Oracle's way of thinking but screw them
       *** because, I guess, they couldn't figure out a proper way
       *** around it!  ;-)

DONE:  Get UTF and IdSpace using SparseUInts et cetera
       *** Actually, UTF was already converted.
       *** We'll DEFER IdSpace for later when we start creating a
       *** proper Repository model and implementation
       
TIME:  2011-11-05 14:00-18:00 Getting my head around Ubuntu

TIME:  2011-11-06 06:30-09:30 Finishing off outstanding String Methods

LOG:   Messed about with String method naming so, once released, it's
       "official" which methods are supported and which ones are 
       implementation specific and may become deprecated so they 
       shouldn't be used by the external developer.
       
TIME:  2011-11-06 16:00-20:00 Finishing off outstanding String Methods

LOG:   Added String._LogToPhySpan method and tester for it

LOG:   More tweeks on String._LogToPhySpan, but still have outstanding
       problems with 'befe +vv +tests string'...
       String._LogToPhySpan...
       ***   String = '012◄─►cdef'
       ***   Length = 10 Chars
       ***   Size   = 16 Bytes
       ***   String 17: Span -1:2   -> 15:3   Length = 12 Bytes
       ***   String 18: Span 2:-1   -> 2:15   Length = 13 Bytes
       The String 17 case is wrong, I think it should be 13 Bytes 
       just like String 18.

TODO:  Fixed above, get testLogToPhySpan working on two source strings
       and displaying the result Get(Span const &) on each Span.
       
TIME:  2011-11-06 08:00-17:00 Finishing off outstanding String Methods

LOG:   Almost got String._LogToPhySpan working in Bytes and UTF-8
       *** Outstanding case, UTF-8 '-1:-11' has length UNaN
       
LOG:   Fixed Int versus UInt bug in Span.Resolve

LOG:   String.LogToPhySpan completely working now, ready to write
       String.Remove variants

LOG:   String.LogToPhyRange almost working

DONE:  Finish String.LogToPhySpan and String.LogToPhyRange
       
LOG:   String.Remove(Range const &) written.  Now to write the tester...
       
TIME:  2011-11-06 20:00-22:00 Finishing off outstanding String Methods

LOG:   String.Remove(Range const &) tested and working.
 
TIME:  2011-11-08 06:00-13:30 Finishing off outstanding String Methods

LOG:   String.Insert methods written, now to write the tester...

LOG:   String.Insert(Int,Char) written, tested, and working

TIME:  2011-11-08 14:00-17:30 Finishing off outstanding String Methods

LOG:   String.Insert(Int,Char) and String.Insert(Int,String) all working now

TIME:  2011-11-09 10:00-18:00 More String Methods

LOG:   Added IsResolved, IsAscending, IsDescending, and Reverse to Span
       and Range.

LOG:   Write String.Remove methods, now for testing...

LOG:   Fixed tiny bug in String.Find(Char, Span const &, Int) using new
       Span.IsAscending method

LOG:   Added skeletal String.Replace methods

LOG:   String.Replace(Int...) written, tested, and working
LOG:   String.Replace(Range...) written, tested, and working
LOG:   Almost got String.Replace(Span) working.  Still a couple of GPFs
       in testReplaceSpan

DONE:  Get String.Remove Index/Span/Range/Slice declared, written and working
       *** And, while we're at it, implement String.Insert and
       *** String.Replace with Span/Range with single Char and whole
       *** String passed
       ***
       *** Note: We didn't implement String.Remove/Insert/Replace(Slice)
       ***       methods since we're not convinced this is a really
       ***       pressing requirement instead of using Span.
       ***       For example, how often do you need to replace every
       ***       2nd character in a string, let alone backwards???!!!

TIME:  2011-11-10 03:00-06:00 More String Methods

TODO:  Implement String.Find(Range,char) and related Range search
       methods.  For some reason I seem to have missed these!!!
       
TIME:  2011-11-10 10:00-15:00 More String Methods

LOG:   Wrote skeletal String.Find(String...) methods

TIME:  2011-11-10 17:00-20:00 More String Methods

LOG:   Sensitive insensitive String.Find(String) all tested and working.

TODO:  Get String Find and on String working.  

LOG:   Write missing Stream.operator<<(Char)

LOG:   Put Sensitive/Insensitive tests in for String.Find(char).
       Now to write the code...

DONE:  Get case of Insensitive compare handled in String.Find(Char)

TIME:  2011-11-11 08:00-13:00 More String work

LOG:   Some minor adjustments including...
         o Moving StringSpace.h and StringSpace.cpp from string to id directories
         o Finishing off SBuffer "not implemented" functions -- need testing though
         o A few comment changes/additions       

LOG:   Took a while setting up the following web presences for BEFE...
         o befe@bferris.co.uk
         o BEFE-Software-Library.blogspot.com
         o @BEFESoftware on Twitter

TIME:  2011-11-11 14:00-19:00 More String work

LOG:   Had a frustrating time trying to figure out this next one...

DONE:  Figure out why 'befe +vv +tests +mas +ms +maf all >t.txt'
       as -1 "Difference" (eg one more free than alloc) but if you
       opts +vv, and os analyse t.txt there aren't any mismatches.
       Hmmm...
       *** The hint might be...
       ***
       *** ...  Total Bytes Allocated:   6003744
       *** ...    Total Bytes Removed:    12112718
       *** ...                            --------
       *** ...    Difference:             -6108974
       ***
       *** Plus, we don't get it if we do '+v' instead of '+vv'
       *** May have to do with recent String methods

       *** Seems to have gone away now, weird!!!
       *** We'll keep an eye on it, may REDO this one
       
       *** Nope, it's back.  It has to do with with Win32.NewFile first
       *** allocation not getting freed.  Some weird case where
       *** FileStream's file.deferto is getting cleared or something
       *** instead of being properly freed
       
       *** Jesus Christ!!!!  That was a hard one...
       *** CommandShell.PushInputFile had some old-style (before we
       *** implemented ArrayValue<V>) way of keeping track of open
       *** FileStreams as it processed.  So, it lost one memory
       *** allocation!
       ***
       *** Had a quick grep to see if other cases of this exist and,
       *** except possibly the IdSpace and StringSpace code, there
       *** doesn't seem to be any other old-style offenders left.
       ***
       *** Whew!!!!

TIME:  2011-11-12 09:00-15:30 More String work

LOG:   Added AMShifts.txt to start describing our AM Shift instructions

LOG:   Cleaning up StringSplit.cpp variable names, et cetera before
       writing the remaining methods.
       
TIME:  2011-11-12 20:00-00:00 More String work plus Grey Papering

TIME:  2011-11-13 09:00-15:30 More String work

DONE:  Write String.Split on String
       *** This should clean out all "not implemented" stuff in String
       *** and make it much more "industrial strength".

LOG:   All String.Split methods written and starting to work, now for
       some really solid testing...

TIME:  2011-11-13 16:00-19:30 More String work

LOG:   String.Split all working okay now except for some cases of
       Sensitive/Insensitive.  Now to get them all using a single
       private method...
       *** Want to do this so that all the logic is in one place, and
       *** Sensitive/Insensitive works properly in ALL CASES!!!

LOG:   Prepared for Strings._LowCountAndSplit method that does it all

TIME:  2011-11-14 06:00-11:00 Finishing up String.Split

LOG:   String._LowCountAndSplit all written and integrated and pretty
       much working.
       
TIME:  2011-11-14 13:00-16:00 Finishing up String.Split

LOG:   String._LowCountAndSplit all working with full tests.  Now, to
       write the gargantuan tester...

LOG:   Forgot to write UTF8.Fold/Unfold default behaviour of
       a..z => A..Z => a..z if no UTF8 folding file has been loaded.
       *** Whoops!!!!       
       
LOG:   Implemented String.Split tester.  Doesn't test everything but
       tests enough for now -- Like, it caught that UTF8 problem above!
       
TIME:  2011-11-14 18:00-20:00 Fixing missing memory loss

DONE:  Fix outstanding unfreed memory on 'befe +vv +mas +tests all'
       *** Has 43 unfreed blocks at time of writing
       ***
       *** ArrayValue<V> wasn't overriding SetLength, so memory wasn't
       *** getting freed properly when SetLength was called on it
       
DONE:  See what few things Java Strings can do but we can't.
       *** Doesn't seem to have anything we don't that I can see
       
TIME:  2011-11-15 06:00-08:00 IsNull/IsNaN and other things...

LOG:   Rejigged primitives.h and took out all the NaN declarations and
       placed them in Null.h while adding IsNull() and IsNaN()
       functions for general use and code readability.
       
LOG:   Implemented IsNull and SetNull switchover in array source.
       It's a bit time consuming but, once you get used to it then the
       reading and writing of the code is less tedious than having to
       pay attention to sign when using NaN.

TIME:  2011-11-15 10:00-16:00 Strings.Join and String.Join

DONE:  Add Strings.Join(String &) and String.Join(Strings &)
    
LOG:   Not only did we add Join to Strings and String, but we added
       Split/Join to Char as well, just for ease of coding.
 
LOG:   Fixed small glitch in ArrayBase class caused during recent
       IsNull/SetNull conversion 
       
LOG:   Got Split/Join everywhere we think it needs to be, and it works!!!

TIME:  2011-11-16 10:30-??:?? Turning NaN/UNaN checks into IsNull/IsNaN

LOG:   Changed all 'if' statements to use IsNull/IsNaN instead of using
       '== UNaN', '!= NaN', et cetera
       
DONE:  Write IsNull()/IsEmpty() and SetNull()/SetEmpty() for
       each of the following...
         √ ArrayBase
         √ SparseBase
         √ Map
         √ Strings
         √ Bytes
         √ String
         o ...
       Write IsNull(<v>) in Null.h/Null.cpp
       *** This is to get get a cohesive declaration of how we treat
       *** Null throughout BEFE
       ***
       *** Note: IsNull(Int), IsNull(UInt), etc. will check against
       ***       appropriate NaN, UNan, etc.
       ***
       ***       And, while we're at it...  Find and replace all
       ***       '...== UNaN' et cetera with IsNull(<v>)
       ***
       *** May want to consider template Boolean IsNaN(<V>) to call
       *** inline IsNull(<V>)
       
DONE:  Changed my mind...  Change all IsEmpty to _IsNull and record it
       as "to resolve BEFE Global Function" name ambiguity instead of
       "stay away from this" as are other "_" methods.
       
TIME:  2011-11-17 06:00-08:00 Null Tester

LOG:   Null Tester written and working and found a few bugs having to
       do with SByte et cetera, which I fixed.

TIME:  2011-11-17 06:00-08:00 Various Contains methods

LOG:   Fixed Time.GetDayOfWeek bug... it was off by a few days and did
       not handle dates before Jan 1, 2000.

TIME:  2011-11-17 10:00-18:00 Various Contains methods

DONE:  Write the following Array/Sparse/Map methods...
         o Array.Contains(<V>)
         o Sparse.HasIndex(UInt)
         o Sparse.Contains(<V>)
         o Map.HasKey(<K>)
         o Map.Contains(<V>) (and equivalent Map.HasValue(<V>)
         o String.Contains(String const &) (and char or Char)

TIME:  2011-11-17 21:00-01:00 Preparing for ArraySort

LOG:   Got Contains loop code out of Array templates and use a generic
       CompareFunc comparison function pointer instead.
       *** This is GOOD because it now "hides" the inner workings from
       *** the published header AND it prepares us for an Array.Sort method.         
       
TIME:  2011-11-18 09:00-14:00 ArraySort

LOG:   Array.Sort works.  Need to make Strings.MakeSensitive and
       Strings.MakeInsensitive though.

LOG:   Decided to do Strings MakeSensitive/MakeInsensitive instead of
       various sorts.  Also, added Strings.Sort test to TestArray.

DONE:  Write Strings.Sort, Strings.SortInsensitive, and Strings.SortSensitive

TIME:  2011-11-18 15:00-18:30 Header Tidyup

LOG:   Various tidy up including...
         o Renamed "primitives.h" to "Primitives.h"
         o Renamed "globals.h" to "Globals.h"
         o Renamed globals.cpp to Globals.cpp
         o Put headers in all .h files
         o Adjusted all .h files to include proper header casing

TIME:  2011-11-18 20:30-23:00 More Tidyup

LOG:   Tidied up Integer.h/Integer.cpp to reflect proper BEFE Value Lifecycle

LOG:   Added Float/Double to Primitives.h and Floats/Doubles to Array.h

TIME:  2011-11-19 03:00-06:00 Process.GetEnvironmentValues

LOG:   Fixed Bugette in String.CompareEqualsInsensitive

DONE:  Put environmentVariables member into OperatingSystem generically...
       *** Note: Need to, maybe, have a default "immutable" in this so
       ***       the developer has to explicitly call Mutable() to
       ***       identify the intent that they want to modify the
       ***       existing OS Environment variables.  Maybe we'll do this
       ***       instead by having a "Restore" or some option to re-get
       ***       them again from the OS.  Haven't decided yet
       ***
       *** Note: Ended up putting it in Process.GetEnvironmentValues
       ***       and made Win32Process make it an Insensitive Map

LOG:   Put TheProcess->GetEnvironmentValues into TestArray.testNamedStrings
       
DONE:  Figure out why Map.h/MapBase.cpp isn't freeing all allocations
       when NamedStrings populated.
       *** MapBase._ResetKeys was calling String.StartUp instea of String.Reset
       
TIME:  2011-11-19 08:00-10:30 Various

DONE:  Decide what goes into Primitives.cpp and what goes elsewhere
       *** Remove Primitives.cpp completely
       
TODO:  Tidy up headers in platform/Win32
       *** Tidied up .cpp files as well

TIME:  2011-11-19 12:00-18:00 Various

LOG:   Updated _testdata with ErrorMessages.txt and added proper
       BEFE headers to other deliverable .txt files.

LOG:   Renamed _testdata to _home

LOG:   Made Win32Process.GetEnvironmentValue case insensitive on name
       search.
       
LOG:   Fixed String.Count, it was returning 1 more than existed because
       Split splits to at least 1 part, eg "c:\xxx" splits to 2 parts.

LOG:   Made a minor fix to Win32Process to minimise memory allocations
       of Strings.
       *** Remember: When you do "a = String(...)" it's best to do this
       ***           instead "a = String(...).Consumable()" if possible
       ***           if adding it to something like an Array, Sparse,
       ***           or Map, or are going to return it.

LOG:   Started work in trythis.cpp on Error Message string reading
       and parsing.
       
TIME:  2011-11-20 06:00-08:30 Messages

LOG:   Added skeletal Message.h and rejigged some of the stuff that
       was piling up in trythis.cpp.
       *** It's interesting how little straightforward ideas snowball
       *** into much more generic and bigger stuff, isn't it?
       
TIME:  2011-11-21 00:00-03:30 Messages

LOG:   Worked on initial MessageToken, et cetera and have the basic
       structure of stuff in the message directory now.
       *** Had to add some BEFE Lifecycle stuff to Range/URange, etc.

TIME:  2011-11-21 09:00-14:00 Messages

LOG:   Got main skeleton for Message File parser and associated data
       types in place.  Now, to write the actual code.

TIME:  2011-11-22 15:00-20:00 Messages
       *** Short day because of ultrasound scan in morning
       
LOG:   Renamed Token Class to LexToken

LOG:   More work writing MessageToken code for message file loading.

LOG:   Message code starting to recognise MessageTokens

TIME:  2011-11-23 06:00-13:00 Messages
TIME:  2011-11-23 15:00-17:30 Messages

LOG:   Got first level Message Lexical Analysis almost working

LOG:   Got first level Message Lexical Analysis completely working, now
       for the second level...
       
LOG:   Several things...
         o Added Error::FileNotFound
         o Added _BufAlloc to SparseBase
         o Changed ArrayBase/SparseBase to have Clear() call _BufAlloc
         o Added LexTokens parameter back into MessageParseLine
       All this significantly reduced the number of memory allocations
       required to process ErrorMessages_msg.txt

TIME:  2011-11-24 13:00-16:30 Messages and other stuff

LOG:   Cleaned up several Win32OperatingSystem methods to handle mixed
       separators correctly.
       
LOG:   Added more BEFE Lifecycle methods to FileInfo.

LOG:   Also, got trythis.cpp function FindConfigurationFile working
       properly.       

NOTE:  Another short day because of Dentist and Smoking Cessation

LOG:   Added BEFEShell_hlp.txt file for future (shortly) external help text.
LOG:   Removed help strings in preparation for external help file.

TIME:  2011-11-25 06:00-12:00 Messages, globals, and other stuff

LOG:   Pretty much got rid of all the "Globals", now have to research
       and make sure we're all initialising properly, et cetera       
       
LOG:   Fixed all the problems with the Globals revamp except one...
       Seems to be freeing more than allocating.
       
TIME:  2011-11-25 14:00-18:30 Messages, globals, and other stuff

LOG:   CommandOS.AnalyseFile_Text had problem with definition of
       its SortTarget, it was declaring Length() etc. as const when
       SortTarget didn't.  So, it wasn't recognizing any BEFE alloc/free
       lines to look at.

LOG:   Got memory allocations logged and displayed correctly, finally!!!       
       *** Now, there's virtually "one global" (TheBefe) and it's up to
       *** the main program to allocate/instantiate it.
       
DONE:  Clean up the outstanding unfreed memory allocations
       *** This really needs some kind of MemoryStats snapshot when you
       *** turn it on and another when you turn it off.
       *** And maybe something more with +maf, -maf in order to really
       *** get the differences spotted correctly.
      
LOG:   Befe Class completely working no matter if you instantiate it
       as a static global or on the stack.

       In fact, if you don't instantiate it at all at least some of the
       code checks TheBefe and doesn't do anything if it's not there.
       
DONE:  Get 'new Befe()' and 'delete' working in main.cpp.
       *** It just GPFs at the moment
       *** Got 'new Befe()' and 'delete befe' working, the problem was
       *** with gProcessHeapHand check in Win32.cpp Malloc() function
       
DONE:  Figure out whether or not we want Befe.ShutDown to actually
       terminate the process. I guess it's a design philosophy question.
       *** Commented out the Exit in Befe.ShutDown because we figured
       *** that since the Befe instance didn't start the actual
       *** process then it had no right to presume and stop it.

TIME:  2011-11-26 06:00-08:00 Various

LOG:   Fixed a couple of bugs in FormatOut.DumpStringInfo

DONE:  Write Null console code in default Console behaviour, and get all
       FormatOut, etc. working okay with Null console.
       *** Made default Console behaviour check for NULL TheBefe and
       *** behave appropriately.
       *** Also, made Befe "Globals" Cout and Cin to default to a
       *** Console with deferTo cleared.  Then made Befe.StartUp
       *** populate them properly and Befe.ShutDown clear them.       

LOG:   Got rid of bogus "goto OK" and the "OK:" label where not needed.
       
TIME:  2011-11-26 10:00-12:30 Various

DONE:  Get rid of bogus label "DONE:" everywhere.

DONE:  Get rid of "BufferLow **" and change to "BufferLow *&"
       *** And check for any other double indirects and pointers
       *** that should be refs (like FormatOut.DumpStringInfo)

TIME:  2011-11-26 15:00-20:00 Back on Messages

LOG:   Added numErrors parameter to MessageLoadFile
LOG:   Added lineType parameter to MessageParseLine
LOG:   Pretty close on MessageLoadFile
       *** Note: When that's finished we have to do ErrorString with
       ***       it plugged into the Befe class
       
TIME:  2011-11-26 23:00-03:30 Back on Messages

LOG:   Almost got Message Ranges populated in MessageLoadFile

LOG:   MessageRanges working in MessageLoadFile except for Duplicates
       *** Need to fix the duplicates before continuing  ;-)
       *** Also a problem with too many frees in +ms, seems to have
       *** gone away though.  Hmmm...

LOG:   Tweeked String.MakeMutable to not turn into Buffer if isByte and
       will fit in ASCII0..ASCII4.  This save lots of memory allocs
       on short things.
       *** Did the same for single UTF-8 Char to UtfInline
       
LOG:   Message Ranges working in MessageLoad file now. Now, to get
       Messages themselves working...
       
LOG:   Added MessageRanges.Find(String const &) to find named Message
       Range in array.
       
TIME:  2011-11-27 07:00-12:00 More on Messages

LOG:   Rationalised MessageLoadFile parameters and Message Type
       declarations in preparation for finishing MessageLoadFile
       messages.
       
LOG:   *** Having big problems on a horrid ArrayValue<V> element being
       *** Consumable somehow.  ;-(
       
TIME:  2011-11-27 14:00-17:00 More on Messages

LOG:   *** Still fighting with ArrayValue<V> element being Consumable
       *** somehow.  Now it GPFs trying to allocate memory.  ;-(
       
LOG:   Got rid of all "...precise desc..." and made it "...detailed".
       *** Was anally sick of 'precise'.  ;-)
      
DONE:  Consider getting rid of all the 'Byte **' and 'BufferLow **'
       in all the code so we can publish, as a matter of "pride" that
       they're seldom needed these days.
       *** Find by: cd %code%
       ***          chcp 850
       ***          grep "\*\*" */*.h
       
TIME:  2011-11-27 18:00-00:00 More on Messages

LOG:   Hurrah!  Finally got that horrid bug and MessageLoadFile all
       working correctly.  Of course, the bug was silly.  Aren't they all?
       *** Now, to plug it into Befe and ErrorString...
      
LOG:   Moved Message testing code from trythis.cpp into TestMessage.cpp
       and got it plugged into the Unit Test Harness.
 
LOG:   Error Messages are now consistent and working with/without pre-loading them.
       
DONE:  Get ErrorString using Message String File from BEFE_Home

TIME:  2011-11-28 09:00-14:00 More on Messages

LOG:   A couple of tweeks...
         o Made Befe call UnloadErrorMessages on ShutDown
         o Added String.MakeImmutable
         o Changed CommandOS_AnalyseFile_txt to call String.MakeImmutable on contents
           so it could split the file contents

LOG:   Added +lem and -lem switches to LoadErrorMessages and
       UnloadErrorMessages on demand

LOG:   Error Messages all work fine now, no memory leaks, +lem/-lem and
       everything else seems ok. :-))
       
DONE:  Fix outstanding Memory Leaks if Error Messages loaded

TIME:  2011-11-28 14:00-18:00 SubstituteStrings

LOG:   Befe.ShutDown wasn't shutting down TheConsole properly -
         Console.ShutDown wasn't deferring, so it wasn't restoring
         Code Page, etc.

TIME:  2011-11-29 08:00-13:00 SubstituteStrings

LOG:   Substitute almost working except for UTF-8.  Plus...
         o Added IsMutable/MakeMutable/MakeImmutable to Sparse
         o Added IsMutable/MakeMutable/MakeImmutable to Map
         o Made Sparse._GetPhyAddress public with a warning
         o Added Error::AccessDenied to Error.h and error strings
         o Added IsMutable() check in all Sparse/Map code where applicable

TIME:  2011-11-29 15:00-20:30 SubstituteStrings

LOG:   String._FindStringLow wasn't finding properly if Span given

LOG:   MessageParseLine wasn't incrementing token count when appending
       error Token

LOG:   SubstituteStrings seems to be working now, both with UTF-8 and
       with multiple substitutions in the same string.
 
DONE:  Add general purpose utility to do String substitution given
       a StringMapString and substitution delimeters.  This makes sure
       there's not circular stuff by keeping a list of what it's already
       done.
       *** Most probably a method on String but should go in format
       *** directory somewhere.  Probably FormatString.h/cpp
       ***
       *** This will be the beginnings of a general purpose formatter
       *** based on strings.  Should have inputs being a Map, Sparse,
       *** and array of strings.  So %xxx%, or %12345%, or %1% will all
       *** be valid input.
       ***
       *** Should also be passed Start/End Strings for delimeters,
       *** for example... '%','%' or '$(',')' et cetera

DONE:  Take another pass over the headers and try, again, to get rid
       of any unnecessary #defines, just out of principle.
       *** Only about 4 or 5 left.  We'll hold off on those until the
       *** next release.

DONE:  Put whatever SetNull(<V>) in BEFE.h and notes after including
       "Null.h" stating that it declares the Primitive SetNull but
       BEFE.h has to do the Value ones.
       *** I figure we can get along without this for a while
       
DONE:  Get __GNUC__ and any __MINGW__ stuff plugged into some SVN
       info header/code and into the Platform class.
       *** Already pretty much accomplished.  All that needs doing
       *** is to double check that BYTE_ORDER stuff is plugged in
       *** correctly.
       ***
       *** Seems to be finished.  We'll leave it there for now.

DONE:  Decide proper name for Error::IndexOutOfRange and change all
       OUTOFBOUNDS to be called that proper name in uppercase.
       *** All this because we have a Range Class.  ;-)
       ***
       *** Decided to just rename OUTOFBOUNDS to OUTOFRANGE and ignore
       *** the fact that term <Range> is ambiguous, who cares, it still
       *** makes sense when you read the error message.  ;-)

TIME:  2011-11-30 06:00-15:30 Various

LOG:   Normalised String Substitution functions and where they sit...
         1) Renamed SubstituteStrings.cpp/.h to StringGeneral.cpp/.h
         2) Moved StringGeneral.cpp/.h from format into string
         3) Moved IsNull(String const &) from String.cpp to StringGeneral.cpp
         4) Added SetNull(String &) to StringGeneral.cpp
         
LOG:   Added various source files to SVN that I forgot to add earlier

LOG:   Prepared TestString.testGeneral and moved code from trythis.cpp
       into it.  Also, set up trythis to test SubstituteEscape next.
       
DONE:  Plug in current trythis.cpp code for Substitute() into 
       Test using new TestSubstitute Class.
       *** Actually, it all went into StringGeneral.cpp so the tests
       *** went into TestString.cpp instead
       
DONE:  Write good SubstituteStrings/SubstituteEscape tester

TIME:  2011-12-01 08:00-19:00 Various

LOG:   Escape(String const &...) works now, and tests just fine!
DONE:  Write Escape(String const &...) function

LOG:   Help seems to load and display correctly.  But, there's some
       outstanding memory allocation issues...

EYEON: *** These memory allocation issues seem to have gone away now.

DONE:  Get Help using BEFE_Helpxxx_hlp.txt from BEFE_Home for help

LOG:   Various memory leaks and misuse, including...
         o ArrayBase._BufAlloc was allocating MinElms*(elmSize*elmSize)
             instead of MinElms!!!
         o Changed MessageLoadFile to preallocate/post-allocate arrays
             based on rough guesses.  Helped a lot!!!
         o Changed UTF8.LoadFolding to preallocate/post-allocate arrays
             as well.  This helped a lot too!!!
         o Did the same Map pre-allocate when populating environment variables
         
LOG:   Changed ErrorString to call TheBefe->LoadErrorMessages if they
       weren't already loaded.  This let us get rid of the call in
       main.

LOG:   Added FirstNonBlank, LastNonBlank, FirstNonWhite, and LastNonWhite
       methods to String and changed Help to ignore comment lines
       (first non-blank is '#' or '//') in help text.       

TIME:  2011-12-02 08:00-16:00 64-bit OS and Primitive/Value Lifecycle

DONE:  Get Win32OperatingSystem reporting 64-bit Windows7 in ?os

DONE:  Get lifecycle stuff like StartUp(String const &), and all the
       varieties, into Lifecycle.h and implemented.  Basically, these
       are general dispatch methods that SHOULD be in each header
       (like String.h) but it makes more sense to have them all in
       one place for research/learning/understanding purposes.

TIME:  2011-12-03 09:00-15:00 Various

LOG:   Major fixes in LifeCycle 

LOG:   Added String.Escape and String.Unescape to String.h

LOG:   Fixed TestString.testGeneral to use String Escape/Unescape
       methods AND to output correct stuff if +vv
       
LOG:   Fixed Win32Process.GetEnvironmentValues problem caused by
       earlier Array pre-alloc optimisation
       
DONE:  Plug Escape, Unescape, and Substitute methods into String.

TIME:  2011-12-04 11:00-20:00 BEFE Type Model

LOG:   Started on BEFE-Wiki style BEFE Type Model declarations

LOG:   Created Empty.odp and DangerousSyntax.odp outline Presentations

LOG:   Created MouthOfTruth.ico from web photo, might be okay for
       BEFE Lexical files.  I'll think about it.
     
TIME:  2011-12-05 05:00-07:00 BEFE Type Model

LOG:   A couple of things...
         o Added detection of /*...*/ in MessageLex and reports an error now
         o Added message.Unescape into Befe.ErrorMessage
         
TIME:  2011-12-05 09:00-11:00 Working on Lexical Analysis

LOG:   Added special case of Python LongStringLiteral to LexToken

LOG:   More work on BEFE Type Model

TIME:  2011-12-06 06:00-10:00 Process Invocation

LOG:   Wrote and tested Win32Process.Invoke, was quite easy in fact!!!

TIME:  2011-12-06 15:00-17:00 Process Invocation

LOG:   Added LastErrorCode and LastErrorMessage methods to Process and
       Win32Process Classes

LOG:   Added Invoke(String const &cmd, String const &cmdDir) to Process
       and Win32Process.       

LOG:   Got Win32Process.Invoke waiting properly for the process (was
       waiting on the process ID not the Handle).

DONE:  Get Process.Invoke defined and implemented, with input and
       output working on files (especially temp files)

NOTE:  A bit of a hiatus here while I quit smoking.  Grrrr...

TIME:  2011-12-07 02:00-06:00 Process Invocation and Build

LOG:   Implemented skeletal Build Command

LOG:   For some odd reason, Win32OperatingSystem.GetFiles forgot to
       append the file name to the string, so CommandOS_ls showed
       a list of bad/empty file names.

LOG:   Got skeletal Build class C++/BEFE Lifecycles written

LOG:   Started on Build Lexical Analyser

LOG:   Initial BuildLex written and ready to try

TIME:  2011-12-07 09:00-14:30 BuildLex

LOG:   More on BuildLex.  Decided to make it Token based not Line
       based so we act a bit more sanely than with MessageLex as far
       as multi-line comments and Python long String literals go.

LOG:   Lines.Load was counting number of lines wrong

LOG:   Implemented StringSensitive, StringInsensitive, VarTermSensitive,
       and VarTermInsensitive LexToken types in LexToken

TIME:  2011-12-07 22:00-23:00 Build Class and BuildLex

LOG:   Initial, somewhat skeletal, version of Build.LoadFile written.
       *** It looks various places for the file so no need for full path

TIME:  2011-12-08 07:00-12:00 Build Class and BuildLex

LOG:   Fixed UTF-8 Count not checking for NULL buffer

LOG:   Moved LexTokens display code out of CommmandLex_AnalyseFile.cpp
       and into LexToken.cpp

LOG:   Fixed weird-ass bug in MemoryStats when displaying them.  It takes
       a copy of itself but that increases the +mas size counts, thereby
       getting its knickers into a little twist.  Changed it to display
       size statistics from "this" instead of "copy".       
       
LOG:   Changed BufferLow.CopyFrom to make note of when size changes on Copy.
       *** This is so it's easier to debug if/when this happens.

LOG:   Fixed bug in Buffer.CopyFrom, was passing wrong "that" to
       BufferLow.CopyFrom

LOG:   Fixed MapBase._CopyFrom...  Wasn't getting Length from right place

LOG:   Added Sort methods to Strings

LOG:   More work on Build

DONE:  Consider renaming ArrayBase._GetAddress to something along the
       lines of GetLiveAddress, GetTransientAddress, or possibly
       GetElementAddress.
       *** Already done...  it's ArrayBase._GetAddress

DONE:  Fix buggered UTF-8 in integer.cpp
       *** This wasn't a problem, I guess I had the encoding setting
       *** wrong in Notepad++.
       *** The problem would have been in integer.h anyway
       
TIME:  2011-12-09 08:30-17:00 Build Class and BuildLex

LOG:   Added '_' to Put/Get methods on Stream so it's up to the
       implementation to expose whatever methods they want.

LOG:   Exposed "properly named" Get/Put methods on Console.

LOG:   Much F'ing and Blinding with Windows inheritable, or not,
       handles trying to get Win32Process.Invoke working with 
       redirection of stdin, stdout, and stderr.  No luck at this
       point, yet.

TIME:  2011-12-10 02:00-05:00 Build Class and BuildLex

LOG:   Win32Process.Invoke starting to work with redirected stdout.
       *** Hurrah!!!  Finally got the bloody STARTF_USESTDHANDLES
       *** working in CreateProcess.  It's not rocket science but
       *** it's a bit off-putting reading Microsoft's examples.
       
TIME:  2011-12-10 07:00-14:30 More work on Lex

LOG:   First pass of LexFileInfo working.  It now calculates all info
       except the line Offsets and the LexTokens.
       *** That's for the second pass...

LOG:   Forgot to add LexFileInfo.h and LexFileInfo.cpp to SVN. Plus,
       did a quick efficiency tweek and got big.xml loading pass 1 from
       772ms to 572ms.  Not bad for an 11MB XML file!!!

TIME:  2011-12-10 18:00-20:00 More work on Lex
       
LOG:   Added examples/BSTT_Template.txt for upcoming LexToken work       

TIME:  2011-12-11 05:00-08:00 Worked on PersistHead

LOG:   Several things for Persistence...
         o Moved Persist headers/source from storage to persist
         o Wrote PersistHead class for Persistent BEFE Headers
         o Added Persist error range and error messages
       *** Still need to write PersistHead.WriteTo and PersistHead.ReadFrom

TIME:  2011-12-11 10:00-13:30 Worked on PersistHead

LOG:   Created UUID Class and added OperatingSystem.NewRandomUUID
       *** We can create 10 million in 1.332 seconds, that's one per
       *** 133 nanoseconds.  Not bad!!!

LOG:   Fixed Win32File.ModeToStyle to allow shared read by default
       *** We were having problems breaking in debugger and trying to
       *** run the same BEFE script from command line.  Doh!!!
       
TIME:  2011-12-11 15:00-19:30 Worked on UUID, PersistHead, and Encode/Decode with Keys

DONE:  Write UUID Class and plug into OperatingSystem and Win32OperatingSystem

LOG:   Fixed bug in LexToken.cpp where it wasn't looking completely to
       end of line for Ellipsis

LOG:   Added CanRead and CanWrite methods to File

LOG:   Added _GetBytes/GetBytes and _PutBytes/PutBytes properly in
       FileStream Class.
       
LOG:   Made Win32File default to ModeRead|ModeWrite|ModeAppend|ModeTransient
       if temporary file

LOG:   Implemented proper Stream GetBytes/_GetBytes and PutBytes/_ByteBytes
       methods in Win32Console Class       

DONE:  Backspace no longer works on Console
       *** See above

LOG:   Implemented skeletal File.Rename in File and Win32File 
       - Returns Error::NotImplemented

LOG:   Added a few more general error codes and messages and tidied up
       memory display format in ToStrings.cpp

TIME:  2011-12-12 09:00-18:00 Working on Crypt

LOG:   Forgot to add BuildLex.h and BuildLex.cpp to SVN

LOG:   Added UUID.IsValid method

LOG:   Added initial Crypt code.  Algorithm 0 Encrypt/Decrypt working
       on Strings.  Next, Buffers and Bytes...
       
LOG:   Crypt0 working except for ReadKeyFile, WriteKeyFile, EncryptFile,
       and DecryptFile.

LOG:   CryptWriteKeyFile_0 working.  Now for CryptReadkeyFile_0...

LOG:   CryptReadKeyFile_0 and CryptWriteKeyFile_0 now both work.
       Time for CryptEncrypt_0/CryptDecrypt_0...

TIME:  2011-12-13 02:00-03:00 Working on Crypt

LOG:   Fixed Befe._ValidateFileName to do right thing if simply a file name

LOG:   Forgot to add BEFEWrappers.h and BEFEWrappers.cpp

LOG:   Win32OperatingSystem.IsValidFileName wasn't initialising answer
       correctly if all was okay.

LOG:   A few tweeks to trythis TestCryptKeyFile test

LOG:   Forgot to add platform/win32/_Ole32.cpp to SVN

TIME:  2011-12-13 06:00-07:30 Working on Crypt

DONE:  Generate UUID bytes in RFC4122 form instead of Microsoft GUID form!!!
       *** See note in UUID.h for justification
       
TIME:  2011-12-13 09:00-14:00 Working on Crypt

LOG:   Wrote skeletal Crypt.cpp General Encrypt/Decrypt Functions

LOG:   Implemented CryptKey Struct and General Crypt Functions.
       *** Now, to test them...

LOG:   General Crypt Key File read/write working.
       *** Now to encrypt/decrypt actual data files...       

TIME:  2011-12-14 10:00-19:00 More Crypt

DONE:  Stick CRC in Crypt KeyFiles to ensure they're not buggered with.

LOG:   Changed Crypt KeyFile CRC to be seeded from hard coded non-zero
       value so even if the file was "machine fiddled" they would have
       to know what CRC seed and algorithm we use in order to fiddle
       with it properly.

LOG:   EncryptFile works, now for DecryptFile...

TIME:  2011-12-15 09:00-14:00 More Crypt

LOG:   Decrypt pretty much working, operationally, but is creating a
       corrupt output file.  Whoops!!!

LOG:   Encrypt/Decrypt working now except for file renaming.
       *** Now, to get File.Rename/Move working...       

LOG:   Put skeletal Obfuscate/Clarify/CreateKeyFile/UseKeyFile commands
       into CommandOS and help text.
       
LOG:   Tidied up extra '\n' on Shell exit and made Globals.CommandIndent
       default to false

TIME:  2011-12-16 04:00-06:00 More Crypt

LOG:   In-place Encrypt/Decrypt almost ready, just OperatingSystem.FileNameOnly
       to write...
       *** TODO: While there, add OperatingSystem.PathOnly as well

TIME:  2011-12-16 08:00-11:00 More Crypt

LOG:   EncryptFile/DecryptFile working but having problems with CommandOS_Crypt
       
TIME:  2011-12-16 13:00-17:00 More Crypt

DONE:  Finish off encrypt/decrypt with BEFE Key0 header files, and
       implement command in OS shell.
       *** This will FINALLY give us a protected AND portable
       *** 'passwords.txt' file.
       ***
       *** Hurrah!!!!

DONE:  Investigate allocation overhead if we put NotConsumable in MoveFrom
       *** It has absolutely NO IMPACT on full test suite as regards to
       *** the number of allocations.
       ***
       *** So, that means we just have to say that "const &" IN parameters
       *** just need to be assigned with NotConsumable when required
       *** just in case they came from an expression.
       
DONE:  Get OS Command Shell 'cd' command handling forward slashes for
       relative path names (it's in Win32OperatingSystem somewhere)
       *** Note: From Debugger (runs in c:\codelite...), do a
       ***       'cd \befe' and it fails.  But, 'cd c:\befe' works
       ***       Plus, it displays a bogus error number

LOG:   Tidied up Help and when '\n' is output.
       *** Decided to put it in the text NOT in Help()

LOG:   Declared and wrote initial WCHAR functions for use in Win32
       
TIME:  2011-12-17 05:30-09:00 UTF-8 Environment Strings

LOG:   Wrote Win32W_... functions and plugged into Win32Process.
       *** Almost working (it got the egyptian character right!!!)

DONE:  Got UTF-8 Environment Variables working

TIME:  2011-12-17 12:00-14:30 UTF-8 Environment Strings

LOG:   More Win32W work preparing for UTF-8 file names

TIME:  2011-12-18 00:00-06:00 UTF-8 File Names

LOG:   Finished writing Win32W_FromString, so not ready to implement
       UTF-8 file names...

LOG:   Got Win32OperatingSystem.GetFiles working with proper UTF-8
       file names.  Hurrah!!!
       
LOG:   Got Win32Reg handling UTF-8 registry Keys and Values

LOG:   UTF-8 File Names all working fine in Win32OperatingSystem

       Now, to get the Win32File methods working...

LOG:   Tidied up CommandOS_cwd and added implementation for
       Win32OperatingSystem.SetCurrentWorkingDirectory, including UTF-8
       handling
       
TIME:  2011-12-18 11:00-13:00 UTF-8 File Names

LOG:   Win32File all ready to test for WCHAR file names

TIME:  2011-12-18 16:00-18:00 UTF-8 File Names and other stuff

LOG:   Fixed bug with String.Remove with UTF-8 in it

DONE:  Get UTF-8 file names working
       *** All working, hurrah!!!!

TIME:  2011-12-18 20:00-23:00 Various

DONE:  Write OperatingSystem.IsLocalPath and OperatingSystem.IsRemotePath
       *** Or, at least put plug with Error.NotImplemented
   
FIX:   OS Shell 'cd' and 'dir' doesn't work with '\\...' network paths
       that do/do-not exist
       *** They do now!!! It's cool, cmd.exe doesn't let you 'cd \\...'
       *** buf BEFE does.  ;-)

TIME:  2011-12-20 01:30-03:30 Started on LexCache and LexFile

TIME:  2011-12-21 07:00-11:00 Intense focuse on LexCache and related classes

LOG:   Ready to test LexFileHead and LexBlock

TIME:  2011-12-21 12:00-15:00 Intense focus on LexCache and related classes

LOG:   Added File.Reset method

LOG:   Added a few more BEFE Wrapper Functions

LOG:   Fixed Befe Class so it didn't recursively load Error Messages if
       a syntax error was encountered.
       
LOG:   Got Minimal LexCache.CreateCacheFile creating empty file without header

TIME:  2011-12-21 17:30-19:30 LexCache and related classes

LOG:   LexCache.CreateCacheFile: Initial empty LexFile (2 blocks) populated

LOG:   More work on LexCache and LexBlock

LOG:   Updated CV and profile on LinkedIn

TIME:  2011-12-23 00:00-02:00 Cache

LOG:   Worked on Skeletal Cache, CacheBlock, and CacheFile.

TIME:  2011-12-23 06:00-09:00 Cache

LOG:   More Cache work, this time got FileNames/Ids maps working.
       *** No CacheBlocks yet
       
LOG:   Cache file names almost works, problem with Strings.Sort though...

TIME:  2011-12-23 10:30-12:30 Cache

LOG:   Cache files working now, on to CacheBlocks...

TIME:  2011-12-23 13:30-15:00 Cache

LOG:   Cache blocks not allocated and Free/Used chained.
       *** Now, for the read/write methods

TIME:  2011-12-23 20:00-21:00 Cache

LOG:   Put Hash/IsEquals/Compare into BEFE Lifecycle.
       ** Also tightened up definition of what a "Hash" is (UInt32)       

TIME:  2011-12-24 06:00-08:30 Cache

LOG:   Cache Free Chain working and displaying properly and nicely
 
TIME:  2011-12-24 10:00-13:30 Cache

LOG:   Moved display formatting into CacheFormat.cpp
       *** Now display both Free and Used blocks

LOG:   CacheFile now works properly with Used/Free chain and
       Cache.DisplayFiles now shows in MRU order (with pretty colours)
       
TIME:  2011-12-24 18:00-20:00 Various

LOG:   Put all ERROR, WARN, etc. macros into BEFEMacros.h.  Then did a
       major run through all the .cpp files to make them have proper
       headers AND include BEFEMacros.h if needed.
       *** This is good now, because it means all C Macros, except BEF_NS
       *** are out of "normal" published headers.  Hurrah!!!
       
LOG:   Minor fix to CacheFormat to handle Null case.
       *** Plus, changed ErrorMessages_msg.txt to change internal error code
       
TIME:  2011-12-25 12:00-15:00 Various

LOG:   Added Cache test to Unit Tests
       *** Also archived trythis.cpp so we can get back to something
       *** sane there!!!
       
LOG:   Moved '#include "_GlobalMacros.h"' into BEFEMacros.h and got rid
       of all specific includes of _GlobalMacros.h from all .cpp files
       
TIME:  2011-12-25 23:00-24:00 Various
TIME:  2011-12-26 00:00-03:00 Various

LOG:   Added IsNull, SetNull, IsEmpty, SetEmpty to all the standard
       Arrays (Ints, UInts, et cetera)
       
LOG:   Implemented CacheFileInfo and CacheBlockInfo Structs preparing
       for CacheInfo
       
TIME:  2011-12-26 09:00-12:30 Cache

LOG:   Twiddled with Cache.id and CacheFile.id so they work properly
       in BEFE Lifecycle (especially Reset)
       
LOG:   Put BEFE_INLINE and BEFE_inline into Id and Char methods where
       applicable -- there's a couple of places where we have a real
       function instead of something inlineable.

LOG:   Skeletal CacheInfo, CacheFileInfo, and CacheBlockInfo layed out
       and integrated, now to write the actual code...
       
TIME:  2011-12-27 00:30-02:30 Cache

LOG:   All Cache<T>Info struct code written and plugged in.
       *** Now it's about time to redo the output formatting and then
       *** test the bugger...
      
TIME:  2011-12-27 12:00-17:00 Cache

LOG:   Implemented IntLog2 Function
      
LOG:   Fixed Array, Alloc, and others to properly StartUp elements when
       using Array.Allocate for fixed/variable sized arrays
       *** This was a REAL BUGGER to find and fix.  Whew!!!

TIME:  2011-12-28 10:00-12:00 Cache

LOG:   More work on Cache, this time focusing on CacheFile.Display
       methods and starting to try testing Block loading (reading).
       
TIME:  2011-12-28 13:00-16:30 Cache

LOG:   Got IsNull(void *) and SetNull(void *&) working

LOG:   Got Cache.GetFileInfo, Cache.GetFileId, Cache._FileIdToIndex,
       and CacheFileInfo.Display working

LOG:   Ready to write and test Cache.BlockLoad now

TIME:  2011-12-28 18:00-21:00 Cache

LOG:   Almost finished with Cache.BlockLoad

LOG:   Major NULL riddance...
         1) Changed all "<x> == NULL" to "IsNull(<x>)"
         2) Changed all "<x> != NULL" to "!IsNull(<x>)"
         3) Changed Error::InternalNULLPointer to Error::InternalNullPointer

TIME:  2011-12-29 04:00-05:30 Cache

LOG:   More work on Cache.BlockLoad, almost there...
       *** Only File chain maintenance left

TIME:  2011-12-29 08:00-11:00 Cache.BlockLoad

LOG:   Cache.BlockLoad works with just a few outstanding nigglies...
         DONE: 1) Cache.DisplayOverview shows numUsed not being updated
         TODO: 2) Need to get CacheBlock.Display<xxx> written and working
 
LOG:   Got Cache populating CacheInfo used/free Block Indexes

TIME:  2011-12-29 13:00-18:30 Cache.BlockLoad

LOG:   Added String operator << (Char) and tidied up code and comments a bit

LOG:   Cache.BlockLoad all working and Cache.DisplayBlock looking nice!

LOG:   Just one outstanding problem with trythis reading an entire
       file in the Cache.
       
TIME:  2011-12-30 02:00-04:00 Cache.BlockLoad

LOG:   Cache.BlockLoad and Cache.DisplayFileBlock working completely.

LOG:   Major revamp of Cache...
         1) Moved all Chain methods out of CacheBlock and CacheFile and
            put them in Cache itself.
         2) Got rid of owner member in CacheBlock and CacheFile.
         
TIME:  2011-12-30 08:00-14:00 Cache.BlockLoad Finished (for now)

LOG:   TestCache.testBlockLoad written from old code in trythis.cpp
       *** Ready to write Cache code to write blocks now
       
LOG:   Asked Dirck, Roger, and Brett if they could think of any sane
       reason to make a Copy method for a Cache?  I'm stumped here!!!
       
LOG:   Added the following methods to Cache...
         • NumberOfBlocks(Id fileId)
         • NumberOfBlocks(Id fileId, UInt &numBlocks)
         • AppendBlock(Id fileId)
         • AppendBlocks(Id fileId, UInt numBlocks)

LOG:   Rationalised Cache method to have names <Verb><Object>, hence
       Cache.LoadBlock instead of Cache.BlockLoad

TIME:  2011-12-31 04:00-06:30 Working on Cache Block Writing/Flushing

LOG:   Got trythis easily and simply loading .h and .cpp file names in
       BEFE_SVN!!!!

LOG:   Fixed minor glitch in Strings.Sort -- wasn't swapping 0'th element

TIME:  2011-12-31 09:00-15:30 Working on Cache Block Writing/Flushing

LOG:   Got Cache.StopCacheFile working

LOG:   Got trythis reading all .h and .cpp files in BEFE_SVN through
       the Cache.
       *** 115 .h files and 155 .cpp files
       *** Only took 400ms to read the lot, and maximum contiguous
       *** memory only 270560 bytes.  WWWWWWWWWWWWWWWhhhhhhhheeeeeeee!!!

LOG:   Finally got a proper Nullable Boolean declared and working
       *** See the following in Null.h...
       ***   • False
       ***   • True
       ***   • IsFalse(Boolean)
       ***   • IsTrue(Boolean)
       ***   • IsNull(Boolean)
       ***   • SetFalse(Boolean)
       ***   • SetTrue(Boolean)
       ***   • SetNull(Boolean)

TIME:  2012-01-01 00:00-03:00 Worked on Befe-Wiki Type/Primitives

LOG:   Did some heavy thinking "on paper" in Befe-Wiki form more about
       the type model.  It's got a long way to go but it's at least
       started and going somewhere.

       NOTE:  Fairly sad isn't it, given that everybody else around
              the world is celebrating the New Year right now!!!
              Hee hee...

LOG:   Moved trythis code into TestCache.testLoadBlockSource, nice test!!!

NOTE:  Quitting smoking is a real BITCH AND A HALF!!!!!

TIME:  2012-01-01 20:00-...
       2012-01-02    ...02:00 Worked on Skeletal Build Class

LOG:   Deprecated BuildLex.h and BuildLex.cpp.  We'll bring those back
       later at the proper time.
       
LOG:   Revamped Build Class to start being the entire C++ builder.
       *** Have decided to hold off on proper script/data driven builds
       *** until we get release 0.2 and 0.3 out the door.  Then we'll
       *** focus on proper Block File I/O and Lexical processing based
       *** on Block Streams and THEN do a proper build based on things
       *** we've declared in Build scripts
       ***
       *** The idea is that while we want to make the future focus on
       *** language indifference and proper industrial strength lexical
       *** tools, we can't justify putting off release 0.2 and 0.3 just
       *** because of the long term goal.  So, the interum work on
       *** the C++ based build will be throw away code in the end.  
       ***
       *** Oh well, such is life!!!

LOG:   Got Build Class loading/walking header/source/data file names
       from BEFE_SVN directory       

TIME:  2012-01-02 03:00-04:00 More Build/String stuff

LOG:   Changed String.Find to return Null if not found, this lets us
       now do "...if (!IsNull(somestring.Find("xxx")))..." and stuff
       like that.
       *** This makes it distinctly different to "normal" -1 if not found
       *** BUT it's still LESS THAN ZERO, so there!!!  

LOG:   Changed Build.GetInputFileNames to only look in directories that
       contained "/c++" (after we've genericised the path, of course)

TIME:  2012-01-02 09:00-18:00 More Build stuff

LOG:   Got Win32OperatingSystem.CreateDirectories written and working

LOG:   Got Build.CreateOutputDirectories working

LOG:   Initial implementation of CopyFile, MoveFile, CopyDirectory, MoveDirectory...
         1) Added BEFEWrappers for these
         2) Added methods into OperatingSystem.h
         3) Added methods into Win32.h Win32OperatingSystem
         4) Added Error::NotCapable methods into OperatingSystem.cpp
         5) Added Error::NotImplemented methods into Win32OperatingSystem.cpp
         6) Actually wrote Win32OperatingSystem.CopyFile and it's ready for testing

LOG:   Implemented various Methods...
         1) OperatingSystem.DeleteFile
         2) Win32OperatingSystem.DeleteFile
         3) BEFEWrapper DeleteFile
         4) Build.CopyInputFiles

LOG:   Implemented Build Class CheckExternalBinaries and DisplayExternalBinaries
       methods using extBinaries NamedStrings member for external binary
       dependencies.
       *** Note: Currently hard coded, will probably change in Ubuntu

LOG:   Got Build.CompileCppSourceFiles written, ready to plug in the
       actual GCC Compile code...

TIME:  2012-01-03 04:00-09:00 More Build stuff

LOG:   Got Build.CompileCppSourceFiles working
       *** Takes about 2m25s to build DEBUG and RELEASE objects from scratch

LOG:   Got Build.CreateLibraries working
       *** Having undefined references to various vtable and RTI crap like...
       ***   ... undefined reference to `vtable for __cxxabiv1::__class_type_info'
       ***
       *** Mein Gott, I HATE this picky silly rubbish!!!!!!!!!!!!
       ***
       *** Hmmmm, all I had to do was to add '-fno-rtti' to the compile
       *** options in Build.CompileCppSourceFiles.
       ***
       *** I'm going to have to get that whole mess sorted out in my
       *** head at some point because I'm sick and tired of feeling
       *** helpless with crap like that!!!

TIME:  2012-01-03 10:00-15:30 More Build stuff

LOG:   Complete build works!!!  Now, for some tidyup...

LOG:   Build now shows partial elapsed times everywhere it's important
       
DONE:  Get rudimentary Build command processor working to produce
       the first build via BEFE scripts
       *** Decided to do this all in C++ instead of scripts.  Those
       *** will come a bit later.

LOG:   Got proper copyright notices in all header files and made sure
       they were consistently formatted.  Now for the source files...
       
DONE:  Get rid of dynamic DLL requirements (AGAIN!).  Don't know why
       it's back again.  Maybe because of c++11 or maybe our aborted
       WinMain???
       *** Seems to go away why BEFE builds itself.  For some odd 
       *** reason we still have the problem when CodeLite builds the
       *** product.  Oh well, we'll keep an eye on it.

TIME:  2012-01-03 19:00-22:00 More Build stuff

DONE:  Get proper header comments in all .h and .cpp files
       *** Updated ALL .h and .cpp to have 2011-2012 Copyright notice
       *** and made sure proper "..." comments were in place, etc
       
TIME:  2012-01-04 00:00-03:30 VarTerm bugs

LOG:   Fixed bug with VarTerm and 'Enc[rypt][F[ile]]' not generating 'EncF'

LOG:   Still left debugging VarTerm and 'U[niversal]T[ext]F[ormat][[-]8]'
       *** It's the ']' after the '8'.  For some reason it's not catching
       *** with the '[[' before the '-'.  
       ***
       *** Odd though, because 'a[[-]8]' generates the right thing but
       *** 'a[b]c[[-]8]' and 'a[c][[-]8]' don't.  Weird...
       
TIME:  2012-01-04 10:00-18:00 Various Bugs

DONE:  Fix improper handling of VarTerm 'U[niversal]T[ext]F[ormat][[-]8]'
       *** 'Enc[rypt][F[ile]]' doesn't generate 'EncF' or 'EncFile'
       ***
       *** Actually, it was TWO SEPARATE BUGS!!!
       
LOG:   Fixed bug in MessageLoadFile... It was trying to set the length
       of some Maps when it was finished -- the variables used to be
       Arrays, so it used to make sense to set their length when we
       were finished.

LOG:   Implemented CommandOS Build command.  Only accepts 'befe' and
       'all' as targets and IS NOT documented in the help (intentionally).
       
DONE:  Make sure all "// DEBUG..." is turned off for release
DONE:  Look at all "// TEMP" and "// Temp" and see if they can be
       gotten rid of now...
DONE:  Run through all .cpp files and make sure of the following...
         o Make sure 'while (false)...' style of error handling
         o Make sure 'Status status' instead of 'Status result'

LOG:   Win32File.Open was creating bogus temp file with some bogus
       and indeterminate unicode name because of uninitialised memory
       *** Simply a wrong check in an IF statement.  ;-)
         
LOG:   Changed Build to build into _<xxx> directories instead of <xxx>
       ones...  Almost ready to implement Build.PublishFiles method.

LOG:   Build.PublishHeaders and Build.PublishSources working
       *** And added some extra .h and .cpp files to publish list
       *** for illustration/example purposes for Joe Public
       
DONE:  Get Console.IsInteractive returning FALSE if the File is
       redirected.  For some reason, it returns TRUE even if stdout
       is redirected to a file.
       *** Seems to have gone away OR POSSIBLY it's something else.
       *** Not sure how those BS characters got into t.txt output file

TIME:  2012-01-05 06:00-08:30 Various

LOG:   Adjusted which headers/source are published and tested that
       each .cpp to be published will actually compile given the
       the .h files we're publishing along with them.
       
LOG:   Removed Win32 stuff from TestConsole because...
         1) We need to do Ubuntu next and it doesn't belong here
         2) We're publishing it in the release
  
LOG:   Tried removing 'NULL' from all headers but failed abysmally.
       *** May have another go before release, and may NOT!!!

TIME:  2012-01-05 13:00-17:30 Various

LOG:   Rejigged Build Class in preparation for doing a proper OS Build
       command.

LOG:   Wrote help for OS Build command.  Now, to actually write it...
       
TIME:  2012-01-06 08:00-17:00 Build Command

LOG:   Got complete OS Build command working and fully parameterised.

TIME:  2012-01-07 06:00-15:00 Various

LOG:   Changed Build.PublishLibrary and Build.PublishExecutable to
       display what they're doing.
       
LOG:   Added parameterised Help to CommandOS

DONE:  Get rid of "_" in _Consumable, _NotConsumable, _MoveFrom, and
       _CopyFrom, in all Array/Sparse/Map bases and templates. 
       *** All we should have to do is to invoke the <xxx>Base::<fff>
       *** instead of calling _Consumable, _MoveFrom, etc.
       
DONE:  Normalise all implementation classes and members/methods by
       putting a '_' in front of their names.  
       *** Need to put somewhere in the documentation that ANYBODY
       *** using any of the '_' Classes, Members, or Methods do so
       *** at their own personal risk because we don't give a shit
       *** about changing any of them marked this way on a whimsy
       ***
       *** Especially _ArrayBase, _SparseBase, _MapBase, etc.

DONE:  Wrote initial BEFE-Introduction.odt and .pdf, put it on Google
       docs, published it, and sent the link to Dirck, Roger, and Brett.
       *** We'll see how that goes from here.
       
DONE:  Write "Grey Paper" on "BEFE: What is it?"
       *** Introduce basic conversational topics to be discussed elsewhere
       *** Should introduce Lifecycle, Values, Objects, Ids, ...
       ***
       *** Motivation...
       ***   1) Missing a good C/C++ library to write my code against
       ***   2) Wonder why "they" seemed to have missed the whole point
       ***   3) Language/Platform independence -- portable
       ***   4) Meta-data is great WHEN YOU NEED IT
       ***   5) Problems with today's languages...
       ***   6) Starting with Value model, reusability, in C++, and Portability
       ***   7) Current intentions are to get it meta-model rich and language
       ***        cross-complient and morphable between languages
       ***   8) I imagine a "language without notation" -- What a concept, eh?
       ***
       *** May want to quickly say why "notation gets in the way".  Prime example
       *** is we're taught number representations in primary school and how to
       *** add, subtract, zero, negative, etc.  Then, we go for it and forget that
       *** there IS NO NUMBER TWO!!!!!  And, even if there is, I've never seen
       *** one because it's just an idea.  The number IS NOT the DIGIT!!!
       *** The digit is a symbolic representation of the idea.  That's all.
       *** So, notation can get in the way...
       
TIME:  2012-01-08 08:00-17:00 BEFE Documentation

LOG:   Tidied up "BEFE Introduction" getting rid of the open bitterness
       and focusing on MEAT instead.  Got it down to three pages instead
       of four.  Hurrah!

LOG:   Working on "BEFE String class" Grey Paper.  Trying to come up
       with a reasonable page/document layout that I can use as a
       "standard" for now.

TIME:  2012-01-09 09:00-18:00 BEFE Documentation

LOG:   More extremely various Grey Papers, Type model, etc.
       
TIME:  2012-01-10 09:00-03:00 BEFE Documentation

LOG:   More work on String class Grey Paper, it's starting to flow a
       bit more freely off the fingers now.  ;-)

TIME:  2012-01-10 22:00-02:00 Code cleanup

LOG:   Turned ALL _IsNull, _SetNull, _IsEmpty, and _SetEmpty to
       IsNull/SetNull/IsEmpty/SetEmpty everywhere
       *** Put "using namespace BEF_NS" some places and had to use
       *** "::IsNull" etc.  Other places I just put "BEF_NS::IsNull"
       *** because it was easier and there weren't that many of them.
       ***
       *** At least we've now got properly named methods.  It's just
       *** that C++ namespaces are a "muddled model".  When we get
       *** around to modelling ours, we should make the namespace
       *** have a "Search Path" so we can make sure the names don't
       *** always need that kind of crap qualification.  ;-)
       
TIME:  2012-01-11 09:00-16:30 BEFE String Grey Paper

TIME:  2012-01-12 07:00-10:30 BEFE String Grey Paper and Build

LOG:   Build recognising what to publish based on first line in file but...
         1) It seems to take ages per file ***look into it***
         2) Isn't plugged into Build.Publish... yet
         3) OSWalk doesn't seem to visit top directory ***look into it***
         
TIME:  2012-01-12 12:00-16:30 Build and other stuff

LOG:   Fixed String.Get(Span const &), it was taking huge amounts of
       CPU and doing tonnes of Append(Char).  Changed it to get the
       whole lot in a single swipe.
       *** Still seems to be the odd GPF now and again though!  ;-(
       *** Will have to keep an eye on it.
       ***
       *** Turns out Windows heap is getting corrupt somewhere.  Am
       *** going to stick "+mvh" option in for "MemoryValidateHeap"
       *** to validate Before each Alloc/Free

TIME:  2012-01-13 02:00-03:00 Found and fixed BUGGER of a GPF

LOG:   Okay, found that real BUGGER of a GPF in BuildMisc.cpp.
       *** It was one of those DUH moments (as they all are).
       *** However...
       Added +mv, -mv, +mva, and -mva options to enable heap validation on
       the fly.  It's quite helpful.       

TIME:  2012-01-13 04:00-05:30 Found and fixed BUGGER of a GPF

LOG:   Build Class now publishes from '!befe-publish' pragmas in
       header/source files
       
TIME:  2012-01-13 08:00-14:00 VarTerm (major fixes and rework)

TIME:  2012-01-13 18:00-22:00 More work on BEFE String Grey Paper

TIME:  2012-01-14 06:00-13:00 More work on BEFE String Grey Paper

LOG:   Fixed a couple of buggettes in CommandOS_which and a couple
       of other methods in there, having to do with using WARN and
       return status.
      
LOG:   More than half finished with BEFE String Grey Paper now!!!

TIME:  2012-01-15 07:00-16:00 BEFE String and Lifecycle Grey Papers

NOTE:  Can't decide whether to put the Lifecycle justification currently
       in the BEFE Lifecycle paper into the Introduction paper or not.
       *** Hmmmm.....

LOG:   Also did some more tweeking of Type.txt
       *** Should call these Type.befe instead.  ;-)
       
TIME:  2012-01-16 09:00-17:00 More Grey Paper work plus BEFE Web Page

TIME:  2012-01-17 01:00-04:30 More Grey Paper work plus BEFE Web Page
TIME:  2012-01-17 06:00-14:00 More Grey Paper work plus BEFE Web Page

LOG:   Almost finished with BEFE Lifecycle Grey Paper.  Should only
       take a couple more hours.  Whew!!!

TIME:  2012-01-18 08:00-20:00 More Grey Paper work plus BEFE Web Page

LOG:   I detest Google+ Sites web page editor...  It gets SO CONFUSED
       with anchors and formatting.  What a load of rubbish...
       One shouldn't have to go into the HTML to get what you want.
       Not just that, if you put invalid HTML in there, it'll just
       throw the stuff away, including stuff that was already there but
       you messed about with.  Yuckity yuck!!!
       
TIME:  2012-01-19 05:00-09:00 More Grey Paper work plus BEFE Web Page

LOG:   Got some good steady work on BEFE Types, Classes and Procedures
       and may finish publishable copy today.
       
TIME:  2012-01-19 10:00-13:00 More Grey Paper work plus BEFE Web Page

TIME:  2012-01-19 15:00-17:30 More Grey Paper work plus BEFE Web Page

LOG:   Published first version of BEFE Grey Paper: Types, Classes, and Procedures

LOG:   Spent some time figuring out how to get a link map from gcc...
       Turns out that even with released code, all the actual function
       names and prototypes (except for return type) are in the map
       *** I suppose that doesn't give away too much intellectual
       *** property because it doesn't give the source code or
       *** return types away, just the prototypes.  Maybe that's
       *** fair enough, maybe not.
       
       It turns out that the code for String is about 64K. Wow!!!
       I hadn't expected it to be so big.
       
       And Cache is around 32K.  Hmmmm....
       
       Still, it doesn't look like there's tonnes of overhead from
       the MinGW gcc libraries...  It all seems to be BEFE CODE.  I
       guess that's good and it's bad, disappointed though.  ;-(

TIME:  2012-01-20 09:00-17:30 More Documentation

LOG:   Got Command OS 'build P[ub[lish]]Doc[ument[ation]]' working.
       *** It's great because it invokes OpenOffice/LibreOffice 
       *** to create the PDF files in the doc directory

LOG:   Continued writing in Grey Paper BEFE-Class_String
       *** After finally figuring some oddities out about LibreOffice,
       *** it's starting to flow pretty well now.

TIME:  2012-01-21 09:00-02:00 More Documentation

LOG:   Changed String.Immutable to String.NotMutable
       Removed Lines.GetLineAddress to prepare Lines to use Cache
  
LOG:   Worked some more on Class String Grey Paper

TIME:  2012-01-22 06:00-07:30 More Documentation

LOG:   More work on String Grey Paper

TIME:  2012-01-22 10:30-14:00 More Documentation

TIME:  2012-01-22 16:00-18:00 More Documentation

LOG:   Only 9 short sections of String Grey Paper left to write!!!

TIME:  2012-01-23 10:00-16:00 More Documentation

LOG:   Only 1 section of String Grey Paper left to write!!!

LOG:   Renamed String.SplitToConstStrings to String._SplitToConstStrings
       because I decided we don't necessarily want to publish that.

TIME:  2012-01-23 20:00-00:30 More Documentation
       
LOG:   Finally finished String Class Grey Paper!!!

TIME:  2012-01-24 09:00-13:00 Working more on Build

LOG:   Got Build ZIP partially written and Build PublishHomeFiles
       written and working.

TIME:  2012-01-24 15:00-17:30 Working more on Build

LOG:   Got entire ZIP file being created with release/debug everything
       being optional.  Now, going to have to sit on this and decide
       where to go next.  Hurrah!!!!!
       
DONE:  Write "Grey Paper" on "BEFE Primitives, Types, Values"
       *** Include: value Attribute
       ***          owner/container
       
DONE:  Write "Grey Paper" on "BEFE Typedefs, Classes and Structs"

DONE:  Write "Grey Paper" on "BEFE Value Lifecycle"

       Make sure and cover the rational behind "Consumable".
       
       What it should cover is why we add a "consumable" modifier to
       parameters passed so we can inform the object that when the
       called function (or return) wants to "copy" it, it's gets
       MOVED instead of COPIED.  ;-)

       That's really where C++ got it partially wrong!  Possibly
       start laying out the BEFE Lifecycle?
       
       *** Actually, we need to write a .odt document or a presentation
       *** on the BEFE Lifecycle.  Maybe that would be better.

DONE:  Write "Grey Paper" on "BEFE Array/Sparse/Map"
DONE:  Write "Grey Paper" on "BEFE Indexing Types"
DONE:  Write "Grey Paper" on "BEFE Sequence Specifications"
       *** Including Index, Key, Range, Span, Slice
       *** Including, maybe separate, Allocs and where they fit in since they're
       *** NOT index limit specs, they're more implementation/storage specs!

DONE:  Update Build Class to produce builds including the following...
         o .ZIP file(s)
         o Documentation
         o Anything else I can think of to deliver in 0.2

TIME:  2012-01-25 09:00-16:00 Working on Final Release

LOG:   Fixed unexpected GPF in String.LeftTrim.  Odd time to find it, eh?

LOG:   Added TipsAndTricks.txt and ReleaseNotes.txt to home directory

LOG:   Got BuildZip.cpp publishing files flagged "#!befe-publish" with
       no target into the ZIP root.
       
LOG:   Tagged BEFE.h with head SVN Revision for release 0.2

LOG:   Right, ready to release BEFE-0.2.  Just gotta try it out on
       Jane's machine first which means loading MinGW in there...
       
TIME:  2012-01-26 08:30-14:30 Release BEFE-0.2

LOG:   Released it, emailed everybody, blogged, facebooked, etc.

LOG:   Started on utilities/TimeKeeper code... TimeKeeper utility looks
       at Journal.txt and tells the Time invested so far in BEFE
       *** Writing this as a standalone utility instead of part of
       *** BEFE.  Sort of a "trial go" at building stuff using BEFE

DONE:  Build Release 0.2 Release Notes, including...
         o List of files we're releasing
           + Documentation
           + Data/Configuration Files
             - Websters_2nd.txt
             - Unicode_Folding.txt
           + Library Files (GNU .a files)
           + Object Files (GNU .o files)
           + Headers (C/C++ .h files)
           + Source files, some (C/C++ .cpp files)
           + Executable (Microsoft .EXE only, Unix to come shortly)
           + Examples
         o What's there
           + Detail by file...
         o What's missing
           + Microsoft CL compiled .OBJ and .LIB files (coming soon)
           + Unix (Ubuntu) port (***Coming soon***)
           + Various minor...
             + Command-line completion in Console device (***Coming soon***)
             + Array.Find methods
             + String Variable Substitution
             + VarTerm not quite working 100% yet but good enough for use
                 in release BEFE-0.2 CommandShell stuff
                 ***Work In Progress***
           + Rationalised Sorting/Compare methods (***Work In Progress***)
           + General Data Formatting (better than printf is easy, Java/Python harder...)
           + ISO Time Strings
           + Primitive Int based Statistical Functions like STD (***Work In Progress***)
           + Detailed OS FileSystem analysis (***Work In Progress***)
           + Choosing Sort algorithm where it's implemented (***Work In Progress***)
           + Object Model
           + Haven't finished Integer/Number/OraNumber implementations
           + Proper Process Model
           + Serialisation and Persistence (coming soon)
           + Network Communication
           + Security for Serialisation/Persistence/Communication
           
DONE:  Put RoadMap (release 0.3 and on) specification of the following in
       the release notes...

       Release 0.3...

         o Ubuntu C++ release

       Release 0.4 (priorities up in the air, feedback requested)...
       
         o BEFE itself...
           - Iterators (possibly)
           - Repository
           - Persistence Model
           - Communication Model
           - Object Model
           - Programming Model
             o Single-threading
             o Why "recursion" is dangerous and SLOPPY!
             o Parallel processing
             o Multi-core
             o Functional v Procedural Programming
             o Discrete v Continuous Simulation
           - Tentative Process model
             *** Holding off on threading here because I'm still not quite
             *** convinced it's that important in the bigger picture.  For
             *** instance when it comes to massively parallel and multi-core
             *** processing.  This needs closer attention than just jumping
             *** mindlessly onto the thread bandwagon don't you think?
         o BEFE in general...
           - BEFE-Wiki
           - GUI Model
           - Abstract Machine Model (AMM)
           - Industrial Strength Math (to compete "head on" with GNU's MPL)
             + Number     // ◄── Arbitrairy precision Floating Point
             + Integer    // ◄── Arbitrairy precision Integers
             + Rational   // ◄── Arbitrairy precision Fractions
             + OraNumber  // ◄── Oracle Numbers
         o Native Language bindings...
           - Python language binding
           - Java language binding?
         o Third Party Language parsing/generating...
           - Json reader/writer
           - XML reader/writer
           - HTML 5 reader/writer
           - PDF reader/writer (maybe)
           - Python
           - Java
           - C
           - C++
           - Json
           - JavaScript
           - *** Perl ??? ***
         o Third Party or Standard File Formats...
           - Graphics
             + PNG
             + JPG
             + GIF
             + BMP
           - Typography
             + True Type Fonts
           - Audio
             + MPG
             + WMV
           - Video
             + AVI
             + GIF
             + MPG
             + Apple QuickTime
             + Adobe Flash/Shockwave
         o Third Party Application Plugins...
           - Firefox
           - Chrome
           - Safari???
           - ***NOT Internet Explorer***  ;-)
         o Database Clients...
           - Oracle
           - MySql
         o Protocol Clients...
           - SVN Client
           - HTTP Client
           - HTTPS Client
           - FTP Client
           - SMTP Client
           - IMAP Client
           - SMB Client
           - Cookie manager
         o Protocol Servers...
           - HTTP/HTTPS Server
           - BEFE Server
           - SVN Server
         o Security credential cache specification and how we ensure
           it is "secure".

***DONE:  Do official 0.2 release with a library and stripped down headers.

TIME:  2012-01-26 20:00-22:30 Initial TimeKeeper Utility work

LOG:   Have TimeKeeper.main reading N files, parsing command line
       options including BEFE options, and displaying errors okay.
       *** Now for the "real work" of pulling the TIME lines apart...

TIME:  2012-01-27 09:00-15:00 More TimeKeeper work

LOG:   Started Gregorian.Date class for proper data parsing and
       settings.
       *** We only provided "to Gregorian" methods for Time because
       *** Time isn't really tied to the Gregorian Calendar.  But, we
       *** may wish to add Hebrew, Chinese, et cetera calendars at
       *** some point in the near future.
       
TIME:  2012-01-27 21:00-03:00 More TimeKeeper work

LOG:   Found major problems in Time...  Seems like Microsoft is one
       day off.  Plus we're not adjusting properly.
       *** Fixes in progress for Time.cpp and ToString.cpp and new
       *** GregorianDate.cpp stuff

TIME:  2012-01-28 12:00-16:00 More TimeKeeper work

LOG:   Got Time year/month/day calculating properly in BEFE and in
       new GregorianDate code.
       
LOG:   Got Command OS Build '-' options working properly in BEFE

LOG:   Finished up TimeKeeper utility, with some modifications to BEFE
       *** Plus celebrated 2 years since having a drink!  

TIME:  2012-01-29 08:00-17:00 First real go at Ubuntu...

LOG:   Got all warnings out of compiles.  Had to switch from gcc to
       g++ to get rid of all the linker errors.

LOG:   Weird, editing this on Notepad++ using Wine on Ubuntu.  Who
       knows how well this is going to work.  ;-)
	     *** Have everything but the low level Ubuntu platform stuff
	     *** there.  That shouldn't be too hard (maybe a day or two?)
	   
TIME:  2012-01-30 12:00-17:00 Continuing finding bugs in Warnings rework...

LOG:   Fixed bug in String.Get that's always been there.  Weird!!!

LOG:   Fixed bug in _ArrayBase::_Set that's always been there. WEIRD AGAIN!!!

LOG:   All warnings out of Ubuntu compile.  Just undefined references
       left.  
       *** Gotta figure out about Build::_Zip though...

TIME:  2012-01-31 03:00-04:00 Ubuntu

LOG:   Finished skeletal implementations of all platform specific
       classes and methods.  Befe now runs on Ubuntu but, of course, 
       does not DO ANYTHING.  That's next...

TIME:  2012-01-31 07:00-16:00 Ubuntu
       
LOG:   Got all tests running without GPFs, well they didn't all do
       proper things because the underlying Platform stuff isn't there
       yet in Ubuntu but at least they don't GPF now.
       
LOG:   Got Ubuntu32Console working almost, except for fore/back colour.
       Time is next...
       
LOG:   Reverted VarTerm.cpp to revision 2266 and updated prototypes in VarTerm.h.
       I really screwed up VarTerm trying to get rid of the warnings and will do
       it better next time.
       *** All this because we want to try it on Ubuntu mixed with
       *** the fact that we need to rewrite VarTerm anyway.  Jeez...
LOG:   Time working properly now in UbuntuOperatingSystem.
       *** Except for local time...  Will need to do something about
       *** that.

DONE:  Release a Blog NOTE to NOT use Time Long values persistently
       because we're fixing them and need Ubuntu to sanity check the
       work.
       *** We've found that Microsoft was NOT WRONG in the SystemTime
       *** and FileTime conversion, I was.  DDDDDOOOOOOHHHHH!!!!!
       *** Found the problem in Windows platform code. 
       *** Ubuntu time works just fine now
	   
TIME:  2012-02-01 09:00-18:00 Ubuntu

LOG:   Tried ncurses but it's not work we want.  Got Ubuntu32Console
       working properly when prompting for line input.
	   
LOG:   Ubuntu Console Colours now working just fine.  Had to make the
       XTerm default to black background and white foreground.
	     *** Hmmmm... Will have to have a think about that.

LOG:   More Ubuntu, this time mainly the CPUID instruction and playing
       around with GNU gas (known as 'as') in ~/play/t.asm
	   
TIME:  2012-02-02 12:00-20:00 Ubuntu

LOG:   So much time trying how to get Dropbox, SugarSynch, etc. running
       and working on Ubuntu.  Then there was Spotify and trying to
       get my head around Wine.  Well, call it "learning" instead of
       a "frustrating waste of time" which it really was.  Oh well.
       
TIME:  2012-02-02 23:30-01:00 Ubuntu

LOG:   Actually Windows but... Rewrote Args.Split to handle quotes
       and escape whitespaces correctly.
       *** All that's left here is to add Unescape() call in there
       *** Nevermind, I threw it into Args.Spli, 'twas easy
       
TIME:  2012-02-03 09:00-18:00 Ubuntu

LOG:   Got String.Unescape working properly with '\x...'

LOG:   More stuff in Ubuntu platform OperatingSystem, Processor, and
       Platform.

LOG:   Finished compilable but skeletal Ubuntu32File Class.  Shouldn't
       take much to get it working.
       *** Note: Really need this working so we can read /etc/issue
       ***       and other important files for initialising info in
       ***       the Platform, Processor, Network, and other classes

TIME:  2012-02-04 00:00-02:00 Ubuntu

LOG:   Just a few more Ubuntu methods (like OS.Exists, OS.IsFile, etc.)
       and we've got the beginnings of CommandOS working on Ubuntu)

TIME:  2012-02-04 04:00-06:30 Ubuntu

LOG:   Got Ubuntu GetFiles/GetDirectories/Exists/IsDirectory working.

LOG:   Added +a[ll]f[iles] -a[ll]f[iles] +a[ll]d[irs] and -a[ll]d[irs]
       working in Ubuntu OS ls command and in the help text.

TIME:  2012-02-04 12:00-18:30 Ubuntu

LOG:   Got more Ubuntu OS methods written.  CommandOS now works with
       cwd, ls, and mv (on files).  Now, for 'mv' on directories and
       rm on both files and directories and cp on files...

LOG:   Got Ubuntu Process returning environment variables and values
       correctly so it works in Befe as well.
       *** It's weird, Ubuntu doesn't seem to have a "TEMP" environment
       *** variable.  Okay, I'm not a natural born Unix/Linux guy so
       *** I was surprised.  No problem though.

TIME:  2012-02-05 10:00-17:30 Ubuntu

LOG:   Got 'cp' command working using OperatingSystem.CopyFile

LOG:   Got 'rm' command working using OperatingSystem.DeleteFile

LOG:   Got OperatingSystem rejigged with _LowMoveFile, etc. low level
       methods so we can share as much code as possible between 
       Platform implementations.
       *** Need to adjust Ubuntu32OperatingSystem to take this change
       *** into account.
       
LOG:   Got Ubuntu32OperatingSystem in line with Win32OperatingSystem
       with implementing _LowMoveFile et cetera

TIME:  2012-02-05 21:00-23:00 Ubuntu

LOG:   Ubuntu: Finished up Ubuntu32File methods.  Now for testing...

LOG:   Ubuntu: BEFE scripts almost reading and running now.

TIME:  2012-02-06 06:30-07:30 Ubuntu

LOG:   Ubuntu: BEFE scripts starting to work.  OS Analyse fails though...

TIME:  2012-02-06 09:00-16:30 Ubuntu

LOG:   Ubuntu...

         1) Some basic bugs that have always been there are now fixed
         2) Got Ubuntu32OperatingSystem pretty much all working
         3) Got Ubuntu32File pretty much all working
         4) Got Command 'set' working in all forms

       Now, to figure out why error message strings not loading...

DONE:  Get FileInfo working, including times, on Ubuntu

DONE:  Fixed the odd hang bug in UTF8, etc.

TODO:  Find out why "test lexicon" turns the screen colour weird!!!

TIME:  2012-02-06 21:00-23:30 Ubuntu

LOG:   All tests working now, including cache.

LOG:   Changed Ubuntu list separator to be ':' because, oddly, that's
       how they separate things in the PATH environment variable.
       Maybe I've been on Windows too long, who knows?

LOG:   Changes Sw[itch[s]] command to display switches if no parameters
       were given.

       Also, moved switch display formatting out of ToStrings and into
       the Globals class where it belongs - for now.
       *** May change mind on that, because it has lots of strings
       *** so it may be better separate from the Class itself.  Hmmm...

TIME:  2012-02-07 11:00-17:00 Ubuntu

LOG:   Fixed infinite loop in _MapBase...  Did a 'break' but was
       double nested.
       
LOG:   Fixed Args.Split so it didn't call Unescape on each argument.
       It's really up to the specific command to determine when to
       escape.
       
LOG:   Changed Command_Set to properly escape or not based on quotes...
       If the value is in quotations, it doesn't escape.  That lets us
       specify Window's file names in SET commands, for example...
       
         set home='c:\befe'
         
       But it also let us put spaces or whatever in non-quoted things,
       for example...
       
         set path=c:\\program\ files

TIME:  2012-02-07 20:00-22:00 Ubuntu

LOG:   Got -env:<name>=<value> recognised, it's just that the code doesn't do it yet

TIME:  2012-02-08 09:00-14:00 Ubuntu

LOG:   Got Args and CommandShell parsing and handling properly escaped
       command line arguments
       *** Note: befe -env:xxx="abc def" works properly

DONE:  Get Ubuntu OS 'encrypt' and 'decrypt' commands working
       *** Currently getting "Not Implemented"

LOG:   Fixed Ubuntu32OperatingSystem PathToNative and PathToGeneric.

LOG:   Fixed Ubuntu32File Rename and Move to work properly

LOG:   Fixed bugs in Befe.ValidateNewFileName (wasn't applying
       relative path correctly).

LOG:   1) Added UUID tester
       2) Wrote Ubuntu32OperatingSystem.NewUUID
       3) Various fixes in Ubuntu32 File
       4) Got Encryption/Decryption working

TIME:  2012-02-08 07:00-16:00 Ubuntu

LOG:   Rejigged Befe and Platform Environment methods

LOG:   Added 'R[ef[resh]]Env[iron]' command to CommandSHell and to
       CommandOS.  It's quite flashy, to be honest!!!  ;-)

TIME:  2012-02-09 09:00-13:00 Ubuntu

LOG:   Moved <name>=<value> parsing from Command_Set into Args.NameValuePair

LOG:   Got switch '-env[:[<name>[=[<value>]]]]' all working and
       multiple arguments in the 'set' command.

DONE:  Get -env:<name>, +env:<name>=<value>, and ?env working
       *** Actually, instead of '?env' we just have '-env' to display
       *** all environment variables.  We could, however, also add
       *** '?env' at some point.  Hmmmmm...

LOG:   Fixed unexpected GPF in MemoryReverseBytes

LOG:   Shell and BEFE environment variables, including help, are all
       working now.  Threw in '-env', '-env:', and '-env:=' for handy
       special effect and capability.

LOG:   Ubuntu: Fixed default access when creating new files -- at least for now

DONE:  Get attributes working correctly when creating files...
         1) Create should make it 444 if ReadOnly
         2) Create should make it 666 if ReadWrite
       *** Just added 'static UInt defaultAccess' for now.  Hopefully this
       *** will work out with umask, et cetera

DONE:  Another VarTerm problem... 'P[ub[lish]][All]' doesn't generate
       'Pub'.  Grrrrr....
       *** Basically, rewrite VarTerm because it needs it...
       *** Problem has "gone away" and it seems to work now.
       *** Still, we're going to rewrite VarTerm
  
TIME:  2012-02-09 19:00-23:00 Ubuntu

LOG:   Did a proper Ubuntu Backup to Samsung USB disk.  Feels better
       having a backup.

LOG:   Installed "Gnome Shell".  Oh yes, MUCH BETTER than "classic".

TIME:  2012-02-10 07:00-08:00 Ubuntu

LOG:   Ubuntu: Evidently, xterm sequence 'ESC[40m' is supposed to set
       background colour to BLACK, but it doesn't...  it sets it to
       the default GNOME Console colour grey.  Put in a hack to only
       set background colour or foreground colour if it's different.
       *** Saves on I/O and fixes the weird screen display problem.

TIME:  2012-02-10 09:00-16:30 Ubuntu

LOG:   A couple of good things...

         1) Fixed NotConsumable bug in ArrayValue.Append and ArrayValue.Insert
         2) Added '-l' option to 'ls' in CommandOS
         3) Implemented GetFilesInfo in OperatingSystem instead of the platform specific code

       And a couple of necessary things...

         1) Changed all Process.Invoke declarations to be _Invoke
            because not happy with the modelling of it
         2) Finished writing almost all  "NotImplemented" code
              in Ubuntu32OperatingSystem
         3) Almost have it through my head how to implement the
              Process._Invoke methods in Ubuntu32Process

TIME:  2012-02-10 17:00-19:30 Ubuntu

LOG:   Had a long hard fight trying to find where the missing memory
       went when I did a 'befe +vv +ms +tests all'...
       *** It was because I hadn't written GetTempFileName so it
       *** called ABORT()
       ***
       *** Plugged that in but can't get BEFE_Temp environment 
       *** variable to stick for some reason.  Hmmm....

LOG:   Added code in CommandShell.Main to prepend 'opts ' to input
       line if first non-white was '-', '+', or '?'.  Did this because
       I'm sick and tired of having to type 'opts...' just to do
       a bloody switch setting.

TIME:  2012-02-11 02:30-03:30 Ubuntu

DONE:  Get '~' in relative paths substituted for $HOME.  The real
       question is should that use TheBefe->GetEnvironmentValue or
       should it use TheBefe->TheProcess->GetEnvironmentValue.
       *** Hmmmmm....
       *** Decided to use TheBefe->GetEnvironmentValue for now.  We'll
       *** see how that goes.

TIME:  2012-02-11 05:00-08:00 Ubuntu

DONE:  Get CommandShell.Main running '~/.beferc' if it's there

LOG:   Fixed some little problems with UtfInline type Strings

LOG:   Added BEFE_QuoteLeadIn and BEFE_QuoteLeadOut environment
       variable checks to Args.NameValuePair.  If they're set, we
       use those to display the vars instead of the defaults.

TIME:  2012-02-11 11:00-14:00 Ubuntu

LOG:   Changed Befe.Abort to output '\n' after message because it
       was starting to piss me off!  ;-)

LOG:   Several important things...
         1) Got BEFE_Temp working properly
         2) Got .beferc working properly
         3) Added BEFE_SubstBegin and BEFE_SubstEnd environment variables
       TestFile still fails though...

DONE:  Get Ubuntu32OperatingSystem.GetTempFileName() working properly
       *** For some odd reason, I can't get the BEFE_Temp environment
       *** variable sticking properly.
       *** This is why 'befe +vv +ms +test file' shows missing
       *** memory, because it calls ABORT

TIME:  2012-02-11 20:00-01:00 Ubuntu

FIXED: Figure out why 'befe +test file' fails
       *** Okay, it took a while but it was mainly because 
       *** Ubuntu32File.AccessToMode wasn't right

TIME:  2012-02-12 10:00-19:00 Ubuntu

FIXED: Figure out why 'befe +test cache' fails
       *** Various stuff, but mainly having to do with not calling
       *** ApplyRelativePath when needed

FIXED: If you put an 'exit' at the end of .beferc you get the following...
       *** ERROR CommandShell.Main: ARSE!!!+004: !!!Unexpected NULL Address Pointer!!!
       ***
       *** CommandShell.Main wasn't checking for empty command Shell
       *** array (which indicates "we're finished")

DONE:  Get Ubuntu32OperatingSystem local time working properly.
       *** May have to deduce it from time.h somehow
       *** Was easy...  Use <time.h>, tzset(), and timezone

LOG:   Several things...
         1) Implemented first two _Invoke methods in Ubuntu32Process
         2) Added SubstituteEnvironmentValues methods to Befe Class
         3) Changed CommandShell.Main to substitute vars in the input line

DONE:  Get 'echo ...' working with Substitution.
       *** Let's make another Substitute that uses environment
       *** from TheBefe

FIXED: Figure out why BEFE_SubstBegin/End of '$(' and ')' doesn't work.
       Neither does '≪' and '≫', evidently because they're UTF-8 and
       one character long (eg String.Find probably has a problem)
       *** It seems to have fixed itself along the way here because it
       *** NO IT STILL FAILS...
       *** Found it...
       Fixed Substitute (StringGeneral.cpp) procedure in weird case
       where end of span was at end of string.

TIME:  2012-02-13 12:00-19:00 Ubuntu

LOG:   Ubuntu32 Build working up to compile.
       *** Next, don't compile Win32 files on Ubuntu32 and vice versa

DONE:  Get Ubuntu Process _Invoke working
       *** It's now working to the same point as Win32Process._Invoke

LOG:   Filled out a slew of Platform "Is..." methods to get the build
       recognising it's Ubuntu vs Windows.
       *** Need to implement these fully in the future, especially
       *** the String forms of them.

LOG:   Several things...
         1) Added Error.Cancelled error and checked for SIGINT in Ubuntu32Process._Invoke
         2) Added Flush implementation to Console and Ubuntu32Console
         3) Changed all Build fuel gauges to call Cout.Flush() after displaying %
         4) Ubuntu32 build not works through Compile step!!!  ;-)

DONE:  Ubuntu32 Build: Get it hackily weeding out Ubuntu in Windows
       build and Windows in Ubuntu build.

LOG:   Ubuntu32 build almost creating executable now

TIME:  2012-02-14 01:30-04:00 Ubuntu

LOG:   Got Ubuntu port building itself, at least to the executable stage
       *** Now to get the rest building (docs, etc.) and then on to
       *** fixing the most likely broken Win32 port

TIME:  2012-02-14 09:00-15:00 Ubuntu

LOG:   Ubuntu BEFE self-build works completely!!!

LOG:   Renamed c++/examples to c++/_examples and added main.bash
       sample script to compile main

LOG:   Got rid of unneeded '// DEBUG...'

LOG:   Added special '!...' command recogniser to CommandOS.  If it
       sees one of those it calls _Invoke() on the rest of the 
       command line.  This gives us the ability to execute OS shell
       scripts from a BEFE script.

LOG:   Fixed some environment variable substitution problems in
       CommandShell.Main

LOG:   Changed default BEFE_SubstBegin and BEFE_SubstEnd to be '$(...)'
       instead of '<...>', simply because it's much more usable.
       *** Plus, we REALLY don't like Microsoft's '%...%'.  ;-)

TIME:  2012-02-14 20:00-24:00 Ubuntu

LOG:   Got Process.GetExecutableFileName and friends working on Ubuntu
       *** Along with that came Ubuntu specific GetCommandLine, etc.
       *** at the low level platform.  Actually Linux "/proc/..." is
       *** pretty cool when you think about it.

TIME:  2012-02-15 08:00-09:00 Ubuntu

LOG:   Wrote Ubuntu32Execute to run sh script and capture output in a 
       String -- need this for running 'lsb_release' to get the proper
       Ubuntu version info because it's not in /proc/...

TIME:  2012-02-15 11:30-14:30 Ubuntu

LOG:   Renamed Ubuntu32... to Linux32... and added self-check on
       StartUp if we're running in Ubuntu.
       *** What we'll do is add each "official" platform checks as we
       *** authorise the platform.  In the mean time, BEFE should run
       *** on any i386 Linux derivitive.  We should give that a go.

TIME:  2012-02-15 18:30-21:00 Ubuntu

LOG:   Added memoryPageSize setting to Linux32OperatingSystem

LOG:   Added -es and +es command lines options and Globals.CommandEnvSubst
       member to support it

TIME:  2012-02-17 00:00-02:00 Ubuntu

LOG:   Reworked -env option parsing and we now have -env, +env, and ?env

TIME:  2012-02-17 09:30-12:30 Ubuntu

FIXED: We broke !svn, etc. for running shell scripts when adding the
       "!x" option.  Hmmmm....

FIXED: Figure out why, when running from within CodeLite, it either
       doesn't find .beferc or it doesn't find t.befe when the
       command argument 't' is used.  Needs fixing -- again.  ;-)

TIME:  2012-02-17 18:00-24:00 Ubuntu

FIXED: Fixed bugette in String.Get with reverse order Spans

FIXED: There was a bugette in String.Find that gave the wrong position
       if the source string had UTF-8 in it.

DONE:  Added _InvokeCaptureOutput to Process, defaults to Error::NotImplemented
       and added wrappers in BEFEWrappers

DONE:  Added CommandShell code to add "opts " to command line if it starts
       with a '!', '?', '+', or '-'

DONE:  Added _InvokeCaptureOutput to Linux32Process.
       *** May want to move this up into Process but I'm not sure
       *** if that's a good idea for Windows because it just appends
       *** ">file" to the command and don't have proper pre-checking
       *** to make sure there's not already a ">" in it.

DONE:  We should genericise that Ubuntu32Execute so we can invoke
       'svn' from command line to get current version info for Build.

DONE:  Added a little more functionality to Integer class so we can use it
       as one other way of doing "String to Int".

DONE:  Get "svn info" giving latest revision into an SVN method and
       write the Build code to patch '$REVISION' in _src/Befe.h before
       building.

DONE:  Get Ubuntu build working and fitting nicely into same process
       as Windows build.

TIME:  2012-02-18 09:00-18:00 Ubuntu

LOG:   Revamped VarTerm incrementally by delicately making the changes in
       VarTerm2.cpp and VarTerm2.h...

LOG:   Changed String._BuildFrom(char const *) to set String to be Empty
       if non-NULL pointer and zero length -- this is better and more
       meaningful than setting it to Null

LOG:   Changed Build to to a "svn info -r HEAD" because it wasn't getting
       the latest proper revision when patching BEFE.h

LOG:   Working on VarTerm2...
       *** VarTerm2.GenerateStrings there now except for the optional
       *** ones -- will need an integer iteration

TIME:  2012-02-19 12:00-18:00 Ubuntu

LOG:   Fixed command parsing bug caused by internal buffer -- wasn't
       needed, evidently code was written before String.FirstNonBlank etc.

LOG:   Made slight adjustment to ToString(Int num, UInt len) for "NaN"

LOG:   Started VarTerm2 again, this time from complete scratch...

LOG:   Added A[ll]Rel[ease] and A[ll]Deb[ug] to CommandOS Build Options

TIME:  2012-02-20 09:00-16:00 Ubuntu

LOG:   Changed MemoryUtils.cpp to not complain when freeing stuff higher than 0x80000000

LOG:   Fixed String.Find to return NaN properly in all cases when the
       string wasn't found

LOG:   Fixed String._BuildFrom(String const &) to move it if source
       string was consumable

LOG:   Massive fixes to get TimeKeeper and GregorianDate working properly.
       It can now filter based on a date.

LOG:   Got TimeKeeper discarding dates before 2012-01-01 on. 
       *** Should add command line parameters for date ranges soon

LOG:   Doing massive refit of Windows port to start incorporating
       changes made to support Linux port... Especally along the lines
       of escape characters and native/generic paths and special
       characters.  Grrrr...

TIME:  2012-02-20 21:00-23:30 Ubuntu

LOG:   Added SVN/befe/notes directory and CodeLite notes

LOG:   Working on FileSubst utility

TIME:  2012-02-21 01:30-03:00 Ubuntu

LOG:   Almost have FileSubst working.  Not completely happy with
       speed but it'll do for now.

TIME:  2012-02-21 12:00-18:00 Ubuntu

LOG:   Adjusted Build utility to use BEFE_Temp settings and pass it
       in URL form to soffice when creating .pdf files.

LOG:   Additional comment in LibreOffice bug 45026 about Ubuntu
       behaviour.

LOG:   Changed String.Insert to insert at end if beyond end

FIXED: Fixed another glitch in String.Insert -- was switching from
       Logical to Physical indexes and was checking physical index
       against logical len to determine if to Append or not.  Doh!!!

LOG:   Finally got FileSubst utility working.  Hurrah!!!  So, now all
       references to BEF_NS are BEFE instead.  ;-)
       *** Revision: 2510

FIXED: Glitch in Linux32OperatingSystem.FileOnly...  Had slip up with
       UInt vs Int.
       *** Revision: 2510

FIXED: Fix Span("-2:").Resolve(10)... Resolves to Span(8,-1).  :-(
       *** Revision: 2510

TIME:  2012-02-22 12:00-18:30 Ubuntu

FIXED: Fixed Befe.FindConfigurationFile for weird case where
       TheProcess wasn't initialised yet

FIXED: Fixed String._LowCountAndSplit to handle case where String was Null

TODO:  Get Network info working on Linux32 -- just to show off, I guess.

NOTE:  May have to change that above Linux32Network stuff to latch
       the information in local variables and, maybe provide a 
       Network.Refresh method because there's a whole lot of bother
       required to open, read, and parse the bloody /proc/sys/kernel...
       and /proc/net/... files.
       *** Just a thought

FIXED: Fixed Linux32OperatingSystem.FileOnly to find in reverse properly

TIME:  2012-02-23 07:30-09:30 Ubuntu

DONE:  Write UTF8.Reverse and String.Reverse.
       *** Search for Range(-1,... and Span(-1... and change them to
       *** use String.Reverse

FIXED: Fixed Integer.ToString to use reverse Range instead of span to
       reverse the bytes.
       *** May want to call MemoryReverseBytes instead.  ;-)

TIME:  2012-02-23 11:30-18:30 Ubuntu

FIXED: Fix String.Reverse test failure

FIXED: Build._PatchSVNRevision isn't putting correct revision out there.

LOG:   Got Build linking with debug symbols and dicked about removing
       VarTerm2 from CommandLex

EYEON: BefeDebug being built by Build script doesn't run.  Hmmm...
       *** Keep an eye on this one because the above checkin seems
       *** to have got rid of the problem.  So, it's most likely more
       *** to do with something uninitialised in VarTerm than not.
       *** Plus, if it IS VarTerm, that should go away as soon as 
       *** we're finished with new VarTerm rewrite

LOG:   Moved ~/.beferc invokation from CommandShell.Main into
       CommandShell.Startup

DONE:  Get .beferc loading OUTSIDE of CommandShell, if called.
       *** Probably with CommandShell.ExecuteScript method...
       *** ... Not for now, put it in CommandShell.StartUp instead

DONE:  Move GetCurrentWorkingDirectory and SetCurrentWorkingDirectory
       from OperatingSystem to Process -- where it should be.  ;-)

LOG:   It was a bad idea to put "~/.beferc" in CommandShell.Startup,
       so moved into main.cpp instead.

TIME:  2012-02-24 07:00-12:30 Ubuntu

LOG:   Rejigged CommandShell.  Now has various new methods and handles
       .beferc correctly.

DONE:  Rewrite how CommandShell works. It's getting too sloppy for our
       current needs.

TIME:  2012-02-24 21:00-23:30 Ubuntu

LOG:   Preparing to rewrite VarTerm

TIME:  2012-02-25 22:00-01:00 Ubuntu

LOG:   Put 'cat' and 'type' commands into CommandOS.

LOG:   Added "String ApplyRelativePath(String const &relPath)" to
       both OperatingSystem Classand BEFEWrappers.h

TIME:  2012-02-26 11:00-17:00 ubuntu

LOG:   Tidied up some CommandShell behaviour regarding...
         1) +echo and -echo and the interplay with #!befe -echo, etc.
         2) When/if to output '\n' before displaying header
         3) Who is supposed to recognise and perform the '..' command

LOG:   New VarTerm (VarTerm2) works!!!  Ready to swap into old one...

LOG:   Got new VarTerm2 completely working!!!

DONE:  Rewrite VarTerm

TIME:  2012-02-27 11:00-18:00 Ubuntu

LOG:   Major fixes to defer memory allocation during Linux StartUp and
       recover lost memory

DONE:  Figure out why large t.txt with "MemoryAllocRaw..." in it
       counts, splits, and sorts slowly in CommandOS_Analyse.

DONE:  Figure out why large t.txt with "MemoryAllocRaw..." in it
       doesn't recognise the proper +maf lines.

DONE:  Figure out why unfreed memory when "befe +ms x!"

FIXED: 'befe +vv +test string' shows that TestSting.testLog2PhyRange
       string 13 puts rubbish in the string (as do a few after it)
       *** String.Get(Range...) with reverse range had bug

DONE:  Figure out why Linux32Console keeps outputing foreground
       color changes when stdout redirected
       *** Simply, really.  Just had to check if outputIsRedirected in
       *** SetForegroundColour and SetBackgroundColour

DONE:  Rejig Linux32 OS and Platform to defer info load so it doesn't
       have to happen in StartUp and Refresh() can be implemented.

TIME:  2012-02-28 11:00-18:00 Ubuntu

FIXED: Figure out why encpass and decpass aren't working properly

DONE:  Get OperatingSystem setting DefaultBlockSize based on OS memory
       page size -- I think that should be available in Win32 as well.
       *** Actually, changed Befe Class to do it instead by doing...
       ***   TheGlobals.DefaultBufSize = TheOS->GetMemoryPageSize()

LOG:   Read alot about /proc/... to figure out how to get device 
       info from Linux.  No progress on actually doing it though.  ;-(
 
TIME:  2012-02-29 11:00-18:00 Ubuntu

LOG:   Added String methods: FirstWhite, FirstBlank, LastWhite, and LastBlank

LOG:   Added Strings.Contains method

LOG:   Fixed up String.LeftTrim and String.RightTrim to trim String
       type Null and ASCII0..ASCII4 properly

LOG:   Got Linux32 device names and descriptions enumerating

LOG:   Got processor speed into Linux32Processor

DONE:  Get Ubuntu device list available on ?os

LOG:   Fixed bug searching for Build Publishable files

TIME:  2012-03-01 11:00-19:00 Ubuntu Research

LOG:   Spent entire day playing around with and figuring out what do
       do about nice command line input that handles home, end,
       page up, page down, up, down, left, right, etc.

LOG:   Added some more Befe wrappers (Debug, Exit, Congrats, etc.)

LOG:   Added CONSTR_SIGINT string for Linux32Console SIGINT handler

LOG:   Added Console.PutBytes(String const &str) method
       *** Not sure why this was missing

TIME:  2012-03-02 11:00-19:00 Ubuntu Signal and Console line

LOG:   New Linux32Signal.h and Linux32Signal.cpp for startup and shutdown

LOG:   Playing around with more trythis stuff

LOG:   Starting to get Win32 working again...

LOG:   Still working on getting Win32 back to speed after Linux32 changes...

TIME:  2012-03-03 12:00-20:00 Getting Win32 in synch with Linux32

LOG:   Fixed indisious bug in one of the String.Append implementations

LOG:   Win32 build all working except for "soffice..." when publishing
       documents.
       *** Stuck a "if (gShowDebug)..." in there to display command
       
TODO:  Get +a/-a, +af/-af, and +ad/-ad working on Win32

DONE:  Get SVN revision patching in Build working on Win32

DONE:  Get escape substitution working properly on Windows ports and,
       especially in command line environment variables.  
       *** We need this because of bloody Microsoft and their '\'.  Grrr...
       ***
       *** Since Win32 port builds and the tester tests okay, it seems
       *** everything okay now.

DONE:  Figure out why on Win32, Build +PubDoc doesn't work properly
       *** It was because of the LibreOffice bug (45026) I had logged...
       *** Either it doesn't work the same on Windows LibreOffice 3.5,
       *** or it behaves differently on Linux LibreOffice (?.?).
       
LOG:   Windows port now builds completely.  Almost ready for 0.3!!!

TIME:  2012-03-05 11:00-18:00 Working on Linux32xterm.cpp

LOG:   Almost got low level basics working.  Now, figure out how to
       find state of "Ins" key lock, and off we go...

TIME:  2012-03-06 03:00-06:00 Working on Linux32xterm.cpp

LOG:   Got several more things working...
         1) GetCursorPosition()
         2) GetWindowSize()
         3) GetTerminalType()
         4) Rationalised EnterRawMode/ExitRawMode

TIME:  2012-03-06 11:00-05:00 Working on Linux32xterm.cpp

LOG:   Got Linux32xterm.LoadActions and Linux32xterm.LearnKeys
       written.  So, we're almost ready to shove real code into
       Linux32xterm.GetLine to do the proper things with escape
       sequences received
       *** Theoretically all we have to do is to fill out the keys
       *** in _home/BEFE_xtermStrings.txt for the VT102 that we get
       *** by default when TERM=linux (CTRL-ALT-F1 for other terminal).

TIME:  2012-03-06 22:00-24:00 Working on Linux32xterm.cpp

LOG:   Linux32xterm.GetLine now recognising configured xterm key
       sequences.  Almost there!!!

LOG:   Changed default String Substitution stuff from "$(...)" to "${...}"
       because it's more obvious and fits quite well into the way
       the Apache2 configuration stuff works.  Hurrah!

TIME:  2012-03-07 06:00-08:30 Working on Linux32xterm.cpp

LOG:   Broke Linux32xterm.cpp into the following parts...
         - Linux32xterm.cpp
         - Linux32xtermKeys.cpp
         - Linux32xtermActions.cp

LOG:   Linux32xterm Infrastructure now ready for intense "just frigging do it"
       phase of the code...

TIME:  2012-03-07 10:30-12:30 Windows interlude

LOG:   Got compiling again, properly, in line with Linux port.

LOG:   Got Win32 platform ?platform more in line with Linux32.  Now, it
       shows "Windows.i386-32" and places BEFE first in version string.

TIME:  2012-03-08 10:00-12:00 Back on Ubuntu

LOG:   Got Linux32xterm and trythis working again under Ubuntu. Next
       step is to write the xterm action code...

TIME:  2012-03-09 08:00-24:00 Bloody Microsoft...

LOG:   Something screwed with the boot sector or something and I couldn't
       log onto Windows 7 on the new Acer laptop.
       *** I figured it was something Windows updated automatically
       *** and, as they do, really screwed it up since it's a dual
       *** boot machine.

       So, I tried getting on Ubuntu, backed important stuff up onto
       the terabyte USB disk and tried restoring Windows February
       backup stored on USB disk.  That restored but Windows wouldn't
       boot. Then, that screwed up Ubuntu and THAT wouldn't boot either.
       BUGGER BUGGER BUGGER...

LOG:   So, I spent most of the day getting my bloody old Acer Vista machine
       back up and running.  It was touch and go...

TIME:  2012-03-10 00:00-06:00 Bloody Microsoft...

LOG:   Finally got the Vista Acer running again and working.  Then, I
       figured out how to create an Ubuntu bootable USB using my
       8gb Sandisk USB stick. 
       *** The real problem was not only was Vista slow but the bloody
       *** CD drive doesn't work on it so I HAD TO create a bootable USB
       *** stick to get the new Acer up and running again.

TIME:  2012-03-10 11:00-24:00 Ubuntu is more reasonable than M$...

LOG:   Finally got a new Ubuntu 11.10 running and set up in a separate
       partition, got everything installed on it again and all my Ubuntu
       settings back where they should be.

TODO:  Figure out how to repair the Windows 7 installation on the Acer
       partition on the new Drive without screwing up Ubuntu.
       *** For now, we'll stick to Ubuntu until finished with BEFE-0.3,
       *** and use the Vista laptop to build on Windows.

NOTE:  Used RabbitVCS instead of that naff Python stuff.  It's quite
       cool...  Almost the same as TortoiseSVN on Windows.  Neat!!!

TIME:  2012-03-11 00:00-01:30 Ubuntu...

LOG:   Finally figured out how to keep Acer USB drive mounted on logon
       for Dropbox so that Dropbox won't get its knickers in a twist
       every time I reboot.

       *** At this point in time I don't want to risk dicking about
       *** with fstab, etc.  So, Just make DropBox not automatically
       *** start on Logon and have to manually click on Acer in
       *** nautilus before running DropBox.  That'll do for now.

       *** Did it...
       ***   sudo apt-get install pysdm
       ***   sudo pysdm
       ***   ...configure the NTFS partition ...
       ***      (Basically, /dev/sda3 mounts at /media/Acer)
       *** It's quite easy ***

TIME:  2012-03-11 06:00-11:30 Ubuntu...

LOG:   Fixed bugette in VarTerm.Match methods...  Was returning 'true'
       when it should have been returning 'false'.

LOG:   Added SVN/bferris/scripts/linux and SVN/bferris/scripts/win32
       for saving normal development tool scripts on the various
       ports.

LOG:   Got Linux32xterm starting to position at cursor properly and
       tested it with trythis.cpp case 0

TIME:  2012-03-11 14:00-19:00 Ubuntu...

LOG:   Got Linux32xterm stuff completely plugged into Linux32Console.
       This includes the +CT[erm[inal]], etc. switches and appropriate
       settings/displaying everywhere.
       *** Now, to get it handling the bloody arrow keys and history...

LOG:   Split Linux32xterm stuff into a few more source files because
       it was getting to much to read in one place.

LOG:   It seems we're going to have to rethink how we handle the input
       versus output processing of characters.  Need to look into
       how other people do it.  Not really sure it's worth it for now.
       *** Defaulted globals to "-cterm" so it won't go into Linux32xterm
       *** mode on startup.

LOG:   Fixed little bugette in Linux build...  It was leaving a .tar
       hanging around in the SVN/c++/_home.

LOG:   Changed Build to make <target>.map in _bin so we can make sure
       we're not linking with static libraries.

TIME:  2012-03-12 04:00-05:00 Ubuntu...

LOG:   Added Callback Registry to BEFE in preparation of separating
       Linux32xterm from dependencies...  It'll be up to main() to
       register a "BEFE.Console.GetLine" callback and do the correct
       stuff if it really wants proper command line handling.

TIME:  2012-03-12 07:00-09:00 Ubuntu...

LOG:   Completed filling out "BEFE.Console.GetLine" callback and plugging
       it in everywhere to test in trythis.

LOG:   Plugged Linux32xterm into trythis and it calls it now.  Now, to
       get the bloody thing working.
       *** Note: May want to try out an ncurses one as well, now that
       ***       the dependency won't be hard-coded into BEFE.  ;-)

TIME:  2012-03-12 14:00-18:00 Ubuntu...

LOG:   Linux32xterm coming along nicely, finally!  Now, it's more a
       case of plugging away at the keys I want, one by one, and
       implementing them whichever way fits.

TIME:  2012-03-14 12:00-15:00 Ubuntu...

LOG:   More work on Linux32xterm.  Fixed minor bug that was screwing
       up everything in Linux32xterm...  '[' was configured to be
       "end of escape sequence" when it's clearly not.

LOG:   Got Linux32xterm BS, Left, Right, and Del working properly.

TIME:  2012-03-14 19:00-22:00 Ubuntu...

LOG:   Hurrah! Printable keys, BS, Del, Ins, Home, End, Left, and Right
       all working.  Bug with typing in middle of string though...

LOG:   Right, got inserting in middle of string now working exactly
       like it does in /bin/bash.
       *** Except, of course, for multi-line input...

LOG:   On BEFE_PortLinux, plugged Linux32xterm into main.cpp

LOG:   Tweeked help and CommandArgs to accept +t and -t as shortened
       versions of +test and -test.

LOG:   Moved Linux32xterm registration out of main, where it appeared
       rather confusing and put it into CommandShell instead -- where
       it makes much more sense.

TIME:  2012-03-16 11:00-17:00 Ubuntu...

LOG:   Having a hard time tracking down a really weird GPF...
       It seems that 'befe-dev' (built by Codelite) works fine, but 
       'Befe' and 'BefeDebug' fail with a GPF.

       Have tracked it down to Linux32xterm.Startup, line 51 which
       sets the Linux32xterm.esc member.  This blows TheBefe->TheConsole.deferTo
       for some odd reason.  It's almost like the CommandShell instance
       isn't the correct size.  ;-(

       And, it turns out that even though we're using the same compile
       switches, the debug objects produced by Codelite are a different
       size to the ones produced by g++ under the 'build' script which
       uses befe-dev.

       So, next I have to track down which g++ executable Codelite is
       running, because it may just be a bug introduced by a different
       version of g++.

       Getting more and more frustrating.  One hell of a bug though!

TIME:  2012-03-17 11:00-16:00 Ubuntu...

LOG:   Whew! Found it, silly me...
       *** The "bug" was I'd forgot to put "-DBEFE_PortLinux" in when
       *** compiling the executable (see TODO below), so the CommandShell
       *** local variable in main.cpp was shorter in memory than it
       *** should have been.  Jesus!!!

LOG:   Added +c[beep] and -cb[eep] options in globals and implemented
       in Linux32xterm

LOG:   Fixed String.FirstNonWhite to return Null if not found

LOG:   Worked on maintaining Linux32xterm line history in preparation
       for Up and Down actions.

TIME:  2012-03-17 19:00-24:00 Ubuntu...

LOG:   Getting linux scripting sorted out in my head, including...
         o Use #!/usr/bin/python for Python scripts
         o Added BEFE_SVN and BEFE_Build to .bashrc
         o Added $BEFE_SVN/scripts/linux/publish to create /usr/bin/befe
             based on what we want 'befe' to run

DONE:  Figure out how to optionally include Linux32xterm in main via
       BEFE.h without having to do a "-DBEFE_PortLinux" in the g++
       command line.

       *** Investigate whether or not we can use the port #define
       *** (if any) available in g++/gcc as standard.
       ***
       *** May have to allocate N bytes as "reserved" in CommandShell.h
       *** and then frig about with it if we're Linux at runtime.
       ***
       *** This will take some cogitating.  It just goes to show why
       *** the C preprocessor is such a bad idea, like we always knew.
       ***
       *** Maybe we should just suffer and put Linux32xterm into
       *** Linux32Console and have it done with.  Hmmm...

       Decided it was quite simple... I added a Port.h header file
       in platform/linux and changed Primitives.h to include that.
       That way we'll have, for each target Port, simply replace
       the header file with the proper one at build time and, at
       development time, we'll not include the ones for the port's
       we're NOT working on.

       *** Note: This means, of course, we've broken the Windows
       ***       build but we'll burn that bridge when we get to it.

TIME:  2012-03-19 08:00-16:30 Ubuntu...

LOG:   Linux32xterm history working, now for multi-line lines...

DONE:  Get Console.GetLine() written and working on both platforms.
       *** It's all in Linux32xterm
       ***
       *** Note: Still have to get it going on Win32 port
   
FIXED: Buggette in String.Unescape, if inStr was Empty, it returned
       Null outStr.  WRONG!!!!

LOG:   Got cursor positioned correctly and scrolling one line after
       entering last char in line row.

LOG:   Linux32xterm seems to be working with line wrap now except for
       the Left, Right, Home, End, and BS keys.

LOG:   Linux32xterm seems to be ALL working with line wrap now.

LOG:   Added Globals.ConsoleHistory and _GlobalMacros.h gConsoleHistory
       and implemented in Linux32xterm.

DONE:  Figure out how to get Skype starting on Ubuntu Logon.
       *** Turns out you have to run "gnome-session-properties&" and
       *** put 'skype' in the command.  
       *** Note: If timing problems, use 'bash -c "sleep 10 && skype"' instead
       *** Note: Make sure and minimise it when you're done and it should
       ***       startup in the system tray thereafter

TIME:  2012-03-19 18:00-20:00 Ubuntu...

DONE:  Make OperatingSystem.Rename expecing either full path or file
       name only in new name.
       *** Did it for Linux32, now for Windows...

TIME:  2012-03-20 10:00-18:00 Windows...

LOG:   Had to change CryptKey.key_0 to be Byte key_0[sizeof(UUID)]
       instead of a UUID, because different versions of g++ allow, or
       not, classes with Constructor/Assignment operators as members
       of a union.  I can sort of see their point but what a pain!

LOG:   Windows build works now, except for the ZIP part of the build.

LOG:   Win32File.Rename almost working like the Linux one.

TIME:  2012-03-20 20:00-22:00 Windows...

DONE:  Make OperatingSystem.Rename expecting either full path or file
       name only in new name.
       *** BOTH Platforms!!!

DONE:  Linux: Enter a command, Left arrow to somewhere, Press Ins
       a couple of times, type.  Only shows blanks.  Do an Up and a Down,
       and then you'll see the right stuff -- Refresh problem?
       *** Problem was we didn't doa "RefreshLine()" after Ins.

TIME:  2012-03-21 07:00-12:00 Windows...

DONE:  Win32: Build SVNPatch doesn't work
       *** The problem was NOT in BEFE, it because command line svn
       *** utility (D:\program files\sliksvn\svn.exe) was version 1.6
       *** but TortoiseSVN was version 1.7 and they're not compatible!!!
       *** So, instead of getting proper output from SVN, it simply
       *** said "seems to be version 1.7".  All I did was to upgrade it.
       
DONE:  Win32: Build Zip doesn't work
       *** Had to get Info-Zip downloaded from web (NOT SourceForce, 
       ***   see ${BEFE_SVN}/befe/notes/BuildWindows.txt instead
       *** Plus, a couple of fixes to BuildZip.cpp
       
TIME:  2012-03-21 17:00-20:00 Windows...

LOG:   Worked more on Win32Console. Got it to the point where we're
       ready to plug in a Win32xterm (or whatever).
       
TIME:  2012-03-21 22:00-00:00 Windows...

LOG:   Started Getting Windows 7 restored from Acer Recovery software

TIME:  2012-03-22 00:00-07:00 Windows...

LOG:   Continued Getting Windows 7 restored from Acer Recovery software

LOG:   Hurrah!!!  @04:00 It's working!!!
LOG:   Created Acer recovery DVDs, three of them...
         Recovery1
		     Recovery2
		     Recovery3

TIME:  2012-03-22 10:00-17:00 Windows...

LOG:   Restoring (re-installing) all the apps I need.  This time
       taking notes intend on putting the notes into SVN.
	   
LOG:   Got Windows BEFE all built using CodeLite.  Hurrah, because that
       means we're back where we were a few days ago!

TIME:  2012-03-23 10:00-18:00 Windows...

LOG:   Had a play trying to get the Kernel function GetConsoleScreenBufferInfoEx
       manually loaded (it's not in MinGW), but no luck.  So, backed
       off the calls but left the code there.	   
	     *** Was doing this because they way we do GetConsoleScreenBufferInfo
	     *** to get/set the colours doesn't work properly on Windows
	     *** PowerShell and I suspect it's to do with colour depth.

TIME:  2012-03-25 06:00-07:00 Windows...

LOG:   Almost got Win32Console interfacing with minimal Win32xterm 
       (it's broken at the moment though)

TIME:  2012-03-26 08:00-10:30 Windows...

LOG:   Installed and played with Sqlite3.  Jeez, it's teeny!

TIME:  2012-03-26 14:00-18:00 Windows...
       
LOG:   Sorted some insignificant things out AND got Win32xterm in a
       position to actually handle each of the Left, Right, Up, Down,
       Home, End, etc. keys, including Win32xterm.GetCursorPosition,
       Win32xterm.ClearScreen, etc.

DONE:  Get BuildFiles copying Port.h from platform directory.
       *** Was simply add a line to ${BEFE_SVN}/c++/port/win32/Port.h
       *** to publish it in "inc"       
       
DONE:  Linux: Get saving/restoring proper console colours based on
       colour settings.
       *** May just have to stick Linux32xterm into Linux32Console.
       ***
       **** Not exactly sure what this was, so it's history.
       
DONE:  Linux: Shove ~/play stuff into SVN/play or SVN/c++/_examples.
       *** Got script and play stuff where we want it now in Win32
       
DONE:  Tidyup BEFE Header...
         1) If +cutf, add one more char to header line
         2) If -cutf, add three more chars to header line
       *** Don't know where this one came from, possibly a stray cosmic ray?
       
TIME:  2012-03-27 05:00-06:30 Windows...

LOG:   Getting there on Win32xterm, almost finished.

TIME:  2012-03-27 08:00-18:00 Windows...

LOG:   Win32xterm almost working.  Still glitches if multiple lines.

DONE:  Win32: Get console keys (Up, Down, Left, Right, Home, End, etc.)
       working like they do on Linux.  Probably make a Win32xterm not
       because it needs to be separate, it's just that we want to start
       thinking about a "Terminal" Class for when porting to Android, 
       and Mobile device (like my bloody Nokia N97).
       *** Seems to work okay but we'll have to keep an eye on it for
       *** a while yet, especially when BS at beginning of 2nd line in
       *** wrapped lines

LOG:   Threw 'Ins' and 'Del' actions into Win32xterm
       
DONE:  Ensure all low level OS and File methods are passed Full Path
       or, at least, expect a Full Path because it's a separate job to
       resolve partial paths and doesn't belong all over the place
       across platforms.
       *** Make sure we haven't broken Win32 stuff by making these
       *** full path changes in the Ubuntu32 platform code

DONE:  Put "NotConsumable()" in all MoveFrom methods regardless of whether
       this == that.
       *** May need to tighten up on what to do about Consumable in CopyFrom
       *** as well -- Still haven't sorted that out completely in my head yet.
       ***
       *** I guess this is because I can't quite explain why NotConsumable
       *** is in "operator =" but NOT in CopyFrom -- there's a subtle reason
       *** for that so maybe we need to add Assign() to BEFE Lifecycle?

TIME:  2012-03-28 09:00-13:30 Windows...

DONE:  Do official 0.3 release with Ubuntu, as soon as possible after 0.2

LOG:   Rejigged SVN directory by moving c++ to BEFE-Core.

LOG:   Changed Win32xterm.h so it would get published in Build
       (CommandShell.h currently uses it)

LOG:   Got minimal BEFE-Lex SVN directory setup and main.cpp working.

TIME:  2012-03-28 16:00-23:30 Lex...

LOG:   Started getting Lex and related Structs arranged in their
       skeletal form in SVN/BEFE-Lex, using BEFE-0.4 library.
       *** This will give is separation from BEFE-Core and see how it
       *** goes producing stuff that is separate but compatible.
       
LOG:   Added Application Identification support to the BEFE Class and
       plugged it into BEFE-Lex -- It comes out in the header now.
       
LOG:   Got beginnings of Lex skeleton written with Cache member.

LOG:   Got ULX (BEFE-Lex) messages plugged into BEFE-Core

LOG:   Plugged BEFE Version, SubVersion, and Revision into BEFE-Lex

TIME:  2012-03-29 04:30-05:30 Lex...

LOG:   Removed Lex and LexStream from BEFE Namespace so we could reuse
       LexStream et cetera without bothering current stuff in BEFE.
       
LOG:   Got rudimentary Lex<->LexStream Attachment written.

TIME:  2012-03-29 09:00-12:00 Lex...

LOG:   Got LexLanguage Class working and validating properly.

TIME:  2012-03-29 13:00-16:00 Lex...

LOG:   Decided that comments need to be handled by language specific
       LexFilter specifications, separate from basic LexLanguage
       operation.
       
LOG:   Got Lex starting to work with LexStreams and LexLanguage(s).

TIME:  2012-03-30 10:00-18:00 Lex...

LOG:   Updated BEFE-Introduction.odt to reflect BEFE-0.3, and published
       the .pdf on BEFE website.
       
NOTE:  Not sure why, but Simon said it was asking him to logon to
       Google+ to get at the introduction document.  So, I downloaded
       Safari, to be "free of cookies etc.", went there, and had no
       problem reading it -- and it didn't ask for any logon.
       
       So, I haven't got a clue why Simon had a problem.  Maybe some
       setting in his browser?

LOG:   Separated LexStream.cpp stuff into LexStream.cpp, LexStreamLex.cpp,
       and LexStreamBuf.cpp to separate the methods into reasonably
       sized source files.
       *** I remember the bother we had with all those huge source
       *** files in the String class before separating them!!! ;-)

LOG:   Added IsNull/IsEmpty functionality to Span and implemented the
       appropriate BEFE Namespace macros for BEFE Lifecycle calls.
       
LOG:   Frigged about with various things in Lex declarations, including
       adding LexToken::Type enum instead of LexTokenType enum.  It
       actually cleans the code up some.
       
LOG:   Got LexStream.blkSize being populated/Nulled during Attach/Detach.

LOG:   Decided to make LexStream use MemoryAllocRaw/MemoryFreeRaw
       instead of Bytes.  Makes it cleaner and looks better.
       
DONE:  Need to get VarTerm.h publishing in build inc directory.
       And, while we're at it, it needs to come out of TestLexicon and
       into some Core test instead because we moved it to core.
       *** Whoops, I was looking in C:/BEFE/Builds/BEFE-0.3/inc instead
       *** of C:/BEFE/Builds/BEFE-0.4/inc where it was.  Silly me.
       
TIME:  2012-03-31 09:00-15:30 Lex...

LOG:   Major thinking and reorganising of Lex in progress.  Think it's
       starting to shape into something reasonable comprehensive now.
       *** But, only time will tell.  ;-)

LOG:   Added isDirty and isValid flags to LexLanguage to keep from 
       having to do lots of work all the time in IsValid and Validate.
       
TIME:  2012-03-31 18:00-21:30 Lex...

LOG:   Rejigged Lex.h and got LexState primitive Struct starting to
       work.  ;-)
       
TIME:  2012-03-31 23:30-00:30 Lex...

LOG:   Messed about with ToStrings(Byte *, UInt len...) so it would
       output proper meaningful UTF-8 symbol in hex memory dump.

TIME:  2012-04-01 08:00-14:00 Lex...

LOG:   Fixed slight glitch in BEFE Lifecycle standalone methods for String

LOG:   Made LexState, LexLanguage, and LexAction more righteous...
       Both LexState and LexAction have names now, and we'll turn
       LexLanguage into a "State Transition Table maker", preparing
       for fast processing in LexStream.

LOG:   Got Id and Name in appropriate places in Lex Structs/Classes.

TIME:  2012-04-01 16:00-19:00 Lex...

LOG:   Lots of rethinking and DOING at the same time, sort of on a
       "touchy feely" basis.  One distinct issue is what to do about
       "many error/validation errors?"

LOG:   Playing with rejigging LexLanguage re Validation.  Moved stuff
       from Member Get/Set methods into Validate.  We'll see how it goes.

LOG:   Also playing with the idea of how to embed runtime data into
       reported error messages.  Haven't quite got it right just yet...
       
TIME:  2012-04-02 05:00-06:00 Lex...

LOG:   Got LexActions in place and got LexLanguage error messages
       sorted out properly (for now).

TIME:  2012-04-02 09:00-18:30 Lex...

LOG:   Reseached who Susan Shumsky is and tried to imagine why she
       started following BEFE on Twitter.  Evidently she follows
       49000 or so Twitter users and is followed by around roughly
       the same amount.  So, Twitter is keeping some kind of weird
       connection database for her because no sane person could
       possibly "follow" that many twitter users without automation.
       
LOG:   Asked bferris57 Facebook GEEKS what they thought about
       Discriminated Unions.

LOG:   Got LexLanguage.Validate working properly, and LexLanguag.Generate
       starting to populate the first LexState 'Main'.

DONE:  Write "String string.Escape()" form of escape method.
       *** It was already there, I got confused...
       *** It was String.Substitute that we haven't got a proper method for

LOG:   Started populating default Lex.states and lex.actions.

LOG:   Pretty Much have default states and actions set up now.
       
TIME:  2012-04-02 20:00-22:30 Lex...

LOG:   Lex: Displaying all actions now if '+debug +vv'

TIME:  2012-04-03 09:00-15:30 BEFE...

DONE:  BEFE: Need to write Ids as a ArrayValue<Id> and get a Sort() 
       method for it.  Lex won't be the first class that passes around
       an array of Ids and wants them sorted.
       
TIME:  2012-04-04 04:00-04:30 BEFE...

LOG:   LexLanguage: Added quoteChars to LexLanguage in preparation for building
       proper initial states and actions.

TIME:  2012-04-04 09:00-17:30 LEX...

LOG:   Started rejigging LexLanguage.Generate but fighting with some
       kind of GPF I can't quite pin down...
       *** It SEEMS to be in RebuildIndexes but haven't quite got it yet.
       
DONE:  LexLanguage: Need to add LexLanguage GetActionIds() and
       GetAction(Id pId)

DONE:  Lex App: Need to get '+debug +vv' displaying all states just
       like it goes Actions
       
TIME:  2012-04-04 20:00-23:30 BEFE & LEX...

LOG:   BEFE: Did a MAJOR revamp of Map and Map templates to make Keys UInts
       instead of Ints.
       *** This is important when dealing with the Null value.
       *** Not, of course, from the implementation point of view but
       *** when we're dealing with Ids as the index, it makes being
       *** the caller of these methods have to do all kinds of
       *** dangerous castings to specify (Int) or (UInt).  This should
       *** help clear up that problem.  ;-)
       
LOG:   BEFE: Changed Id to NOT want to have anything to do with Int types
       at all.  Because, an Id is formally "unsigned" now, as it should be.

LOG:   Lex App: Still have that horrid GPF but we're getting closer now.
       *** It seems to be in LexLanguage.RebuildIndex in the Action
       *** indexes when it calls actionId2Name.Set(...) when i == 14.
       
TIME:  2012-04-05 09:00-14:30 BEFE & LEX...

LOG:   BEFE: Found it!  The GPF was caused by IntMapPrimitive<T>.Clear
       calling sparse.Reset(), calling sparse.StartUp() without
       calling _SetMapInfo(...), so sparse.elmSize was getting set
       to zero.  Subsequent Appends, etc. were trying to manipulate
       zero sized elements.  Whoopsy!!!!
       
LOG:   Separated LexLangCpp function into LexLangCpp.cpp because we
       need a few more support functions to make it clear what we're
       doing, and why.
       
TIME:  2012-04-06 08:00-15:00 LEX...

LOG:   Worked on getting C++ States and Actions populated

LOG:   Hurrah! It's now generating all the LexStates required to 
       process the multi-Byte operators.  Now it's just about time
       to write the code that processes the input bytes.

NOTE:  Daddy died tonight.  We think it was on late on Good Friday.
       Somehow fitting and I'll miss him a lot.
       
TIME:  2012-04-07 09:00-12:00 LEX...
       
LOG:   Fixed glitch in String._FindCharLow special case of searching
       forward and ASCII.
       
LOG:   ALL States and Actions now populated for C++ properly.  Time to
       move on to plugging the stuff into LexStream and getting a C++
       stream working.  Hurrah!...
       
TIME:  2012-04-08 09:00-12:00 LEX...

LOG:   Patched up LexStream to contain a LexLanguage, added isNull and
       isConsumable flags, and reworked CopyFrom.
       
LOG:   All C++ Action Handlers plugged in now.  Ready to write the
       LexStream code to do the actual parsing.

TIME:  2012-04-09 09:00-12:00 LEX...

LOG:   Added LexLanguage.GetActionHandler method

LOG:   Added Name state and populated it correctly.

LOG:   Lots of LexStream and various other cleanup preparing for
       finishing LexStream REAL TOKEN CODE.
       
LOG:   Only two LexStream methods left to write...
         o _PopulateBuffer
         o NextToken

TIME:  2012-04-10 06:00-08:00 LEX...

NOTE:  Whoopsy, got mixed up on dates because I did an SVN commit
       on the 10th for work done on the 9th (weird working hours!)
       
LOG:   Ready to start debugging LexStream.NextToken

TIME:  2012-04-10 09:00-16:00 LEX...

LOG:   LEX: Fixed mixup in LexLanguage::LexLanguage(LexLanguage const &)
       where it was calling ShutDown instead of Startup and CopyFrom.
       
LOG:   BEFE: Fixed Cache.GetInfo to properly set blockSize even if the
       Cache was "Null".

LOG:   BEFE: Cache.LoadFileBlock wasn't setting the Buffer's UsedBytes
       when it loaded the block.
       
LOG:   LEX/BEFE: Working on a weird one where LexLanguage.NewState adds
       LexState "Op=" to LexLanguage.stateName2Id, but when it comes
       time to find it in LexStream.NextToken, it doesn't find it.
       *** The Hashes seem to be the same both times
       *** The Map LexLanguage.stateName2Id is bigger the 2nd time but
       ***   that's because it's not the last state added
       *** LexLanguage.CopyFrom seems to copy LexLanguage.stateName2Id
       ***   intact, so that's probably not it.
       *** Hmmmm....

NOTE:  "Reading Geek Night" was great.  It was two philosophically
       different approaches so what I consider the "driving motivation"...
       The first...
       "Immigrant Geeks", or whatever.

TIME:  2012-04-12 08:00-12:30 LEX...

LOG:   BEFE: Fixed bug in _MapBase.CopyFrom where it wasn't incrementing
       the srcKey pointer, so the copy was wrong.

LOG:   LEX: LexStream.NextToken is starting to work.  Still some
       fundamental wrinkles that need ironing out but it's looking
       good so far.
       
TIME:  2012-04-13 07:30-10:30 LEX...

LOG:   LEX: Getting through the first block now.  Have to rejig how
       we handle the 2nd one now...
       
LOG:   LEX: Processing whole file now, trying out multiple files...

TIME:  2012-04-13 12:00-13:30 LEX...

LOG:   Fixed Cache...  Wasn't removing CacheFile from the used chain
       when Cache.StopCacheFile was called.

LOG:   Hurrah, LEX processed 306 BEFE source files in 1.5 seconds.
       Time to take a breather before getting back on with it.
 
LOG:   Removed startLine and numLines from LexToken because they're
       not needed.
       
TIME:  2012-04-13 18:00-21:00 BEFE...

LOG:   Rejigged Win32xterm for multiple lines.

LOG:   Win32xterm starting to work again, this time with proper scrolling.
       *** Not quite there yet though, as BS doesn't work yet...

DONE:  Write Win32xterm.ScrollOne

LOG:   Win32xterm pretty much working now except for some history cases.

DONE:  Need to tweek Win32xterm so it a) doesn't do a RedrawLine()
       when we're doing stuff at the end and b) doesn't output
       '\r\n' unless where required, so we don't get the extra
       jump at the bottom when entering a line.

DONE:  Get Win32xterm.cpp handling the "region of refreshability" demanded
       by allowing mult-line (with wrap) commands.  So, if an "old line"
       suddenly means scrolling in order to display it because it's multiple
       line, HANDLE IT!!!
       
LOG:   Win32xterm now working correctly with history and wrapping.

TIME:  2012-04-15 10:00-14:00 LEX...
       
DONE:  Figure out where missing memory has gone in LEX "lex -vv -debug +mas"
       shows 16400 bytes, 3 blocks.  Should be 16 bytes, 1 block.
       *** Probably two Lex buffers, perhaps?
       *** Now it shows 2 blocks but I can't yet figure out where that
       *** rogue 8200 byte block (8196+4) is going missing quite yet.
       ***
       *** Nope, there was a mixup in LexStream between StartParsing
       *** and _AllocateBuf.  Got it sorted.

LOG:   Got Comments plugged into LexLanguage.
       
DONE:  LEX: Get '#' and '//' working as configurable EolComments

DONE:  LEX: Get '/*...*/' working as MultiLineComment

TIME:  2012-04-15 18:00-01:30 LEX...

DONE:  LEX C++: Plug in LexToken.Quote and LexToken.Comment action handlers
       into LexLangCpp
       
DONE:  LEX: Got Single and double quote states and action handler
       pretty much working, except for handling embedded '\'.
       
LOG:   LEX: Did more work on '//..', '/*...*/', and '#...'

TIME:  2012-04-16 03:00-09:00 LEX...

DONE:  LEX: Get LexToken.EndOfLine action working properly.  It doesn't
       switch properly back to the Unknown state.
       
DONE:  LEX C++: Get '\' handlers/states for inside StringLiteral tokens

DONE:  LEX C++: Get UTF handlers/state for inside AND outside StringLiterals

DONE:  LEX C++: Put final touches on "/*...*/" with separate state and
       actions.

NOTE:  WOW!!!  If I comment out the "lineOffsets.Append..." in
       LexStream.NextToken, we've moved from 1.5 seconds to 1.1 seconds
       for 306 BEFE source files.  Hurrah!!!
       *** Not just that, "big.xml" (which is 11MB of XML), back in
       *** 2002 took 19 seconds to do equivalent lexical parsing, now
       *** it's down to 4 seconds.  Not bad for an 11MB XML file, eh?
       *** Especially since XMLSpy took several minutes to load the
       *** bloody thing.  ;-)
       
DONE:  LEX: Find newly introduced memory leaks.
       *** Seems to be LexState driven (probably from LexLangCpp)
       *** Nope, LexLanguage.ShutDown wasn't cleaning everything up.
       
DONE:  LEX C++: Make sure UTF-8 in StringLiterals and CharLiterals
       works up to snuff.

DONE:  Lex: Get String Literals working.

LOG:   Added LexStream.GetInputFileSize method for parsing statistics
     
DONE:  A couple of minor glitches in Win32xterm regarding Left, Right,
       BS, and typing.  Shows some weird stuff sometimes.
       *** It was simply a redraw bug in Win32xterm.DoKey
       
TIME:  2012-04-18 05:00-06:00 LEX and BEFE...

LOG:   BEFE: Added Cache._GetBlockPointer for transient cache block pointer

LOG:   LEX: Added LexStream.CountInputFileLines() to count input lines.

LOG:   LEX: Added total file count to processing stats

TIME:  2012-04-21 03:00-10:00 LEX...

LOG:   Turning LexStream into externalising default actions instead of
       doing it all in a switch.

LOG:   Revamped main loop in LexStream.  Now ALL actions are dispatched
       through handlers.  Only slightly degrades performance but
       separates cleanly in preparation for other languages.
       
TIME:  2012-04-22 01:00-04:00 BEFE and LEX...

LOG:   Added +vvv and -vvv options to BEFE

LOG:   Added GetInputSpan methods to LexStream and we now display
       token values in Lex main. 
       *** a) √ It sShouldn't display whitespace and newline tokens though
       *** b) √ Plus, '//' comment tokens are screwed up
       *** c) Plus, it gets screwed up after 4096 (ish)

LOG:   BEFE: Added String.Escape parameter Boolean escSpace to flag if
       we're supposed to output ' ' or '\ '
       
TIME:  2012-04-23 02:00-03:00 LEX...

LOG:   LexLangCpp: Fixed problems with comments

LOG:   LexStream: Was having problems when multiple blocks.

TIME:  2012-04-24 00:00-02:00 LEX...

LOG:   LEX: Still tweeking, almost there but not quite...

TIME:  2012-04-24 14:00-15:00 LEX...

LOG:   LEX: C++ Pretty much working now.

TIME:  2012-04-25 08:00-10:00 LEX...

LOG:   LEX: Moved main.cpp Lexicon() code into TestLexicon.cpp

TIME:  2012-04-25 02:00-07:00 LEX...

LOG:   LEX: Implemented skeletal LexWorkspace

TIME:  2012-04-29 08:00-15:00 LEX...

LOG:   LEX:  Started implementing LexWorkspace
LOG:   LEX:  Started implementing LexWsHead
LOG:   BEFE: Added ShortReverseBytes to IntFuncs
LOG:   BEFE: Got Cache both reading AND writing now
LOG:   LEX:  LexWorkspace now creating skeletal LXWS file

TIME:  2012-04-30 05:30-12:00 LEX...

LOG:   LEX: Rejigged LexWs.h - added LexWsBlob, LexWsFile, and LexWsString

TIME:  2012-05-01 07:30-10:00 LEX...

LOG:   LEX: Added skeletal Blob methods to LexWorkspace

TIME:  2012-05-01 13:00-14:30 Linux...

LOG:   Linux: Got Linux build working again.  Actually, it was more
       a configuration problem than a coding problem since we rejigged
       the SVN directory structure.

TIME:  2012-05-02 09:00-16:30 BEFE...

LOG:   Windows: Changed build.cmd to do a full build

LOG:   BEFE: Added "Cache TheCache" to Befe Class and put additional
       Wrappers for Cache methods in BEFEWrappers.

LOG:   BEFE: Got Windows full build working correctly in lead-up for
       sending the current code to Dirck.

LOG:   BEFE: Added 'svn' option to CommandOSBuild.cpp and patched up
       various/Build* to handle case where -svn is set and SVN.EXE or
	   SOFFICE.EXE are not found.  So now, Dirck should be able to use
	   Befe.exe to build itself from the semi-delivered source without
	   having SVN or SOFFICE.

LOG:   BEFE: Fixed Cache to properly default blockSize everywhere it
       was needed (like Cache.GetBlockSize, etc.)
	   
LOG:   LEX: Got rid of Lex.cache and changed everything to use either
       the BEFEWrappers for Cache stuff or TheBefe->TheCache instead.
	   
LOG:   BEFE: Made VarTerm test a  separate class instead of in TestLexicon.

LOG:   LEX: Removed TestLexicon.testVarTerm() because it's no longer neeed

LOG:   LEX: Added SVN/scripts/win32/buildLex.cmd

LOG:   LEX: Changed default actions to populate LexStream.curTok.value up
       to 4 characters in all cases, regardless of type.  This caused
	   it to slightly slow down for 307 files (from 1s400ms to 1s490ms).
	   
TIME:  2012-05-03 15:00-22:00 BEFE and Lex...

LOG:   Started documenting LexWorkspace file structure in header files
       to help clarify it in my own mind.
	   
LOG:   Went over BEFE delivery with Dirck

TIME:  2012-05-04 09:00-??:?? BEFE and Lex...

LOG:   BEFE: Formalised Id to be "typedef class Id32 Id;"

TIME:  2012-05-04 13:00-18:00 Lex...

LOG:   Some slow but needed work on LexWorkspace and LexWsBlockHead.

TIME:  2012-05-04 23:00-01:30 Lex...

LOG:   LEX: Finished LexWorkspace.NewFileBlock, but not tested yet.

LOG:   BEFE: Added Cache._SetBlockIsDirty method for manual block updates

TIME:  2012-05-05 03:00-04:30 Lex...

LOG:   BEFE: Wrote Cache._SetBlockIsDirty method

LOG:   LEX: Ready to test LexWorkspace NewFileBlock and FreeFileBlock
       methods.  Will need to write Cache.AppendFileBlocks first though.
	   
TIME:  2012-05-05 05:30-09:00 Lex...

LOG:   BEFE: Wrote Cache.AppendFileBlocks.

LOG:   BEFE: Implemented some of the Cache Flushing methods.

LOG:   LEX: LexWorkspace NewFileBlock and FreeFileBlock work now.

LOG:   LEX: Working on LexWorkspaceBlob

TIME:  2012-05-05 11:30-18:00 BEFE and Lex...

LOG:   Built BEFEGui directory in SVN and populated it with a Windows
       example WinMain.  Okay, the example worked but what a tedious
	   load of platform specific stuff and nonsense.  No wonder I've
	   stayed away from GUI so far.  ;-)
	   *** Methinks that, in this "age of science", it's getting to the
	   *** point that we're inventing "mythology and magic" known to
	   *** "only the few", sort of like before science became rigorous.
	   *** What a load of rubbish the IT industry has worked itself into.
	   ***
	   *** Maybe somehow caused by the "money vs science" dichotomy.  Hmmm...
	   *** It's almost like a case of literal "money madness" where stuff
	   *** like the US patent laws, and such, actually mythologise
	   *** stuff.  "Computer Science" is NOT a Science, at least in practice.
	   
LOG:   BEFE: Fixed Cache.LoadFileBlock, was re-reading blocks if they
       were already found in cache.
	   
LOG:   BEFE: More work on LexWorkspace Blobs implementation.

LOG:   LEX: Added new LexArrayHead.cpp skeletal implementation
       *** Decided to genericise all Array Headers so we can do all
	   *** indexes in a single set of code even though it makes the
	   *** LexWsHead a bit bigger.
	   ***
	   *** Note: Next we have to change LexWsHead to use these
	   ***       instead of the other members it's currently using

TIME:  2012-05-06 03:00-07:00 Lex...

LOG:   LEX: Got LexWsArrayHead working along with LexWsBlob

LOG:   LEX: Wrote LexWorkspace BlobExists/BlobFind methods
       *** Still debugging them though.

LOG:   LEX: LexWorkspace BlobExists/BlobFind methods now work fine.

TIME:  2012-05-06 09:00-14:00 Lex...

LOG:   LEX: Got LexWorkspace.BlobAppend working
       *** Still an outstanding bug where it appends one more block
       *** than asked for but that's next...
	   
TIME:  2012-05-06 17:00-21:00 BEFE and Lex...

LOG:   BEFE: Fixed bugette in Cache.AppendFileBlocks.  It was,
       pretty much doubling the file size instead of appending
	   the correct number of Bytes.
	   
LOG:   LEX: LexWorkspace._FileNewFileBlob works now.
       *** However, it doesn't pre-append the line list.  Gonna have
	   *** to think about whether we want to keep that in a separate
	   *** block or not.  Probably so.  ;-)
	   
TIME:  2012-05-07 03:00-06:00 BEFE and Lex...

LOG:   BEFE-Model: Had a first stab at BEFE-Model/Primitive.txt model

TIME:  2012-05-07 09:00-14:30 BEFE and Lex...

LOG:   LEX: Rejigged low level LexWs stuff so we've minimised block
       types.
	   *** Loaded all BEFE-Core source into LXWS file blobs (about 3MB)
	   *** in around 450ms.  Whew!!!!
	   *** Next... Strings and Files

LOG:   LEX: All BEFE .h/.cpp source files now loading into LXWS database
       as blobs.
	   
LOG:   Wrote new post on BEFE Software Library blog at http://befe-software-library.blogspot.co.uk

TIME:  2012-05-07 18:00-20:30 Lex...

LOG:   LEX: Cleaned up LexWsHead and LexWsArray and got persistent
       settings of LexWsArray.entrySize and LexWsArray.entriesPerBlock.
	   
TIME:  2012-05-08 09:00-12:00 Lex...

LOG:   LEX: Got LexWorkspace StringNew and StringCount working.

LOG:   LEX: Got skeletal LexFormatOut struct declared and written.

TIME:  2012-05-09 00:00-09:00 Lex...

LOG:   LEX: More work on LexFormatOut

LOG:   BEFE: Added Bytes.SetUsedBytes method for allocating an empty
       Bytes of a fixed size.
	   *** Note: You have to call Bytes.SetLength() followed by a call
       ***       to Bytes.SetUsedBytes() to actually get it right.  ;-)

LOG:   BEFE: Changed String.Clear to Reset() and then create an ASCII0
       mutable string.  This differentiates it from a Null string.  ;-)
	   
LOG:   LEX: Got LexWorkspace StringNew, StringGet, and BlobGet(USpan)
       all working.  Hurrah!
	   
TIME:  2012-05-09 11:00-16:00 Lex...

DONE:  Coalesced LexWorkspace BlobNew/StringNew/FileNew methods and
       BlobFind/StringFind/FileFind methods into generic _IdEntry methods.
	   
LOG:   BEFE: Fixed Cache.SetBlockContents to load the block if it
       wasn't in the Cache.  Only encountered this case when we started
	   filling up the Cache with the Lex stuff.

LOG:   BEFE: Added "operator Int32" to Crc32 Class.

LOG:   BEFE: Added CRC calculation to LexWorkspaceFile and got all
       the tests working properly.

LOG:   LEX: Added string blob Id to output in LexFormatOut class

TIME:  2012-05-10 18:00-05:00 Various...

LOG:   Spent a bit of time working on modelling and BEFE-Wiki file
       formats.  I think we'll throw this into the arena for BEFE-0.4

LOG:   Added UTF-8 BOM character check in Char.h in Char._Validate

LOG:   Added SVN/play directory so we can start version controlling stuff we play with

LOG:   Did some playing with play/endian.cpp to check out Microsoft's
       silly BOM.  Decided we need to do BOM checks on file opens
       (see below).
       
LOG:   BEFE: Had to do some frigging around with UT8.cpp and Char.h
       to get proper, sort of, handling of the crazy U+FFFE and U+FEFF
       treated as a "sort of valid" Unicode character.
       *** Next, have to change Win32Console and Linux32Console to 
       *** weed these out and plug some kind of "skip initial BOM" and
       *** text file BOM validation into File/FileStream/Cache.

TIME:  2012-05-11 08:00-14:00 Various...

LOG:   Massive frigging about trying to get BEFE detecting/handling
       leading BOM (or not) in files.
       *** Added FileStream.ValidateBOM and other methods and changed
       *** Cache.LoadFileBlock to test when loading block zero.  Also
       *** added Char.IsBOM() so that caller can strip it from strings.
       *** That case should only happen if treating first line of file
       *** as Unicode but U+FFFE and U+FFFF are actually valid Unicode
       *** Characters so we'll leave Microsoft's silly leading BOM in
       *** UTF-8 files (which isn't needed) there and let the caller
       *** check it.

DONE:  Fix Lex file reading code to properly skip leading Unicode BOM in file.

LOG:   Changed macros ERROR, WARN, ABORT, etc. to be BEFE_ERROR etc. everywhere.

LOG:   Changed Win32.h to have WINAPI inside (*) for function pointers.

LOG:   Renamed String.h to _String.h and made it ONLY included in Primitives.h
       *** Did this because a) A String is a pretty primitive data type
       *** although not a "proper primitive", and b) to get around Microsoft's
       *** cl compiler's problems with search path order and "String.h"
       
LOG:   Hacked Args.ExecuteOption to define DONE macro "goto OK;" to get
       rid of the nested if...else if... else if...

TIME:  2012-05-11 19:00-03:00 Various...
       
LOG:   BEFE: Fixed bug in Cache.LoadFileBlock where it was clearing the
       CacheBlock's blockLen when it was found.
       *** We keep CacheBlock.blockLen denormalised from Buffer.GetUsedBytes()
       *** to slightly provide a performance improvement, I guess.
       
LOG:   BEFE: Adjusted Cache.LoadFileBlock to use File.ValidateBOM instead
       of Stream.ValidateBOM because it's slightly faster.

LOG:   LEX: Started modeling two kinds of states/actions - Byte or Char

LOG:   LEX: Did some work on LexLanguage/LexState/LexAction formatting

TIME:  2012-05-12 07:00-11:30 Various...

LOG:   BEFE: Renamed and rejigged lots of how CommandShell, what things
       are called, etc.

LOG:   BEFE: Almost ready to plug in CommandFactoryDecl into CommandShell
       so we can make non-BEFE Command Processors using CommandShell.
       *** We're doing this now because we want a separate CommandNewLex
       *** for testing the Lex stuff we're writing BEFORE we trash and
       *** replace the existing BEFE Lex code.
       
TIME:  2012-05-13 09:00-05:00 CommandShell...

LOG:   Broke CommandShell and friends.  Think I'll back off the way
       I was thinking about using CommandFactoryDecl and spawning
       new Commands...  It's probably better to register each instance
       like Command_OS, Command_Lex, etc. with CommandShell and have
       their lifetime coincide with the CommandShell's own life.
       *** Any context stacking they need can be handled separately 
       *** but you won't need a factory, etc. for them.
       
LOG:   Spent most of the rest of the day frigging with CodeLite which
       stopped working (probably a Windows 7 problem?) after installing
       ZoneAlarm Backup.  Hmmmm...

TIME:  2012-05-13 21:00-02:00 CommandShell...

LOG:   Almost finished rejigging CommandShell and friends.

TIME:  2012-05-14 03:30-07:30 CommandShell...

LOG:   CommandShell and friends almost working again.

TIME:  2012-05-14 10:30-11:30 CommandShell...

LOG:   Fixed a few more CommandShell bugs but...
       *** Still some glitches now and again...
       *** a) Headers don't display properly (probably in CommandLevel.cpp)
       *** b) In OS... E[xists] clashes with E[xit] but it doesn't show the error.
       *** c) Help GPFs

TIME:  2012-05-14 15:30-00:00 CommandShell...

LOG:   Fixed GPF in Help caused by UTF8.GetCharPos not checking for
       out of bounds if passed Null index.

LOG:   Fixed OS...E[xists] clash.  Had to change CommandShell.ExecuteLine
       to display the error if it wasn't Error::CommandExit.

LOG:   Added command '!...' processing into CommandShell.ExecuteLine
       instead of only in CommandLayer_OS.Execute.  It fits with in
       with everything better there anyway.

LOG:   Headers not started to appear correctly again, not sure why.
       Hmmmm...

LOG:   Changed BEFE_ShellHelp.txt and CommandLayer_BEFE to have the
       main help called "BEFE" more in line with the layer names.
       
LOG    Added "-Wall" to g++ in Build if "+vv" set.
       Ready for BEFE-Lex main to start having its own CommandLayer.

TIME:  2012-05-14 11:00-16:00 BEFE...

LOG:   In the middle of rejigging the BEFE Lifecycle to properly
       implement new restrictions on the StartUp, ShutDown,
       IsNull, SetNull, MoveFrom, CopyFrom, and Reset methods...
       
DONE:  Write IsNull/SetNull and BEFE.IsNull/SetNull for USpan and URange

LOG:   ...Left it pretty much working but not thoroghly working across
       the board.  This included partially/incompletely redoing the
       Win32 implementation of the BEFE Lifecycle.
       *** Basically, a lot of the query methods on Win32OperatingSystem
       *** and others now don't allocate any memory but haven't yet
       *** put the info back on query of the members like "Machine Name"
       *** "Host name", "Version String", etc.

TIME:  2012-05-17 08:00-10:00 BEFE...

LOG:   BEFE: Fixed nasty bug in Null.h... IsNull() was doing wrong check!!!

LOG:   BEFE: Fixed several CommandShell related bugs.  Still not working yet.

TIME:  2012-05-17 11:00-13:30 BEFE...

LOG:   Changed all ::IsNull and ::SetNull to BEFE::IsNull and BEFE::SetNull

LOG:   Got rid of all "DEBUG..." everywhere

LOG:   BEFE: Got CommandShell pretty much working again.  Whew!!!
       *** But, doesn't load error messages properly, yet...

LOG:   BEFE: Fixed long standing MessageParseLine uninitialised local var
       *** Error messages are loading correctly now.
   
TIME:  2012-05-18 08:00-12:00

LOG:   Fixed bug in String.operator int... Was calling Atoi from wrong buffer.

DONE:  Get all the Win32OperatingSystem, etc. info back in there now
       that we've removed it because of Lifecycle formalisation.
       
LOG:   Well on the way renaming Clear() to SetEmpty() across the board.

TIME:  2012-05-18 15:00-19:00

LOG:   BEFE: Removed Clear method EVERYWHERE except _String.h

DONE:  Change all "Clear" method calls to "SetEmpty" now that we've
       established BEFE Lifecycle naming standard.

TIME:  2012-05-19 08:00-12:00

LOG:   Cleaned up Id32.SetNull etc. and got Help using BEFE_HelpFile
       environment variable so we can switch help depending on the
       CommandLayer implementations.

LOG:   Got BEFE-Lex ready to plug in NewLex CommandLayer.

TIME:  2012-05-20 05:00-09:30

LOG:   Beefed up IntFromString and UIntFromString to return status.

LOG:   Fixed Range/URange FromString methods to check status from
       IntFromString and UIntFromString.

DONE:  Figure out why "+vv +tests utf" test 5 fails.
       *** Was Bug in UTF8.GetCharLength
       
TIME:  2012-05-20 11:00-18:00

DONE:  Get rid of all standalone "goto OK;" so we're consistent across
       the board as far as coding style is concerned.
       
DONE:  Find and fix unfreed memory in BEFE-Core and BEFE-Lex
       *** 'twas easy peasey... ArrayValue<T>.SetEmpty wasn't properly
       *** walking the values and calling ShutDown on them before
       *** calling Buffer.SetUsedBytes(0)
       
DONE:  Figure out why testall.cmd leaves behind a temp file in c:/befe
       *** TestFile.Run didn't check for bad/empty file name
       
DONE:  Fix CommandShell extra BEFE_ERROR
       *** It was originally put there, I forget exactly why.
       
LEX:   Worked on getting CommandLayer_NewLex Class working.

TIME:  2012-05-20 20:00-23:00

LOG:   Added helpFile to CommandLayer and added helpFileName parameter
       to Help(), thereby genericising CommandLayer_BEFE_Help and
       others.

LOG:   Added RegisterAdditionalHandler methods to CommandLayer Class.
       *** These are used to plug in additional commands to each
       *** layer (main.cpp adds OS and LEX)

LOG:   BEFE-Lex now ready to add the CommandLayer_NewLex and
       CommandLayer_LexWs layers.
       
LOG:   BEFE-Lex now has CommandLayer_NewLex and CommandLaye_Lex
       plugged in and working -- no sub-commands yet though.
       
TIME:  2012-05-21 08:00-17:00

LOG:   BEFE: ArrayValue<V> didn't override Reset() so it wasn't
       freeing memory.
       
LOG:   BEFE-Lex: CommandLayer_LexWs starting to work. It now creates
       new Workspaces, opens existing ones, and closes current open
       one.
       *** Also has needed OS commands (like rm,mv, etc.) in there.

DONE:  Bug in Slice...  String("echo").Get(Slice("5:")) returns bogus string
       *** Was also in Span and USpan.
       
DONE:  Various fixed for BEFE-Lex and CommandLayer_LexWs.

LOG:   BEFE-Lex: Now reading/writing LexWsHead properly.

LOG:   BEFE-Lex: Various Lex tweeks and started on LexLangBefe,
       LexLangBwik, LexLangBtyp, and LexLangBmsg.

TIME:  2012-05-23 06:00-12:00

LOG:   Added SetInputString to LexSteam and got it processing input
       based on input type.
       *** Need to add WsFile next

LOG:   Got CommandLayer_LexWs 'expression' command working and displaying
       tokens from current language onto the command line.

LOG:   Got LexLangBefe working and plugged into BEFE-Lex
  
LOG:   Added "//!befe-publish inc" to beginning of several header files 
       so that BEFE-Lex could build using BEFE-0.4/inc instead of BEFE-0.4/_inc

TIME:  2012-05-25 09:00-15:00

LOG:   Did a lot of twiddling with BEFE-Lex stuff.  Still working on it.
       
TIME:  2012-05-26 12:00-17:00

LOG:   Rejigged BEFE-Lex LexLanguage and LexStream to handle high bit
       set in state's byteActions to swap state.
       *** Both C++ and .befe now work.
       *** Not happy that .befe needs "Operator/" for comments to work

DONE:  Write .btyp and .bmsg languages
       
TIME:  2012-05-27 08:00-14:00

DONE:  Changed LexStream to count number of non-White LexTokens on
       current line.  Then, slide in the spec/implementation of this
       in C++, etc. to only count 0 non-White before '#' as a
       'Preprocessor' comment in .befe, .btyp, and .bmsg
       
DONE:  Added preprocessor character the LexLanguage, set it in C/C++ and
       .befe, and handle separately from comments (unless it's also in
       the comment strings.
       
LOG:   Threw Test command into CommandLayer_LexWs

TIME:  2012-05-28 05:00-12:00

LOG:   BEFE-Lex: Got rid of LexAction Byte handlers and now only use
       LexCharHandlers.
       *** Seems to have speed up BEFE .cpp from 1600ms to 1400ms.

LOG:   BEFE-Lex: Worked on Bmsg.h abnd BmsgToken.cpp and BmsgStream.cpp
       preparing to replace old message file parsing code with new Lex
       stuff instead.
       
TIME:  2012-05-29 02:30-08:00 BmsgStream

LOG:   Fixed a bugette in Befe::ErrorStatus where it wasn't calling
       the right ErrorString function.
       
LOG:   Got BmsgStream initial non-functioning implementation ready to
       write the "real code".
       *** Also plugged into TestLexicon and got CommandLayer_LexWs 'test'
       *** command testing a BmsgStream instance.
       
TIME:  2012-05-29 15:00-19:00 BmsgStream

LOG:   Got BMsgStream._GetLexTokens working properly.  Now, to get
       BMsgStream._NextBmsgToken working for the next higher level...
       
TIME:  2012-05-30 09:00-12:00 BmsgStream

LOG:   More work on BmsgStream._NextToken, including weird bug caused
       by LexFormatOut.DisplayToken(UInt, LexToken &) padding the 
       token value to 4 instead of leaving it alone.  ;-)
       
TIME:  2012-05-30 15:00-21:00 BmsgStream

LOG:   BEFE-Lex: BmsgStream._NextToken now seems to work completely
       and BmsgStream.LoadFile, for now, displays all the input
       tokens.
       *** Will probably stick some "Bmsg Parse State" stuff in 
       *** there so we can load messages from Strings, Files, and LexWs
       *** without having to change the underlying code, but that's next.
       
LOG:   BEFE-Lex: Tidied up Bmsgstream._NextToken to handle /*...\n...*/
       properly and still keep track of lineCount
       *** see related TODO
       
LOG:   BEFE-Lex: Started preparing for BmsgLine Struct because, for
       our .bmsg purposes, lines only have "so much" simple structure.
       
TIME:  2012-05-31 02:30-04:30 BmsgStream

DONE:  Added lineCount back into LexToken so we can handle embedded
       multi-line comments/literals properly down at the low LexToken
       level where we won't have to get the whole /*...\n...\n...*/
       or '''...\n...\n...''' string again until we really need it
       (in the case of /*...\n...\n...*/ we'll probably just discard it.  ;-)
       *** This has the added advantage of speeding it up in most
       *** cases where you really don't need to know where the '\n' was.
 
TIME:  2012-05-31 08:00-14:00 BmsgStream

LOG:   Got BmsgLine written.  Now to write BmsgStream._NextBmsgLine...

LOG:   BmsgStream._NextBmsgLine works now.
       Now to write BmsgStream._ProcessLine...

TIME:  2012-05-31 16:00-19:00 BmsgStream

LOG:   Tidied up TestLexicon so BOTH C++ and .bmsg languages can be
       tested and they have consistent behaviour based on +v, +vv, and +vvv.
       
LOG:   Added SVN/BEFE-Test in preparation for separating Unit Tests from
       BEFE-Core proper.  This will only come into fruition when we've
       created the '.bbld' language and tied in the BEFE-Build stuff
       with it.

FIXED: TestLexicon called LexStream.SetFileName for each input file 
       (about 362 of them), and that calls Cache.StartCacheFile. 
       Unfortunately, Cache.StartCacheFile isn't reusing the "free"
       file entry so the CacheFileInfo array, etc. just keeps getting
       bigger and bigger.  ;-(
       *** The problem was Cache.StartCacheFile was doing a
       *** "numUsedFiles++" but Cache.StopCacheFile wasn't doing a
       *** "numUsedFiles--". Doh!!!

LOG:   Changed LexLangDefaultNewLine to NOT keep track of line starts
       in lineOffsets array.  This reduced the running time for 362
       C++ files from 1600ms to 1294ms and significantly reduced the
       number of memory allocations.  ;-)
       *** May have to think about setting up a proper Alloc for
       *** lineOffsets so we don't get the weird sizes when we
       *** have it turned on.
       ***
       *** Also, there's a couple of other places in LexActions.cpp
       *** that need to append to lineOffsets if we're going to
       *** (like "/*...*/" etc.)
       
TIME:  2012-06-01 03:00-11:00 Bmsg

LOG:   Renamed BmsgStream Struct to Bmsg Class because, although it's
       sort of like a stream, the public interface to it is purely
       functional and doesn't act like a Stream in the slightest.
       
LOG:   Rejigged Bmsg Class members to all be protected and put proper
       Get/Take query methods in Bmsg for statistics and info.
       
LOG:   Added "//!befe-publish inc" to top of ToAscii.h so we don't
       get compile errors when just using storage directory.
      
LOG:   Now, Bmsg.ProcessFile works just fine in TWO PASSES and doesn't
       fragment heap so badly (see +mas).
       
TIME:  2012-06-01 14:00-20:00 BEFE-Lex -> BEFE-Core

LOG:   Moved EVERYTHING from BEFE-Lex (except main.cpp) into BEFE-Core
       in the BEFE-Core/language directory.
       *** Quite a bit of work to get the 'namespace BEFE' and other
       *** stuff sorted out but it all glues together now.  ;-)

LOG:   Removed testLexWorkspace from TestLexicon so that lexical
       test works for the moment.
       
TIME:  2012-06-02 03:00-04:00 LexLang

LOG:   Fixed CharLiteral/StringLiteral to include leading quote
       character in LexToken.value.  This benefits higher stuff than
       lex that wants to merge both kinds of literals together.

TIME:  2012-06-02 07:00-11:00 LexLang

LOG:   Fixed LexStream.NextToken to return token type Unexpected if
       0xFF encountered in LexState byte table.

LOG:   Fixed a bug in String.Truncate or pad (and a few others).  
       *** Evidently these were leftovers from when we changed our
       *** minds about in-place vs out-of-place and Status returns.

LOG:   LexState ranges all plugged in and, if used, are displayed by
       LexFormatOut.DisplayState.
       *** Wrote LexState.GetCharActionNo for "cheap and dirty" state
       *** Char processing, but that shouldn't be used if the caller
       *** can just do the same stuff as is already there.
       ***
       *** This is because the ranges.Length() and ranges._GetAddress(0)
       *** calls are done each time LexState.GetCharActionNo is used
       *** and could have been done ahead of time by utilising the
       *** LexState.numRanges and LexState.range0 members provided
       *** for EXACTLY this purpose.
       
DONE:  Get Ranges into LexState
       *** This will involve additional decision at default LexLanguage
       *** generation point to either generate Byte or Char stuff for
       *** each state.

TIME:  2012-06-02 13:00-18:00 LexLang

LOG:   Changed LexStream.NextToken to pay attention to LexState::TypeChar
       states and, if so, use the LexRanges in the LexState instead.
       *** For some odd reason (see TODO below) we processed 2 less
       *** bytes this way than before.  Hmmmm...

LOG:   Prepared the way to get rid of LexError.h
DONE:  Got rid of LexError.h

FIXED: Find latest memory leaks in testall.befe
       *** Problem was LexState wasn't calling ranges.ShutDown()
       
TIME:  2012-06-03 09:00-17:00 Lex/Lang

LOG:   Rejigged BEFE-Core/language to be the following two instead...

         o BEFE-Core/lang - All the "language" related stuff
         o BEFE-Core/lex  - All the Lexical related stuff
       
DONE:  Rename Error::UtilLex... stuff to Error::Lex..., and while we're
       at it, properly name Error::Bmsg... errors.

DONE:  LEX: Merge into BEFE-Core and replace existing Lex stuff.
       *** Including Unit Tests for each language
       
FIXED: Fix errors in "befe-dev +vv +test lex", there's two of them...
         1) C:/SVN/BEFE-Core/lex/LexLanguage.cpp gets "Unexpected character"
         2) .befe gets a "'ARSE!!!'+001: !!!General Internal Error detected!!!"
       *** LexState._PopulateBuffer had a bug calculating whether to read 
       *** the last block or not.
       ***
       *** Strangely, that cause #2 above, so we'll have to keep an eye out
       *** on how things are progressing.
       
FIXED: Cache._FileUnchainFree and Cache._FileUnchainUsed didn't set the
       nextFileIdx and prevFileIdx to Null when it unchained.
       *** This was the cause of #2 above
       
DONE:  Change LexStream.StartParsing to call Cache.GetBlockSize instead
       of calling Cache.GetInfo (it doesn't use the rest of the CacheInfo)

TODO:  Fixed LexStream.LexToken to handle Error::LexUnexpectedChar from
       action handlers.
       *** Note: This leads onto the next TODO below
       
TIME:  2012-06-03 19:00-22:00 Lex/Lang

LOG:   Added IsCombining(Char c) in Char.h/Char.cpp

DONE:  Now that we've introduced proper recognition of UTF-8 in LexStream,
       we need to change LexStream, LexTokens, etc. to keep track of
       proper line/col accounting for it.  Or...  Come up with a better
       mechanism in LexStream.OffsetToLineCol.
       *** Note: This may mean rejigging LexStream to take a quick pass
       ***       over the file to start with and count the '\n' so it
       ***       can pre-allocate the array of line offsets.
       
TIME:  2012-06-04 09:00-14:30 Lex/Lang

LOG:   Wrote LexActionPythonQuote and LexActionPythonCheckEOQ and
       ready to plug it into LexLangBefe

LOG:   Right!  Python MultiQuotes seem to work now (see LexLangBefe.cpp)
       so it's time to do the next TODO and merge all the .befe stuff
       into a single LexLang.
       
DONE:  Implemented '''...''' and """...""" in Lex stuff for use in .bhlp
       and other languages (like .bwik).

DONE:  Combined all .bmsg, and .btyp into .befe from the Lex point of view.
       Then, we'll have a separate Bmsg.h, Bmsg.cpp, Btyp.h, and Btyp.cpp
       for the USE of .befe lex in each particular instance.
       
TODO:  Rename ...LexWs... to ...LangWs... to resolve ambiguity and make
       it more clear.  
       
TODO:  Add 'lex file <filename>' and 'lex exp[r[ess[ion]]]' to
       CommandLayer_LexWs for debugging/research purposes.
       *** Actually, kept "exp[r[ess[ion]]]", got rid of "curlang",
       *** and added "show lang" vs "show langs", and then added
       *** "lex <file>" instead.
       
TIME:  2012-06-06 08:00-09:30 BEFE-Core

LOG:   Changed Globals Class so it has uints[], longs[], and bools[]
       members so we can start accessing Globals by index.

TIME:  2012-06-08 11:00-13:00 BEFE-Core

LOG:   Initial empty implementation of Match Struct.  Now, for the
       "real thang"...
       
TIME:  2012-06-08 15:00-17:00 BEFE-Core

DONE:  Implement CommandLayer handler to handle "Unknown Command".
       *** This lets each CommandLayer decide now to deal with this
       *** case.  For example: "<expr> match <pattern>" would allow
       *** us to implement a MATCH command by getting "Unknowb Command"
       *** on the <expr> and it would check for "MATCH" in the 2nd arg.
       ***
       *** Did this in CommandLayer_RegisterHandler... If name is Empty,
       *** it'll be used as the "Unknown Command" handler.

LOG:   Got Match TypeVarTerm plugged in place.  Now, to check it out
       in CommandLayer_Lang_Match...

LOG:   Okay, got MATCH command into CommandLayer_Lang.
       *** For now, it assumes the string is Insensitive.
       
TIME:  2012-06-09 16:00-19:00 BEFE-Core

LOG:   Got Match_Star in place but has some bugs.

TIME:  2012-06-09 23:30-03:00 BEFE-Core

LOG:   Match_Star seems to be pretty much working.  Now, to put in a
       separate Match_Wild function and get Match_Star and Match_SQL
       both using that function...

LOG:   Match_SQL seems to be pretty much working.

TIME:  2012-06-10 09:00-16:00 BEFE-Core

LOG:   There's a bug in ErrorString(Status), infinite loop...
BUG:   There was a silly bug in LexStream.GetInputSpan which was
       getting the number of used bytes from the wrong block.

LOG:   Added CommandLayer_Lang "Mat[ch]T[yp[e]]" and "Pat[tern]"
       commands for Matching.
       
LOG:   Match types Star, SQL, and VarTerm all seem to work right now.

DONE:  Match...
         o VarTerm
         o Star (or any wild)
         o SQL LIKE (same as Star but with '_' as well)
         o RegExp (& variants)
       *** Actually, hold off on RegExp because we a) don't like them, and
       *** b) we don't need them yet.
       ***
       *** And, add a Match command to CommandLayer_Lang somewhere.
 
LOG:   Implemented CommandLayer_Lang "<string> Like <pat>" command.

LOG:   Added '?' as wildOne in Match_WildOne for matchType TypeStar.
       *** Note: See Match.cpp
 
LOG:   Created initial MatchNode.h and MatchNode.cpp for use in all
       Match expression types and preparing for PosixBRE and PosixERE.

LOG:   Raised CodeLite 4.0.5589 bug (#3534157) on the SourceForce
       website.
       
TIME:  2012-06-10 23:30-03:30 BEFE-Core

LOG:   Initial stab at displaying MatchNodes in LexFormatOut.
LOG:   Wrote MatchNodes.PopulateFromNodes (and most other methods)

TIME:  2012-06-10 06:00-07:30 BEFE-Core

LOG:   More work on MatchNode and MatchNodes

TIME:  2012-06-10 12:00-16:30 BEFE-Core

LOG:   Started working on MatchNodes "Execution Functions",
       including MatchNodes.FindRoot.  Also, cleaned up trythis
       and returning errors from Test class.

TIME:  2012-07-07 15:00-18:30 BEFE-Core

LOG:   Implemented initial MD5 struct from Aladdin example found on
       web.  It now works and gets results matching MD5 examples
       on Wikipedia MD5 page.
       
TIME:  2012-07-07 21:00-23:00 BEFE-Core

LOG:   Turned MD5 into MD5Calc (the MD5 checksum calculator) and MD5
       (the MD5 checksum value itself).
       
LOG:   Added 'md5' command to CommandShell_OS

LOG:   Fixed LexFormatOut.DisplayToken to substitute ' ' for 0x0d in
       token.value, because short comments, etc. could have CR and
       this screwed up the display.
       
TIME:  2012-07-15 12:00-17:00 BEFE-Core

LOG:   Added Blang Class for common use by .bmsg, .bcmd, .btyp, .bbld languages

LOG:   Got Bmsg Class (for .bmsg language) working again with Blang methods

LOG:   Added BcmdCommand implementation.  Now for Bcmd implementation...

LOG:   Skeletal Bcmd implementation completed.  Now, for the meat of it...

TIME:  2012-07-16 11:00-15:00 BEFE-Core

LOG:   Bcmd pretty much working now.

TIME:  2012-07-16 18:00-23:00 BEFE-Core

LOG:   Bcmd working really well now. Next, plug into Command_Layers and
       redefine the command line arguments, etc.
       
FIXED: Multi-line comments/quotes don't adjust column number properly.
       *** Actually, the ultimate problem was in LexLangDefaultAppendFlushMain
       *** which was setting stream.curTok.colNo.  It shouldn't have!!!!

TIME:  2012-07-17 04:00-06:00 BEFE-Core

LOG:   Added Bcmd._NextBcmdArgument.  Next, get Bcmd._NextBcmdCommand
       using it.
       
TIME:  2012-07-17 09:00-11:00 BEFE-Core

LOG:   Moved Bcmd test code from trythis.cpp into new TestBcmd.cpp

TIME:  2012-07-17 18:00-21:00 BEFE-Core

LOG:   Got Console input type into LexStream, and got Bcmd class
       starting to recognise new BcmdArg TypeCommandContinue.
       *** Work in progress.  ;-)
       
TIME:  2012-07-18 05:00-07:00 BEFE-Core

LOG:   Got Bcmd working quite well except for "Unterminated <xxx>" errors.
       *** This needs to be turned into a BcmdArg::TypeError argument
       *** instead of a Status so we can "point to the error".
       
TIME:  2012-07-18 10:00-15:00 BEFE-Core

FIXED: Fixed GPF in LexStream.cpp where a UTF-8 character started
       somewhere in the middlwe of the bufTrig remaining portion of
       the buffer.  In this case, bufTrig became REALLY HUGE, meaning
       it became negative, but it's a UInt.  
       *** Changed to coerce it to an (Int) and do appropriate checks
       *** instead.
       
DONE:  Added status to LexToken/BcmdArg for use by token types Error
       and Warning.  It's a little overhead, but it lets the caller
       decide whether or not to use the computed string or reformat it
       using ErrorString instead.
       *** This will be needed if the Lex stuff is passed over the
       *** network because formatted error messages are really more
       *** a client function NOT a server function.  ;-)

TIME:  2012-07-18 16:00-19:30 BEFE-Core

DONE:  Cleaned up LexStream console input and '\n' handling, ready to
       implement it now, prompting OUTSIDE the LexStream.

LOG:   Still trying to decide the proper way to handle Console prompting.
       *** Think we're going to separate it from the "normal case" of
       *** file input and do it separately in .bcmd because we don't
       *** want to pollute the LexStream mechanism with such a wrong
       *** incestuous thing.
       ***
       *** Probably, if we're prompting from the Console, we'll just
       *** iteratively build up the string based on multiple token
       *** passes, prompting when unterminated quotes or '\' in there.
       *** Hmmm...
       ***
       *** If so, we'll need to put a "sanity max" on the input string
       *** size to guard against hackers who write code that pretends
       *** to be the Console and blasts it with so much crap that we
       *** run out of memory, etc.  ;-)
       
TIME:  2012-07-19 10:00-20:30 BEFE-Core

LOG:   Moved BcmdArg and BcmdCommand into BcmdArg.h and BcmdCommand.h
       and tidied up a few typedefs for LexTokenType and BcmdArgType.

LOG:   Got Bcmd.NextCommand starting to work on Bcmd._NextArgument.
       *** Next, need to fiddle with removing quotes,
       *** detecting untermate things, handling errors, etc.
       
LOG:   Got Bcmd.NextCommand recognising and reporting "unterminated xxx"
       properly.
       *** Next, get Bcmd.PromptCommand working...
       
DONE:  Get Bcmd.GetNextCommand using Bcmd.GetNextArgument instead of the
       current way it's doing it.
       
TIME:  2012-07-20 06:00-10:00 BEFE-Core

LOG:   Fixed infinite loop in Bcmd.cpp plus tidied up various stuff
       in LexLangBefe and LexStream having to do with invalid characters.
       *** trythis() now reads .beferc and does the right stuff.  ;-)

LOG:   Had teeny problem with "«" and "»" in trythis.cpp reading
       C:/BEFE/t1.befe (copy of .beferc) because had forgot to save
       it in "UTF-8 without BOM" encoding (it put 0xAB out there
       instead of the proper UTF-8). Then, still got "Unexpected character"
       there but all okay if surrounded by quotes.  ;-)
       
LOG:   Changed LexLangBefe() to set action "Operator" for NUL and UTF-8
       characters.  This now means we treat any UTF-8 as an operator
       so we don't get "Unexpected Character" any more.  ;-)

LOG:   Changed LexLangBefe() back to how it was because, at least for 
       now, we can get around the "Unexpected Character" problem in
       "+env:BEFE_QuoteLeadIn=«" by surrounding the whole thing with
       single or double quotes.  ;-)
       
TIME:  2012-07-21 11:00-20:00 BEFE-Core

LOG:   Changed Bmsg.ProcessFile to display errors and warnings when
       loading error messages.
       
LOG:   Bcmd.PromptCommand works just fine now.  Ready to plug it into
       CommandShell.Main() and all through the CommandLayer... stuff.
      
LOG:   Moved trythis() Bcmd testing code into TestBcmd class and
       plugged it into the Test Class and Unit Test mechanism.
       
FIXED: Bcmd.GetNextCommand() doesn't return Error::LangBefeEndOfStream
       when reading from a file.
       
LOG:   Got String.operator[] working and tested in trythis().

TIME:  2012-07-22 15:00-19:00 BEFE-Core

LOG:   Finished BcmdCommand.operator[] and ArrayValue<V>.operator[] etc.
       *** Ready to plug into CommandShell and CommandLayer...

LOG:   Moved trythis() String.operator[] test into TestString Class.
       
DONE:  Get "Char operator[](int)" in String, and same thing in ArrayValue<T>
       and ArrayPrimitive<t>.
       *** Should also add "String operator[](Range const &)" etc. everywhere.

DONE:  Write BcmdCommand.operator[] for ease of use in the next TODO.
       
TIME:  2012-07-23 09:00-15:00 BEFE-Core

LOG:   Commented out CommandLayer_OS, etc. for now and only working
       on getting CommandLayer_BEFE working.
       
LOG:   ComamandLayer_BEFE starting to work now -- at least it's
       executing "befe-dev echo 'Hello World!'" properly and it's
       recognising the "exit" command.
       
TODO:  Need to get CommandShell.ExecuteOptions and CommandShell.DisplayMessages
       written, working, and used instead of options in Args.cpp like
       they are right now.

TIME:  2012-07-23 18:00-21:00 BEFE-Core

LOG:   Worked on getting Error/Warning messages displaying in BcmdCommand
       properly.  Have whole set of cmdutil.cpp functions to help.

LOG:   Added CommandShellOptions.cpp and related external methods.
       *** Finished initial Boolean Global declarations as a static
       *** array in CommandShellOptions.cpp.
       ***
       *** Next... Start searching it, parsing options, etc. 
       
TIME:  2012-07-25 01:00-03:00 BEFE-Core

LOG:   Revamped BcmdCommand and got rid of errors and warnings members
       and put them all in messages member.
       *** The idea is to separate BOTH but they can be intermixed.
       *** So BcmdCommand.numMessages should be numErrors+numWarnings

TIME:  2012-07-25 10:00-20:00 BEFE-Core

LOG:   Got +/- Command options working by updating TheBefe->TheGlobals
       directly.  Now, time to get "?<opt>" and "+env:..." working...
       
LOG:   Did a lot of clean up on CommandShell and BcmdCommand and
       options are all working quite well.
       *** Now, time to get "?<opt>" and "+env:..." working...
       
LOG:   Did a bit of twiddling to get CharLiteral, StringLiteral, and
       MultiQuote LexTokens removing their delimeters in Bcmd.  Also
       fiddled with TheBefe->TheGlobals.bools.FlowQuitNow as well as
       using Error::CommandExit so it can be up to the caller which
       mechanism they want to use when told to exit.

TIME:  2012-07-26 01:00-03:30 BEFE-Core

DONE:  Wrote Process.GetCommandLine() and Process.GetCommandLineArguments(),
       both are written and working.  GetCommandLineArguments() can be
       used in main.cpp to invoke the command line without the bloody
       C stdlib argc,argv getting pulled apart wrongly.  ;-)
       *** Also, see if it can be done on Linux
       *** Basically, standard libc main(argc, argv) sucks!!!

TODO:  Plug Bcmd into CommandShell and CommandLayer_<xxx>, making each
       command handler use that instead
       
TIME:  2012-07-26 08:00-09:00 BEFE-Core

LOG:   Moved some CommandShell methods into BcmdCommand where they belong.
       *** This allowed us to remove CommandShellOptions.cpp
       
TIME:  2012-07-27 09:30-21:00 BEFE-Core

LOG:   Got "+env[:[<name[=]<value>]]" working.

LOG:   Got multiple commands separate by ';' working.  Plus, all the
       "+<opt>", "-<opt>", and "+env[:<name>[=<value>]]" are working
       as well and '...', "...", '''...''' and """...""" are stripped
       off of the "...=<value>" parts of "+env".
       *** Next, need to get "?..." working and then start on OS and
       *** LANG command layers.
       
DONE:  Modified .bcmd (Bcmd.cpp) to turn ';' separator into EOC instead.
       This let's us put multiple commands on the argument line.  ;-)
       
DONE:  Get rid of +echo and -echo since they don't mean anything anymore
       no that we're doing proper Lex stuff.
       
DONE:  Got CommandLayer_OS implemented and working properly.

DONE:  Converted CommandLayer_Lang to be new BcmdCommand format.

FIXED: "befe-dev lang; lang cpp; echo 'hi there'" fails.
       *** The problem was main.cpp wasn't displaying the error.
       *** Need to get all CommandLayer implementations using
       *** proper error messages (on TODO list)
       
LOG:   Changed Bcmd._NextCommand to strip off leading '\r\n' or '\n'
       from multi-quote comments.  This way we don't have to do it 
       everywhere.

LOG:   Got most of "?..." working.

TIME:  2012-07-28 02:00-05:00 BEFE-Core

DONE:  Got "?..." working properly.
       *** "?env" now works in all its flavours

DONE:  "Set a" didn't show environment variable 'a', it showed all of them.

FIXED: "befe-dev +mas" now shows memory info correctly.

LOG:   Threw in code in main.cpp to run "~/.~beferc" on exit.
       *** Was a little tricky because gFlowQuitNow got in the way.
       *** I think that's sorted now.

TIME:  2012-07-29 09:00-12:00 BEFE-Core

LOG:   Fixed horrid bug in Win32 memory allocation!
       *** It turns out the the HANDLE returned by GetProcessHeap()
       *** can change through time but it wasn't mentioned explicitly
       *** in any Microsoft documentation I'd read before.  So, it's
       *** not really a "handle", it's actually a memory address of 
       *** the first block in the heap so you have to call GetProcessHeap()
       *** each allocation and free.
       ***
       *** FRIGGING COWBOYS!!!!
       
TIME:  2012-07-30 07:00-14:00 BEFE-Core

LOG:   Got heap allocation working properly again on Win32.

DONE:  Bcmd: Got rid of checking for trailing '+', '-', '?', and '!'

DONE:  Bcmd: Got '=' and ',' working properly based on IsOption(argNo), etc.

DONE:  Bcmd: Got "lang .befe" working as Layer BEFE command

DONE:  Plugged 'echo' command into Layer LANG

FIXED: Console prompting (multi-line comments or quotes) now outputs
       correct number of '...' in prompt.

LOG:   Got .bcmd stuff pretty much working on Linux.
       *** Problem with "a = '''" on command line but we'll check that
       *** out on Windows before fixing.

TIME:  2012-07-30 07:00-08:30 BEFE-Core

FIXED: Linux: Befe command (from Console) "a = '''" should prompt but gives
       an error because the range is bad (it thinks).  The problem doesn't
       happen on Windows.
       *** Perhaps because we get a '\r\n' on Windows?
       *** Yep, changed Win32Console to strip of trailing '\r' and it
       *** now fails the same.
       ***
       *** Various fixes involved, including getting "a = '..." not
       *** prompting, unterminated String and Char literals producing
       *** errors, etc.
       
TIME:  2012-07-30 09:30-13:00 BEFE-Core

DONE:  Fixed following scenario (2nd command is missing line/col)...

         Befe> a ='''
           ... def
           ... '''
         <Console> (1/1):  Error CMD+002: Unknown Command 'a'
         Befe> a = "xxxx
         <Console> Error BEF+005: Unterminated String Literal
         Befe>

LOG:   Added fullSpan and nonWhiteSpan to BcmdCommand to make it
       easier to get the full command as a String if/when required.
       
TIME:  2012-08-01 07:00-10:00 BEFE-Core

LOG:   Bcmd: Got most of "?<opt>" working. All that's left now is to
       get "?all" working and passing to Globals.ToStrings().
       
TIME:  2012-08-02 04:00-09:00 BEFE-Core

DONE:  Bcmd: Got "?<opt>" working.

LOG:   Renamed BEFE_ErrorMessages.txt to BEFE_ErrorMessages.bmsg
       and renamed BEFE_ShellHelp.txt to BEFE_ShellHelp.bhlp
       
DONE:  Bcmd: Got Test command working.

TIME:  2012-08-04 09:00-12:00 BEFE-Core

FIXED: "befe-dev <t.befe" now works properly!

LOG:   Did a quick patch for last fix...  If input redirection file
       didn't have a trailing '\n', it didn't return the last line.
       Instead, it just said Error::StreamAtEnd.  ;-)

TIME:  2012-08-05 09:00-11:00 BEFE-Core

FIXED: "befe-dev +lem run t.befe" didn't work properly...
       *** t.befe contains equivalent to "+lem;?env;+env:a=xxxxx;?env:a;!env;?env:a;exit"
         1) +lem not implemented
         2) It's not loading the error message file (FindConfigurationFile isn't finding it)
       *** Was several problems...
       ***  1) +lem wasn't implemented
       ***  2) Needed to run ~/.beferc after !env
       ***  3) OperatingSystem.FindInSearchPath needed to check for leading '~'
       ***     in the file name and act accordingly.
       
DONE:  Bcmd: Get "!env" working to reset all environment variables to default.

TIME:  2012-08-06 12:00-19:00 BEFE-Core

LOG:   Got CommandLayer_OS.cpp using BcmdCommand.SetError and
       GetMessage() for all "non-hard errors" for error reporting
       and display formatting.
       
FIXED: "befe-dev echo hi /* xxx" gives bogus extra crap in error message.

DONE:  Got all CommandLayer implementations using proper error messages
       and BcmdCommand.SetError() stuff.

TIME:  2012-08-09 10:00-15:00 BEFE-Core

FIXED: Option +vvv didn't turn on +vv.
       *** Example: befe +vvv
       ***          Didn't show header info same as "befe +vv". ;-)

FIXED: Option ?network didn't show proper IPv4 addresses, etc.
       *** This was left over from when we made Win32 do StartUp/ShutDown
       *** properly Nullify and not allocate memory.  ;-)
       
FIXED: Bcmd.GetNextArgument returned wrong column number (13 instead of 12)
       in Error token when passed "Command3 x /*Unterminated...".  It's
       okay if it's an unterminated String but we need to look at the
       handling of "/*" in the Lex code.       
       *** LexActionCppComment was using current stream position instead
       *** of leaving the token's lineNo/colNo alone.
       
DONE:  Implement CommandLayer_OS 'mkdir' command.
       *** Also implemented 'rmdir' but Win32OperatingSystem.DeleteDirectory
       *** doesn't work yet.
       
TIME:  2012-08-12 10:00-20:00 BEFE-Core

LOG:   Massive trying to fix that bloody "Op<<=*" bug (see below)
       *** Decided to download drmemory.exe and see where I can get
       *** from there.
       ***
       *** Need to download/build valgrind for same thing on Linux.
       
#---------------------------------------------------------------------
#NOW:     Used to find quickly in text editor
#
# TODO Short Term
#
#---------------------------------------------------------------------

ShortTermToDo...

TODO:  Move LexWs stuff into a new CommandLayer_Ws, and make Workspace a more
       generic BEFE "Database" thang to store all kinds of stuff in preparation
       for .btyp language processing.
       
BUG:   Had "LangBefeUntermStringLiteral, = '..." in ErrorMessages.txt and
       it got the wrong message text (the next one).  Got rid of the ','
       and it got the right one!!!
=!!!
TODO:  Get Win32OperatingSystem.DeleteDirectory working.

BUG:   Get Win32Console.GetLine working properly when pasting UTF-8 like "a « b",
       currently it substitues \r\n for the UTF-8.  ;-(
       *** Probably need to read WCHARs from console instead of ASCII.  ;-)
       ***
       *** Note: Need to check this out on Linux as well since it may have
       ***       its own set of same/different problems regarding UTF-8.  ;-)
       
BUG:   Find out why when we uncomment //"<<=",">>=" in LexLangBefe(), it
       GPFs.
       *** Thought it was a heap problem but it seem to be something 
       *** badly coded handling LexState.names like "Op<<=" (5 chars).
       ***
       *** Actually, it's because it's missing a trailing ',' on line 36.
       *** Now, to figure out why that GPFs...
       
BUG:   Fix "C:\BEFE>befe run scripts/lex.befe".  Gets internal errors.
       *** The problem is "befe scripts\lex.befe" works okay.  ;-)
       
BUG:   "befe +vv test seq" doesn't give right answers in all Range/Span/Slice things.
       *** Plus, various versions of Alloc(String const &) don't work right either.
       
TODO:  Sort out gConsoleUTF and String.Escape.  We need to decide, somehow
       whether or not to turn UTF-8 Chars into '\xNNNN', etc. but what to
       to about the bloody surrogate pairs we detest???
       *** Note: May need to be careful about '\xNNNNNN\<whatever>' and
       ***       make sure it'll always work.  This will, clearly, differentiate
       ***       BEFE's way of escaping and "those other guys".  What we DO NOT
       ***       want is '\xnnnn.' with the bloody '.' stopping it. That's just CRAP!!!
       ***
       ***       Perhaps '\xNNNN\\n' means 2 hex bytes followed by '\n'?  Or, maybe,
       ***       we'll need something more obscure like '\xNNNN\\\n'???  Yuck!!!

BUG:   Uncomment LexLangCpp.cpp line 188 ("//state.type = LexState::TypeChar;")
       and Lang "lang c++" "test" processes less bytes and tokens than if it's
       using type LexState::TypeByte. 
       *** So, there's a slight bug somewhere in the LexStream processing
       *** or in LexState
       
TODO:  Implement Array.Preallocate (and maybe on Sparse and Map) for
       allocating ONLY if it's empty.
       *** Might want several more Alloc constructors so that we can
       *** specify decelms, %'s etc.
       
TODO:  Tidy up C++ language to preallocate everything in 1st pass
       *** See +mas sizes, I think the indexes, etc. aren't being preallocated
       
TODO:  Rationalise BEFE command line to be a single BEFE command...
       *** This will take some revamping of all the command layers
       *** This will also mean we can remove +test +script and let us
       ***   move the 'test' command to a separate executable.
       
TODO:  Add !pushg and !popg and a Globals stack in the Befe Class.

TODO:  Add trailing '\' recognition in CommandShell and prompt with '...'
       appending to line until none/EOF.
       
TODO:  Make sure VarTerm defers all memory allocations so StartUp
       doesn't do bad stuff and C++ Constructor only allocates a
       new String, at most.
       
TODO:  Rationalise Help command across all the Command Layers.

TODO:  Need to look into C++11 decltype, auto, and how that's different
       to this whole "lambda" bollocks.  I'm beginning to suspect we'll
       get around that whole THANG with BEFE if we're careful.
       
TODO:  Get String "operator == (char)" declared and implemented

TODO:  Get Befe::FindConfigurationFile checking for full path and
       just return "that" if it's there.
       
TODO:  Implement .btype language and start generating code from BEFE-Model.

TODO:  Implement .bwik language to use Ranges and «...» as "Brackets".

TODO:  Remove Test dependency from Befe (use "Attach" scenario)
TODO:  Remove Cache dependency from Befe (use "Attach" scenario)

TODO:  Remove "Operator/" from .befe language and get comments working
       even without it.
       
TODO:  Figure out why, in LexLangBefe.cpp, if you get rid of the trailing
       "," after "..." on line 29, it GPFs.  Hmmmm.....
       
TODO:  Add new CommandShell.RegisterHandler(String &layerName, CommandDecl &spec)
       *** This will allow BEFE-Lex to implement BEFE and .beferc but 
       *** also take over the 'Lex' command
       
TODO:  Update "BEFE Lifecycle" Grey Paper to properly reflect more robust
       description of exactly what the BEFE Lifecycle methods can and
       cannot do.
       
TODO:  Play with plugging in MD5 code into BEFE and with an "Enc1" type
       of encryption key.
       *** Maybe use "Enc2" being a UUID+MD5, where the MD5 is used to
       *** verify an external password and xor'ed into the UUID for
       *** the encryption???
       
TODO:  LEX Python: Write it and get it working
TODO:  LEX Java:   Write it and get it working
TODO:  LEX Json:   Write it and get it working
TODO:  LEX XML:    Write it and get it working
TODO:  LEX HTML:   Write it and get it working
TODO:  LEX SQL:    Write it and get it working
TODO:  LEX BEFE:   Write it and get it working
TODO:  LEX BNF:    Write it and get it working
TODO:  LEX ABNF:   Write it and get it working
TODO:  LEX EBNF:   Write it and get it working

TODO:  BEFE: Find out why Cache test doesn't find the files to open.

TODO:  BEFE: Optimise Match.cpp Match_WildOne into two cases, one for
       Byte and one for Char.  Make sure it doesn't allocate any temporary
       Strings too.  ;-)
       
TODO:  Implement Match_RegExp.

TODO:  Write Grey Paper on "The myth of Primary Key".  This actually ties in
       with subsequent "Discriminated Unions" in a weird way...
       *** Cover the ambiguosity of "distinct" vs "unique"
       *** Where did "primary key" come from (some history)
       *** Give examples of an array of union <T>,<Free<T>> possibly where
       *** <Free<T>> takes more space than a <T> but is discriminated by
       *** existence in a "Free chain".  So, <T> has "Index" (position in
       *** array, its Id, and a VarTerm "Primary Key" as why it is bollocks.
       *** So, what's its "primary key?", Index, Id, or one of the N
       *** VarTerm possibilities?
       
TODO:  Write BEFE blog on "union descriminators" vs F# and "Discriminated Unions"
       *** Needs to cover the horridly restrictive problem with unions
       *** in C++ (and Java?), being the fearful shying away from runtime
       *** implementations constructs in "the model" -- Even though they've
       *** already given way to such equivalent runtime stuff like vtables
       *** and "runtime type information" (or GNU's "-rti" compile option).
       ***
       *** WALOB (What a load of Bollocks!) -- Compiler designers are NOT
       *** "broad thinkers" IMHO.
       
TODO:  Need to rejig CommandShell so we can externalise the various
       commands.
       *** Maybe a RegisterCommand, UnregisterCommand?
       
DEFER: Add GetCommandArg(UInt n) and GetCommandArgCount() to Process
       *** On BOTH ports
       *** Not quite sure at this point whether to do this or not.
       
DOC:   String Class

DOC:   Array, Sparse, and Map
       *** Include (and test) indexing modes (like Stack, Ring, etc.)

DOC:   Befe, Platform, OperatingSystem, Process, Processor, Network

DOC:   Stream, Console, File, FileStream, and Lines
       
DEFER: Write ".bbld" language and associated stuff to make the build more
       mainstream in BEFE.
       *** This currently is more about consolidating the "build model" in
       *** preparation for the "real push" with the ".btyp" modelling stuff.
       ***
       *** It also gives me a bit more time to settle on where we're going
       *** with the ".btyp" language and code generation in specific.
       
DEFER: Get +echo working on non-console input (ie, from scripts or
       redirected stdin).
       *** Not really sure we need this since all errors show input
       *** line number and if you really want to debug whatever is
       *** coming from stdin, just use the RUN command instead. ;-)

DEFER: Test out and fix all UTF-8 level three (??? overwriting chars)
       functionality so we have full level three conformance.
       *** This is particularly strange when it comes to xterm and
       *** what column it's in.
       ***
       *** Also going to be a brain-scratcher about what Length() means
       *** if we have those characters in a String.
       
DEFER: Maybe introduce OperatingSystem/File Delete vs Remove...
       Thinking that perhaps Delete should HARD DELETE, whereas Remove
       should put in Rubbish bin if applicable.
       
DEFER: Think about adding OperatingSystem.EmptyRubbish and, possibly,
       EmptyTemp.
       *** May need GetRubbishPath and GetTempPath (which we already have)
       
DEFER: Think about adding FileSystem and introducing it into the
       OperatingSystem Class and/or wherever it is applicable.
       
NOTE:  Ubuntu: You may need to "sudo apt-get install uuid-dev"
       Ubuntu: Needs libraries... librt, libuuid

NOTES: Ubuntu: gnome-session-properties lets you set Gnome Startup Apps

NOTE:  Ubuntu: Can't get at BIOS info in Linux/Ubuntu so we have to put
               "Unknown" in Platform Hardware info ;-(

***TODO:  Start on release 0.4 release

DEFER:  Get Directory Move, Copy, Rename, and Delete working deeply
       across both platforms.

DEFER: Take a look at .deb files and what it would take to create one
       for libbefe.

DEFER: Had a toss and turn time while sleeping and an idea was gong
       through my head in the dreams...   This whole ClassInit stuff
       that we've got in there needs to be looked at.  What it's sort
       of like saying is the Type/Class Instance needs initialisation
       per process, in order to manage the instances of the Class.
       *** Weird, will have to cogitate on that one!!!  Because it
       *** means the Type needs to be there for its instances
       *** to work properly.
       ***
       *** There's nothing particulairly WRONG with that, it's just
       *** that it's not "normal".  Perhaps I'm not used to using
       *** proper "runtime type" systems...
       ***
       *** Think we'll need something hooked into Process for this
       *** bit of behaviour.  Maybe even Thread if we go that far.

DEFER:  Figure out the proper way to stick befe in /usr/bin
       *** Is it a soft-link, hard link, or what?
	  
DEFER: Make sure we have an OS method that will find executables
       EXACTLY the same way as host OS does (via PATH or whatever)

DEFER: Get "//!befe-publish <dest>" in BuildMisc.cpp working anywhere
       in the first block of these files.  It'll make the published
       headers/source look nicer.
       
DEFER: Make one final pass over all publicly available Functions/Types
       and make sure they won't GPF if Befe isn't instantiated.

DEFER: Write some nice examples for release...

         o  Deep directory walk (with prompt)
         o  Combine all .cpp files into one?
         o  Strip comments from .h and .cpp files

DEFER: Start on semi-formal Wiki-ish BEFE Type Model.  This won't be
       implemented in release 0.2 but WILL delivered to express intent
       in a semi-formal monofont text form.
       
DEFER: Write and finish off persistent LexCache for use during Build
       process.
       *** Note: Try to make this keep LexFileInfos, LexTokens, and
       ***       LexLineOffsets in persistent files so we have a 
       ***       minimal memory overhead and scalable preparing for
       ***       the massive Lex tasks we're planning after we've
       ***       finished release 0.3
       
DEFER: Add Id128.operator=(UUID const &)

DEFER: For MemoryStats distinct sizes, instead of just count, keep
       and display the following...
       
        o UInt  Count
        o UInt  Maximum Count (maximum concurrent)
        o ULong SumCount

       Or whatever it takes to show a reasonable SD chart of the sizes
       
       And, enable with +masd -masd options.
       
DEFER: Take another pass over the headers and try, again, to get rid
       of any unnecessary #defines, just out of principle. There's only
       about 4 or 5 left.
       
DEFER: Get CommandShell and all other Command handlers to use ConstLen
       Strings and Lines.  This will significantly reduce memory
       allocations when parsing shell scripts.


DEFER: Get command-line completion implemented properly in Win32Console.cpp
       *** Try to genericise it so we can achieve native expectations on
       *** Unix ports as well.  Possibly by throwing in Key handlers in
       *** '_...' methods in Console.h/Console.cpp
       
DEFER: Beef up OS Command Analyse to keep track of distinct file/directory
       names (if option specified), STD statistics on average node name
       length, file length, etc.
       *** Enable with '+overanal[yse]' maybe?
       
DEFER: Write Array/Sparse Find(Int/Span/Range,<V>)
       *** Pretty much a specific Contains()
       
DEFER: Get UTF-8 Surrogate pairs handled in Decode but NEVER on Encode
       *** Update: This really has to do with CESU and UTF-16
       ***         implementations.  So, we need to look at the UTF
       ***         description and make sure it's all handled properly.
       ***         Don't think we'll need this though.
       
DEFER: Implement Array/Sparse Get(Span) and Get(USpan) written and
       working. While we're at it, implement Get(Slice), Get(URange),
       and Get(Range) methods.

DEFER: Consider getting Number keeping the digits in LSD ("Digit")
       order and adding a "LowIncrement" and "Low Add" to ignore
       exponents and just treat as an Integer.  This would allow
       us to add semantics to "Increment" on arbitrairy precision
       numbers.  Instead of meaning "add 1", it means "add one to
       the least significant digit".
       
       *** May come in handy, may not, but it will at least get the
       *** mechanics of addition implementation in Number.
       
DEFER: See if we can do 'Char::operator unsigned int' et cetera inline
       to avoid overhead of a call.
       *** Defered because this is runtime optimisation and there's lots of
       *** other stuff we need to look at when we're going for really tight
       *** code.
       
DEFER: Add Sort to Array
       *** Defered this because we haven't implemented runtime typing
       *** yet.  Currently, it's only compile time and we don't want to
       *** introduce C++'s weird runtime typing library and dependencies.
       *** So, there's no way to transparently apply '<', '>' etc for
       *** sorting an arbitrairy C++ datatype.
       ***
       *** Note: That's why we supplied Sort stuff already.
       
DEFER: Add operator[](Int) in Array and Sparse and Map templates where
       applicable.
       *** Flagged as "DEFER" because it's not applicable.  For Primitive
       *** templates there's no real way to tell if it's signed,
       *** unsigned, or whatever.  That's the problem with C, isn't it???
       *** 
       *** Note: We can implement this for Java or Python but not C/C++
       
DEFER: Rework VarTerm to use a Buffer containing the full set of strings
       and only keep an array of Ranges.  Use this to do the "Matching"
       methods, and create a Strings on the fly when the caller wishes.
       This will make minimal use of memory and we can create temporary
       ConstLen strings on the fly for Matching checks.
       *** Note: The Matching caller can set Insensitive or Sensitive on
       ***       the source string to perform sensitivity checks or not.
       
DEFER: Consider Array <Type>.Slide methods...

         Given: "0123456789abcdef"
         ...
         Slide 10..15 to 0
         ...
         Giving: "abcdef0123456789"
         
       So, you'll have the following...
       
         <Type>.Slide(UInt  from, UInt to);
         <Type>.Slide(Span  from, UInt to);
         <Type>.Slide(Range from, UInt to);
         
       We'll defer thinking about Array.Slide(Slice from, UInt to)
       because that's not only a bit tricky, but difficult to justify
       the rational for needing anything other than step==1
       
       *** May consider SlideInPlace versus Slide in general.  InPlace
       *** may take more processing but won't demand memory allocation.
       *** Not quite sure about that yet.
       
DEFER: Write blog posts about the following...

         * Languages, whitespace, and ambiguities ("+++" and "<<<")
         * Unicode, UTF-8, and bloody "surrogate pairs"
         * The beauty of Unicode "Case Folding" (except for Turkish!)
         
DEFER: Get ElmSize into BufferLow for 32-bit Headers.  And, get rid of
       it in Buffer.  And, while we're there, change it to handle alloc
       percent while we're there.
       *** This will bring it into line with the technical doc
       *** in "...SVN/bferris/befe/docs/BEFE Technical/Buffer.txt"
       
       *** We've defered this to release 0.3 because it's not absolutely
       *** required for release 0.2.  But, it IS REQUIRED before release
       *** 0.3 because it impacts Persistence implementations.
       
DEFER: Get Number and OraNumber doing Add, Subtract, Multiply, Divide,
       and remainder.
       
DEFER: Make sure String.BuildFrom doesn't need to check for 
       that.isConsumable and do a MoveFrom if so.
       
       Currently it doesn't but it looks like it might need to.

       *** See commented code in String.BuildFrom(String)
       
DEFER: Implement proper Bits array.  This will be used below (Booleans)
       for this "false dichotomy" idea...
       
DEFER: Need to think about Booleans.  Have to decide about UBoolean,
       SBoolean, and UBoolean, and what's the difference between
       that and Bits????
       
       Basically, can't decide whether we want a UBoolean or not, meaning
       there's a 2 bit implementation.
       
       *** The problem is with "false dichotomies" that are inherent
       *** in ALL programming.  ;-)
       
DEFER: Get Unicode Full Folding working completely, for comparisons.

       *** Note: May need to exposed an override method to specify for
       *** your own insensitive mappings.  It's just I don't like the
       *** 'locale' idea, because we're more focused on fixed instead
       *** of highly localised implementations.
       ***
       *** Maybe we'll expose all forms of localisation in a future
       *** version or two, including timezone, currenty, decimal
       *** points, thousands separators, etc., because these are really
       *** more 'formatting' issues than semantic ones like insensitive
       *** case mappings???

DEFER: Finish remaining Sort algorithms
       
DEFER: Get rid of ALL static Class instances and non-scalar globals
       or static Class members.
       
       What we'll do is require TheBefe->StartUp() in main to
       start up BEFE, and either TheBefe->ShutDown() or TheBefe->Exit()
       to stop the process.

       *** Note: This will let us get around all standard C++ global
       ***       constructor crap that's causing us so much grief.       
       ***
       ***       Okay, we'll have to have a few scalar globals but,
       ***       quite honestly, those won't cause a problem because
       ***       we don't give a shit which order they're initialised
       ***       in anyway!!!
       
DEFER: Think about ShortRange and UShortRange...
       And, while we're at it, ShortSpan and UShortSpan too.

DEFER: Get SparseStrings written and working.  Plug it into
       Command.RegisterHandler (where it says 'TODO')

DEFER: Remove and clean up that annoying "...bBuf.xxx" in SortMerge.
       We must have a cleaner and more intuitively obvious way of
       saying that in C++.
       
DEFER: Write the remaining four sorts...

DEFER: Write Dictionary Find/Exists methods

DEFER: Write Dictionary SaveTo/LoadFrom binary files

DEFER: In-place SortMerge

TODO:  Get variable BufferLow header written and working

TODO:  Get Number.Multiply, Number.Divide and Number.Remainder working

TODO:  Get String.GetSlice calculating UTF-8 positions only twice
       instead of once for each character in the slice when walking
       the String.
       
TODO:  Get Buffer Reverse, Array.Reverse, and String.Reverse written.
       Buffers with element sizes (Array) will have to be slower,
       use MemExchange instead.  And...  String.Reverse will have to
       be slower if it contains UTF-8.
       
       *** Will have to think about Ints, etc.  Does this really
       *** mean "Reverse element order" or does it mean "Reverse
       *** Byte Order for each element"?
       ***
       *** Maybe have a "ReverseElements" versus "ReverseElementBytes"
       *** or something instead?
       
DEFER: Implement Alloc8, Alloc16, and Alloc32.  Typedef Alloc to be
       Alloc8 to begin with.

       Do the same with Range, URange, Span, USpan, and Slice if
       applicable.

DEFER: Change Buffer and StringBuffer to handle Buffer8, Buffer16,
       Buffer32, and Buffer64 (***See Below***)

TODO:  Write Buffer8, Buffer16, and Buffer64 containing UInt8, UInt16,
       and UInt64 members respectively.
       
       Then, get them increasing and decreasing dynamically through
       Buffer32 (current Buffer) when required.
       
       This should help greatly reduce the overhead per String
       because we currently have 16 bytes overhead in the
       Buffer Header.  A buffer 8 (most cases) would only have
       4 bytes overhead.  ;-)
       
       Note: We'll have to do some tricky things with the
             bufSize member because of little-endian versis
             big-endian...  Logically, it'll be the low two
             bits of the size that tells us which case we are
             like follows...
               
               0 0 = Bit 8
               0 1 = Bit 16
               1 0 = Bit 32
               
             Or something like that.  Since, in all cases the
             header is at least 4 bytes long, then we can
             always load a UInt and check the bits.  It'll
             just be a problen where these bits are depending
             on processor Endian stuff, maybe????

       Note: *** See BEFE technical Buffer documentation ***
       
TODO:  Get Fraction written and working

       Note: Consider using GMPLIB from GNU to start with
             
TODO:  Get Number (variable length) written and working.  This
       will be like String and have an exponent in it.  We'll
       be needing this for Json.

       Note: Consider using GMPLIB from GNU to start with

TODO:  Figure out why testIdSpace blows the heap

TODO:  Get HashArray and HashStrings declared and working.  We'll need
       this for Json among others.
       
       Actually, come to think about it...
       
       We need to formalise the difference in some terms:
       
         o Array
         o Sparse
         o Hash
         o Hash Value
       
TODO:  Get Json declared and working.
       
TODO:  Put BlobsEnabled (or something like it) in Stream.  This is to
       cater for wildly varying sizes of Ints AND for Blobs (Buffers)
       themselves.
       
       Might want to consider IsFixedBinary and add byte lengths to 
       the whole lot if applicable.  Not sure about Bits yet.  Hmmm...
       
       This will enable Stream.PutBytes() with a length.  Giving us
       the ability to implement it with a variable length Buffer.

       Think this may be important for persistence.  We'll see...
       
TODO:  Add CamelCase to String class for a demo of word dictionaries!

TODO:  Genericise Storage and get it into OperatingSystem and first
       implementation in Win32OperatingSystem.
       
       Probably, file systems will become a kind of NameSpace.
       
TODO:  Get Array, Bytes, etc. using an Alloc instead of a Slice.

TODO:  Get FILE_APPEND_DATA implemented and modelled in File.h so we
       can get LOG files shared between processes.
       
TODO:  Get StringIds modeled and written.  There's all kind of things 
       we can use a String Id space for.  Including, stuff like
       emulating Python's "immutable" strings, and passing strings
       around in persistence and network stuff.  Json might benefit
       as well.  In fact, parsing anything would benefit from a
       StringIdSpace...  Hmmmm...  It would really help if we
       added Cache type to String, and making them an immutable new
       String type.
       
       The only problem there is what to do about switching between
       String Id Spaces?  Hmmmm...  Maybe each Process has the
       concept of a default String Space?

TODO:  Get IdSpace extensible for use by Win32File.

TODO:  Get "show off" sample main.cpp written and working.

TODO:  Make CodeLite BEFELib project to deliver debug/release .lib files

TODO:  Look into File ModeAppend, and make sure we don't get racing
       conditions if file opened multiple times.
       
TODO:  Look into a Range based Binary searcher.  This might be a
       wonderful way of abstracting it and, possibly as a general
       purpose comparator for use with our version of Qsort.
       
TODO:  Think about a Sparse of Ranges... Basically, we could do Union
       and intersection on the whole list.
       
TODO:  And make sure Array doesn't allocate until something's put into it.

       This will be important NOW and later (with Ring and Stack).
       
TODO:  Add Range and URange Union and Intersection methods.  Also consider
       if this fits into Slice as well.  Maybe we want a USlice.  We'll see.

TODO:  Get String.SetChar and String.SetSlice declared and implemented.

       While we're there, need to update String.Lowercase and String.Uppercase
       to use the case methods in Char so there only one place in the code,
       EVER, that does character upper/lower case because it's a tricky problem
       when working with Unicode!
       
TODO:  Get Alloc pointer or Id into Array/Strings/SparseArray.  This will
       significantly reduce the size of each Array instance (3 Ints into one).
       
       Plus, it is hardly ever used but we don't want to get rid of the
       the ability to Alloc spec arrays.  ;-)
       
TODO:  Formalise Ring and Stack.  

Х 2015-??-??: IDs and ID spaces.

Х 2015-??-??: Factories vs. Local variables in C++ and why "this" sucks but
              so does Python's "self".  There's got to be a way, maybe a compromise,
 		          that incorporates both.
 		          
 		          This whole issue is very closely related to the concept of "value" vs.
 		          identity.  Can't quite resolve it in my head at the moment.  I mean,
 		          nobody that I know of has invented a "number factory", meaning, in
 		          C++ you can write "int *x; x = new int; delete x;"... But, you can't
 		          override the constructor, to my knowledge.  The point is that you wrote
 		          "class Int {}..." that's different from "typedef int Int;" because you
 		          can write constructors for types, only classes.  So, you can't override
 		          the constructor for "int", meaning you can't control them.
 		         
 		          I might be dunder-headed here but I think that point is either missing
 		          on me or was missed by Bjarne Stoustrup.

...Journal
