head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.02.17.30.16;	author bferris;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.28.06.04.15;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.27.07.07.31;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.24.08.42.46;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.24.05.28.23;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    txmlutils.cpp - XML Parser testing utilities
  
  DESCRIPTION
    
    This source file contains various utilities used by the
    XML parser tester.
    
*/

#include "xml.h"
#include "txmlutils.h"
#include <stdlib.h>
#include <stdio.h>

// External globals
extern char *progname;
extern int   indent;

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  error      - Display error and quit
//  xmlerror   - Display XML error and quit
//  parseerror - Display parsing error and quit
//
// DESCRIPTION
//
//  These functions display an error messages and quit.
//
// NOTES
//
//  parseerror() will return if there is no parse error.
//

void error(char *message) {

  if (message)
    cout << message;
    
  exit(1);
}

void xmlerror(XMLError stat, char *message) {

  char buf[1024];
  sprintf(buf,message,stat);
  cout << buf << "\n";
  exit(1);
}

void parseerror(XMLDocument *doc) {

  XMLError stat;
  XMLLocation location;
  
  if (doc == NULL)
    return;
  
  stat = doc->GetLastParseError(&location);
  
  if (stat == XMLErrorNone)
    return;
  
  if (location.line == 0)
    cout << "  Parse error " << stat
         << " at offset "    << location.offset
         << "\n";
  else  
    cout << "  Parse error " << stat
         << " at line " << location.line
         << " column " << location.column
         << "\n";
  exit(1);
  
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  usage - Display usage
//
// DESCRIPTION
//
//  This function calls each tester
//

void usage(void) {

  cout << "\n\n";
  cout << "Usage: " << progname << " [-q][-v][-a][-io][-t] [<inputfile>]\n";
  cout << "\n";
  cout << "Where:  <inputfile> = XML file to read\n";
  cout << "\n";
  cout << "        -q  = \"Quiet mode\"\n";
  cout << "        -v  = \"Verbose mode\"\n";
  cout << "        -a  = \"Run all tests\" (default is \"current test only\")\n";
  cout << "        -io = \"Display I/O statistics\"\n";
  cout << "        -t  = \"Display timing statistics\"\n";
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  DisplayLexToken - Display a given XMLLexToken
//
// DESCRIPTION
//
//  This function displays the text representation of a given lexical token.
//

#pragma argsused

void DisplayLexToken(XMLLexToken token,char *buf, int bufl) {

  char        tbuf[256];
  int         typenamemax;
  const char *t;
  int         i;
  int         reml;
  
  // Indent
  for (i=0;i<indent;i++) cout << ' ';

  // Get the type's name and pad with spaces to max
  typenamemax = token.GetMaxTypeNameLength();
  t = token.GetTypeName();
  strcpy(tbuf,t);
  for (i=strlen(tbuf);i<typenamemax;i++)
    tbuf[i] = ' ';
  tbuf[typenamemax] = 0;
  
  // Print the type's name
  cout << tbuf << ": ";
  
  // Print the line/col/len
  cout << "Line/Col/Len = " << token.startline << "/" << token.startcol << "/" << token.length;
  
  // Print the first N characters if not whitespace...
  if (token.type != xmllex_TokenWhite && buf != NULL) {
    cout << "\t = ";
    for (i=0;i<token.length;i++,reml--)
      cout << buf[token.startoff+i];
  }

  cout << '\n';
  cout.flush();
    
  return;
  
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  DisplaySynToken - Display a given XMLSynToken
//
// DESCRIPTION
//
//  This function displays the text representation of a given syntax token.
//

#pragma argsused

void DisplaySynToken(XMLSynToken token, char *buf, int bufl) {

  char        tbuf[256];
  int         typenamemax;
  const char *t;
  int         i;
  
  // Indent
  for (i=0;i<indent;i++) cout << ' ';

  // Get the type's name and pad with spaces to max
  typenamemax = token.GetMaxTypeNameLength();
  t = token.GetTypeName();
  strcpy(tbuf,t);
  for (i=strlen(tbuf);i<typenamemax;i++)
    tbuf[i] = ' ';
  tbuf[typenamemax] = 0;
  
  // Print the type's name
  cout << tbuf << ": ";
  
  // Print the line/col/len
  cout << "Line/Col/Len = " << token.startline << "/" << token.startcol << "/" << token.length;

  // Print the error code if we have one
  if (token.error)
    cout << "***" << token.error << "*** ";
      
  // Print the first N characters if not whitespace or zero long...
  if (token.type != xmlsyn_TokenWhite && token.length && buf) {
    cout << "\t = ";
    for (i=0;i<token.length;i++)
      cout << buf[token.startoff+i];
  }

  cout << '\n';
  cout.flush();
    
  return;
  
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  DisplayDocumentStatistics - Display an XMLDocument's stats
//

void DisplayDocumentStatistics(XMLDocument *doc) {

  cout << "  " << doc->NodeCount()       << " current nodes\n";
  cout << "  " << doc->NodeTotal()       << " total nodes\n";
  cout << "  " << doc->HighestWidth()    << " highest width\n";
  cout << "  " << doc->HighestDepth()    << " highest depth\n";
  cout << "  " << doc->DistinctStrings() << " distinct strings\n";

}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  DisplayIOStatistics - Display an XMLDocument's stats
//

void DisplayIOStatistics(XMLIOStatistics *stats) {

  cout << "  Buffers allocated:      " << stats->buffersallocated       << "\n";
  cout << "  Buffer size:            " << stats->buffersize             << "\n";
  cout << "  Buffers freed:          " << stats->buffersfreed           << "\n"; 
  cout << "  Used IO buffers:        " << stats->buffersused            << "\n";
  cout << "  Unused buffers:         " << stats->buffersunused          << "\n";
  cout << "  Buffers in limbo:       " << stats->buffersinlimbo         << "\n";
  cout << "  Locked IO buffers:      " << stats->bufferslocked          << "\n";
  cout << "  Physical buffer bytes:  " << stats->bufferbytesphysical    << "\n";
  cout << "  Logical buffer bytes:   " << stats->bufferbyteslogical     << "\n";
  cout << "  Streams:                " << stats->streamtotal            << "\n";
  cout << "  Streams open 'r':       " << stats->streamopenread         << "\n";
  cout << "  Streams open 'w':       " << stats->streamopenwrite        << "\n";
  cout << "  Streams closed:         " << stats->streamclosed           << "\n";
  cout << "  Streams open 'rw':      " << stats->streamopenreadandwrite << "\n";
  cout << "  Physical reads:         " << stats->physicalreads          << "\n";
  cout << "  Physical bytes read:    " << stats->bytesreadphysical      << "\n";
  cout << "  Logical bytes read:     " << stats->bytesreadlogical       << "\n";
  cout << "  Physical writes:        " << stats->physicalwrites         << "\n";
  cout << "  Physical bytes written: " << stats->byteswritephysical     << "\n";
  cout << "  Logical bytes written:  " << stats->byteswritelogical      << "\n";
  cout << "  Logical seek() calls:   " << stats->seekcallslogical       << "\n";
  cout << "  Physical seek() calls:  " << stats->seekcallsphysical      << "\n";
  cout << "  Logical tell() calls:   " << stats->tellcallslogical       << "\n";
  cout << "  Physical tell() calls:  " << stats->tellcallsphysical      << "\n";
  cout << "  Buffer lock requests:   " << stats->lockcalls              << "\n";
  cout << "  Buffer unlock requests: " << stats->unlockcalls            << "\n";
  
  return;
  
}


@


1.5
log
@Read compiled works, need to figure out why it's slower than text!
@
text
@a16 1
#include <iostream.h>
@


1.4
log
@Added timing stats to test harness
@
text
@d70 10
a79 5
    
  cout << "  Parse error " << stat
       << " at line " << location.line
       << " column " << location.column
       << "\n";
@


1.3
log
@Parsing/compiling w3c's document works OK now
@
text
@d93 1
a93 1
  cout << "Usage: " << progname << " [-q][-v] [<inputfile>]\n";
d97 5
a101 2
  cout << "        -q = \"Quiet mode\"\n";
  cout << "        -v = \"Verbose mode\"\n";
@


1.2
log
@Complete IO stats - We're reading 2 times what we should!
@
text
@d120 1
d142 1
a142 1
    for (i=0;i<token.length;i++)
@


1.1
log
@Added beginnings of IO statistics, separated txmlutils
@
text
@d232 4
a235 1
 
d242 1
a242 1
  cout << "  Streams open:           " << stats->streamopentotal        << "\n";
d245 1
d247 1
d250 1
d253 4
@

