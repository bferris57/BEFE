head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.27.09.32.33;	author bferris;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.25.08.31.33;	author bferris;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.21.08.28.47;	author bferris;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.21.08.11.09;	author bferris;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.18.03.05.05;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.12.07.08.09;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.10.19.35.39;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.10.19.30.49;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    xmlstrmem.h - Definitions for the XMLString memory based implementation
  
  DESCRIPTION
    
    This file contains the definitions for the memory based implementation
    of the XMLString class.
    
    The design intent behind this class is to provide a "safe" implementation
    for copies of other forms of XMLStrings, generally for passing string
    values back to the caller.
    
  NOTE
  
    This class should be used sparingly since it can cause lots of heap
    fragmentation.
*/

#ifndef _xmlstrmem_h

#define _xmlstrmem_h

#include "xml.h"
#include "xmlstrbase.h"

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLStringMem - An in-memory XMLString
//

class XMLStringMem : public XMLStringHashed {

  //
  // Public member functions
  //
public:
  // Constructors/destructors
  XMLStringMem(XMLString *copyof = NULL);
  XMLStringMem(char *str);
  virtual ~XMLStringMem();
  // Get the len of the string
  virtual XMLError Length(int *len);
  // Substringing
  virtual XMLError SubString(int offset, int len, XMLString **substring);
  // Fragments
  virtual int      DoesLock(void);
  virtual XMLError LockFragment(int offset, byte **pointer, int *availlen);
  virtual XMLError UnlockFragment(int offset);
  // Mutable calls
  virtual int      IsMutable(void);
  virtual XMLError Truncate(void);
  virtual XMLError Append(byte *buf, int bufl);
  virtual XMLError Append(char *buf, int bufl = -1);
  virtual XMLError Append(XMLString *appendfrom);
  virtual XMLError SetLength(int newlen, byte willwith);
  
  //
  // Protected members
  //
protected:
  int      m_length;       /* Current string length */
  byte    *m_buf;          /* Current byte buffer */
};

#endif // _xmlstrmem_h
@


1.8
log
@Text writer working, don't like speed though
@
text
@a38 2
  friend XMLStringMem;
    
@


1.7
log
@Finished XMLBitMapString, ready to test
@
text
@d69 1
a69 1
  int      m_length;       /* Current length */
@


1.6
log
@Renamed source files for string implementations
@
text
@d63 2
a64 1

@


1.5
log
@Created XMLStringBase - API pretty clean for now
@
text
@d6 1
a6 1
    xmlsmem.h - Definitions for the XMLString memory based implementation
d23 1
a23 1
#ifndef _xmlsmem_h
d25 1
a25 1
#define _xmlsmem_h
d72 1
a72 1
#endif // _xmlsmem_h
@


1.4
log
@Implemented SubString() in all string classes
@
text
@d28 1
@


1.3
log
@Changed XMLStringMemory to inherit from XMLStringHashed
to reuse the Hashing code.
@
text
@d36 4
a39 1
class XMLStringMem : public XMLStringHashed {  
d50 2
@


1.2
log
@Added (char *) constructor to XMLStringMem
@
text
@d36 1
a36 1
class XMLStringMem : public XMLString {  
a56 5
  // Hashing
  virtual int      IsHashed(void);
  virtual XMLError Hash(void);
  virtual XMLError GetHash(XMLHash *hash);
  // Mutable calls specific to this class
a63 1
  XMLHash  m_hash;         /* Cached hash */
@


1.1
log
@Added XMLStringMem class
@
text
@d43 2
a44 1
  virtual ~XMLStringMem() = 0;
@

