head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.24.08.42.47;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.21.07.16.08;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.18.03.05.05;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.06.07.42.05;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Converted to GNU/C++ and using makefile
@
text
@/*----------------------------------------------------------------------------

  FILE
    
    xmlioscon.h - Definitions for the XML 'console' class
  
  DESCRIPTION

    The XMLIOStreamConsole class implements stream based I/O on console
    devices (stdin, stdout, stderr).
    
  NOTES
*/

#ifndef _xmlioscon_h

#define _xmlioscon_h

#include "xmlio.h"
#include "stdio.h"
#include "stdlib.h"

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLIOStreamCon - Manage Console I/O as an XMLIOStream
//
// DESCRIPTION
//
//  This class is used to perform console I/O using XMLIOStream methods.
//
 
class XMLIOStreamCon : public XMLIOStream {
  //
  // Public member functions
  //
public:
  // Constructor
  XMLIOStreamCon(XMLIOManager *manager);
  // Methods we're implementing
  virtual ~XMLIOStreamCon();
  virtual int CanRead(void);
  virtual int CanWrite(void);
  virtual int CanPosition(void);
  virtual int CanRewind(void);
  virtual int CanLockBuffer(void);
  virtual int IsOpen(void);
  virtual XMLIOManager::AccessMode GetAccessMode(void);
  virtual XMLError Open(char *url, int urllen,XMLIOManager::AccessMode access);
  virtual XMLError Close(void);
  virtual XMLError Length(int *len);
  virtual XMLError SubString(int offset, int len, XMLString **substring);
  virtual XMLError Read(byte *buf, int maxbufl, int *charsread);
  virtual XMLError ReadSome(byte *buf, int maxbufl, int *charsread, XMLIOBuffer **iobuf = NULL);
  virtual XMLError Write(byte *buf, int bufl);
  virtual XMLError WriteSome(byte *buf, int maxbufl, int *byteswritten);
  virtual XMLError Seek(int offset);
  virtual XMLError Rewind(void);
  virtual XMLError Tell(int *offset);
  //
  // Protected member functions
  //
protected:
  // Flushing dirty buffers
  virtual XMLError FlushBuffer(XMLIOBuffer *thebuf);
  //
  // Protected members
  //
protected:
  // General flags
  XMLIOManager::AccessMode  m_access;               // Open access mode
  unsigned                  m_isopen : 1;           // "Are we open?" (m_file==NULL if to dev://null)
  int                       m_length;               // Bytes read/written so far
  FILE                     *m_file;                 // Console device (stdin, stdout, stderr)
};

#endif // _xmlioscon_h
@


1.4
log
@Complete IO stats - We're reading 2 times what we should!
@
text
@d78 1
a78 1
#endif _xmlioscon_h
@


1.3
log
@Removed all : protected and : private (need to use friend instead)
@
text
@d49 1
@


1.2
log
@Implemented SubString() in all string classes
@
text
@d34 1
a34 1
class XMLIOStreamCon : protected XMLIOStream {
@


1.1
log
@Added XMLIOStreamCon class for console I/O
@
text
@d52 1
@

