head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.04.06.50.29;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.06.12.50;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.11.10.13;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    xmlcsrtext.cpp - Implementation of the XMLCursorText classes
  DESCRIPTION
    
    This file contains the implementation of a XML source parsing
    and source writing classes.
    
*/

//------------------------------------------------------------------------------

#include "xmlcsrtext.h"
#include "xmlelmbase.h"

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::XMLCursorTextReader  - Constructor
//  XMLCursorTextReader::~XMLCursorTextReader - Destructor
//
// NOTES
//
//  XMLCursorTextReader() does NOT take ownership of the string so ~XMLCursorTextReader()
//  will NOT delete it.
//

XMLCursorTextReader::XMLCursorTextReader(XMLDocumentBase *doc, XMLString *string)
  : XMLCursorReader(doc,string)
{

  // Initialise string fragment
  m_frag      = NULL;
  m_fragoff   = 0;
  m_fraglen   = 0;
  
  // Initialise state
  m_state   = State_Normal;
  
  // Initialise creation direction
  m_createdown = 0;
  
  // Initialise current attribute name string
  m_attributename = XMLTOKENNONE;

  // Register the input string
  RegisterInputString(string);
    
}

XMLCursorTextReader::~XMLCursorTextReader() {

  // Unlock the fragment if we've locked it
  if (m_frag)
    m_string->UnlockFragment(m_fragoff);
    
  // Free the attribute name if we're in the middle of creating one
  ReleaseToken(&m_attributename);
          
}


//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::Top  - Position to top element
//  XMLCursorTextReader::Up   - Position up one element
//  XMLCursorTextReader::Down - Position to first child element
//  XMLCursorTextReader::Next - Position to next sibling element
//
// DESCRIPTION
//
//  These functions override the default positioning behaviour of a cursor
//  because they don't make sense when parsing.
//

XMLError XMLCursorTextReader::Top(void) {
  return XMLErrorCsrNotCapable;
}
  
XMLError XMLCursorTextReader::Up(void) {
  return XMLErrorCsrNotCapable;
}
  
XMLError XMLCursorTextReader::Down(void) {
  return XMLErrorCsrNotCapable;
}
  
XMLError XMLCursorTextReader::Next(void) {
  return XMLErrorCsrNotCapable;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::Walk - The XML parser
//
// DESCRIPTION
//
//  The purpose of this function is to construct one more XMLElement from the
//  input stream.
//

XMLError XMLCursorTextReader::Walk(void) {

  XMLError    result;     // Return code
  StackEntry *tos;        // Current top of stack
  XML::Class  eclass;     // An element type
  int         dead;       // "Are we dead?"

  // Initialise
  dead = 0;
  
  // Clear parse error
  m_parseerror = XMLErrorNone;
  
  // Until we've created something or have an error
  for (;;) {
  
    // Get next syntax token
    m_token = m_syntax.NextToken();

    // If error, return syntax error
    if (m_token.error) {
      result = m_token.error;
      goto DONE;
    }
    
    // If unknown token type, we've got problems...
    if (m_token.type <= xmlsyn_TokenNull ||
        m_token.type >= xmlsyn_TokenMAX)
      goto INTERNALERROR;
       
    // If syntax analyser needs more data      
    if (m_token.type == xmlsyn_TokenNeedMoreData) {
    
      // If we have a locked fragment
      if (m_frag) {
        
        // Unlock it
        result = m_string->UnlockFragment(m_fragoff);
        if (result) goto ERROR;

        // Clear fragment pointer
        m_frag = NULL;
        
      }
      
      // Position to next fragment
      m_fragoff += m_fraglen;
      
      // If we've got some left...
      if (m_fragoff < m_stringlen) {
      
        // Try locking it
        result = m_string->LockFragment(m_fragoff,&m_frag,&m_fraglen);
        if (result) goto ERROR;

        // Pass the fragment to the syntax analyser
        m_syntax.MoreData(m_frag,m_fraglen);
        
      }
    
      continue;
    }
          
    // If we're finished (end of string)...
    if (m_token.type == xmlsyn_TokenEndOfStream) {
    
      // If we weren't in the normal state, we've got problems...
      if (m_state != State_Normal &&
          m_state != State_InPI) goto UNEXPECTEDEOS;

      // If we're supposed to create "down", error
      if (m_createdown) goto UNTERMINATED;

      // If we've got more than one on the stack...
      if (m_stacksize > 1) {
      
        // Pop the stack
        result = Pop();
        if (result) goto ERROR;
        
        // This one hasn't been terminated
        goto UNTERMINATED;
      }
      
      // Time to commit suicide because our job is finished
      result = UnregisterAsConstructor();
      if (result) goto ERROR;
      delete this;
      dead = 1;
                  
      goto ENDOFDOC;
      
    }
    
    // If in normal state and this is a creating element...
    if (m_state == State_Normal && m_token.type != xmlsyn_TokenElementClose) {
    
      // Make sure it's one that really creates
      switch (m_token.type) {
      
      case xmlsyn_TokenProcessingInstruction:
        eclass = XML::ClassPI;
        break;
      
      case xmlsyn_TokenDTD:
        eclass = XML::ClassDTD;
        break;
      
      case xmlsyn_TokenElementOpen:
        eclass = XML::ClassSimple;
        break;
      
      case xmlsyn_TokenText:                 
      case xmlsyn_TokenWhite:
      case xmlsyn_TokenEntity:               
        eclass = XML::ClassText;
        break;

      case xmlsyn_TokenComment:
        eclass = XML::ClassComment;
        break;
        
      case xmlsyn_TokenCDATA:
        eclass = XML::ClassCDATA;
        break;
        
      default:
        goto INTERNALERROR;                
      }
      
      // Create the new element (down or after)
      if (m_createdown)
        result = NewElementBelow(eclass,NULL);
      else
        result = NewElementAfter(eclass,NULL);
      if (result) goto ERROR;
      
      // Force our create direction to be 'Create After'
      m_createdown = 0;
      
    }
    
    // Call handler based on our state
    switch (m_state) {
    case State_Normal:    result = StateNormal();       break;
    case State_InElement: result = StateInElement();    break;
    case State_InPI:      result = StateInPI(); break;
    default:              goto INTERNALERROR;
    }

    // If we have an error...
    if (result) goto ERROR;

    // If we're in normal state, we're finished
    if (m_state == State_Normal)
      break;    
  }
  
  goto OK;
  
OK:
  result = XMLErrorNone;
  goto DONE;

INTERNALERROR:
  result = XMLErrorInternal;
  goto DONE;

UNEXPECTEDEOS:
  result = XMLErrorUnexpectedEndOfInput;
  goto DONE;

UNTERMINATED:
  result = XMLErrorUnterminatedElement;
  goto DONE;

ENDOFDOC:
  result = XMLErrorCsrEndOfDocument;
  goto DONE;
          
ERROR:
  goto DONE;
    
DONE:

  // Free stashed attribute name
  if (!dead)
    ReleaseToken(&m_attributename);
  
  // Save last parse error
  m_parseerror = result;
  
  // Set parse location if we have an error
  if (result != XMLErrorNone) {
    m_parselocation.column = m_token.startcol;
    m_parselocation.line   = m_token.startline;
    m_parselocation.offset = m_token.startoff;
  }
    
  return result;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::StateNormal - Handle syntax token in State_Normal state
//
// DESCRIPTION
//
//  This function handles syntax tokens while in the State_Normal state.
//
// NOTE
//

XMLError XMLCursorTextReader::StateNormal() {

  XMLError        result;  // Return code
  XMLString      *string;  // TEMP: A string we created
  XMLToken        token;   // TEMP: A token we created
  StackEntry     *tos;     // Current stack entry
  XML::Class      eclass;  // An element class
  int             equals;  // Temp: "Do names compare?"
  XMLElementBase *element; // An element
  XMLToken        type;    // Type token
  
  // Initialise
  string = NULL;
  type   = XMLTOKENNONE;
    
  // Get current stack entry
  tos = TOS();
  if (tos == NULL) goto INTERNALERROR;
  
  // Based on the token type...
  switch (m_token.type) {
    
  // Have a new processing instruction
  case xmlsyn_TokenProcessingInstruction:      
    
    // Create a string for the PI's type
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;
    
    // Find the string token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
    
    // Set the PI's type
    result = tos->element->SetType(token);
    if (result) goto ERROR;

    // It took, we don't own the string token now
    token = XMLTOKENNONE;
        
    // Change state
    m_state = State_InPI;
    
    break;
    
  // Have a DTD token
  case xmlsyn_TokenDTD:
  
    // Create a string for the DTD's value
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Get the value string token
    result = NewToken(string,&token);
    if (result) goto ERROR;

    // We don't own the string now
    string = NULL;
            
    // Set the DTD's value
    result = tos->element->SetValue(token);
    if (result) goto ERROR;
    
    // It took, we don't have a token now
    token = XMLTOKENNONE;
        
    break;
      
  // Have a new element start
  case xmlsyn_TokenElementOpen:
  
    // Create a string for the element's name
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Get the string token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
        
    // Set the element's type
    result = tos->element->SetType(token);
    if (result) goto ERROR;
    
    // It took, we don't own the token now
    token = XMLTOKENNONE;
        
    // Change state
    m_state= State_InElement;
    
    break;
  
  // Have the end of an element      
  case xmlsyn_TokenElementClose:
  
    // If we're supposed to create "down"...
    if (m_createdown) {
    
      // The element to test against is the TOS
      element = tos->element;
    }
    
    // If we're not supposed to create "down"...
    else {
    
      // If the stack's < 2 deep it's mismatched
      if (m_stacksize < 2) goto MISMATCHED;
      
      // The element is the 1 up
      element = (tos-1)->element;
    }
    
    // Get the element's class
    eclass = element->GetClass();
    
    // If the element isn't a simple/complex one, it's not named
    if (eclass != XML::ClassSimple &&
        eclass != XML::ClassComplex)
      goto MISMATCHED;
      
    // Create a string for the end element's type
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Turn it into a string token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
    
    // Get the element's type token
    result = element->GetType(&type);
    if (result) goto ERROR;
    
    // If they're not the same, mismatched
    if (token != type) goto MISMATCHED;

    // Release the token
    result = ReleaseToken(&token);
    if (result) goto ERROR;
    token = XMLTOKENNONE;
        
    // If we're supposed to create "down"...
    if (m_createdown) {
    
      // Simply say to "do NOT create down"
      m_createdown = 0;
    }
      
    // If we're not supposed to create "down"...
    else {
    
      // Have to go up one
      result = Pop();
      if (result) goto ERROR;
    }
    
    break;
  
  // Have some text, whitespace, entity, comment, CDATA
  case xmlsyn_TokenText:
  case xmlsyn_TokenWhite:
  case xmlsyn_TokenEntity:
  case xmlsyn_TokenComment:
  case xmlsyn_TokenCDATA:
    
    // Create a string for the elements's value
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Turn it into a string token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
        
    // Set the element's value
    result = tos->element->SetValue(token);
    if (result) goto ERROR;
    
    // It took, we don't own the token now
    token = XMLTOKENNONE;
        
    break;
  
  // Some other token
  default:
  
    goto INTERNALERROR;
  }
      
  goto OK;
  
OK:
  result = XMLErrorNone;
  goto DONE;

INTERNALERROR:
  result = XMLErrorInternal;
  goto DONE;

MISMATCHED:
  result = XMLErrorMismatchedEndElement;
  goto DONE;
      
ERROR:
  goto DONE;
    
DONE:

  // Free the string/token if we have any
  if (string)
    delete string;
  ReleaseToken(&token);
    
  return result;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::StateInElement - Handle syntax token in state InElement
//
// DESCRIPTION
//
//  This function handles syntax tokens while in the State_InElement state.
//

XMLError XMLCursorTextReader::StateInElement(void) {

  XMLError    result;     // Return code
  XMLString  *string;     // TEMP: A new string
  XMLToken    token;      // TEMP: A new token
  StackEntry *tos;        // Current element
  
  // Initialise
  string = NULL;
  token  = XMLTOKENNONE;

  // Get current element
  tos = TOS();
  if (tos == NULL) goto INTERNALERROR;
  
  // Based on the token type...
  switch (m_token.type) {
  
  // Have the end of an element      
  case xmlsyn_TokenElementClose:
  
    // Change state 
    m_state = State_Normal;
    
    break;
  
  // Have an attribute name
  case xmlsyn_TokenElementAttributeName: 

    // Create a string for the attribute name
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Turn it into a string token
    result = NewToken(string,&m_attributename);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
    
    // Make sure the attribute doesn't already exist 
    result = tos->element->FindAttribute(m_attributename);
    
    // If it was there...
    if (result != XMLErrorXMLAttributeNotFound) {
    
      // Delete stashed attribute name
      ReleaseToken(&m_attributename);
      m_attributename = XMLTOKENNONE;
      
      // Report the error
      goto DUPLICATEATTRIBUTE;
    }

    break;

  // Have an attribute value            
  case xmlsyn_TokenElementAttributeValue:
    
    // If we've got no attribute name, error
    if (m_attributename == 0) goto INTERNALERROR;
    
    // Create a string for the value
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Turn it into a string token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
        
    // Create the attribute in the element
    result = tos->element->CreateAttribute(m_attributename,token);
    if (result) goto ERROR;
    
    // We don't own either tokens now
    ReleaseToken(&m_attributename);
    ReleaseToken(&token);
    
    break;
          
  case xmlsyn_TokenElementContents:      
    
    // Change the element's class to Complex
    result = tos->element->SetClass(XML::ClassComplex);
    if (result) goto ERROR;
    
    // Change state
    m_state = State_Normal;

    // Set creation direction
    m_createdown = 1;
        
    break;
  
  // Have some whitespace (ignore it)
  case xmlsyn_TokenWhite:
  
    break;
    
  // Some other token
  default:
  
    goto INTERNALERROR;
  }
    
  goto OK;
  

INTERNALERROR:
  result = XMLErrorInternal;
  goto DONE;

DUPLICATEATTRIBUTE:
  result = XMLErrorDuplicateAttribute;
  goto DONE;

ERROR:
  goto DONE;
      
OK:
  result = XMLErrorNone;
  goto DONE;

DONE:

  // If we've still got a string/token, free them
  if (string)
    delete string;
  if (token != XMLTOKENNONE)
    ReleaseToken(&token);
    
  return result;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextReader::StateInPI - Handle syntax token in state InPI
//
// DESCRIPTION
//
//  This function handles syntax tokens while in the State_InPI state.
//

XMLError XMLCursorTextReader::StateInPI(void) {

  XMLError    result;     // Return code
  XMLString  *string;     // A new string
  XMLToken    token;      // A new token
  StackEntry *tos;        // Current element
  
  // Initialise
  string = NULL;
  token  = XMLTOKENNONE;

  // Get current element
  tos = TOS();
  if (tos == NULL) goto INTERNALERROR;
  
  // Based on the token type...
  switch (m_token.type) {
  
  // Have processing instruction text
  case xmlsyn_TokenProcessingText:

    // Create a string for the PI's value
    result = m_string->SubString(m_token.startoff,m_token.length,&string);
    if (result) goto ERROR;

    // Turn it into a token
    result = NewToken(string,&token);
    if (result) goto ERROR;
    
    // We don't own the string now
    string = NULL;
        
    // Set the element's value
    result = tos->element->SetValue(token);
    if (result) goto ERROR;
    
    // It took, we don't own the token now
    token = 0;
        
    break;
      
  // Have end of PI
  case xmlsyn_TokenProcessingEnd:
  
    // Switch state
    m_state = State_Normal;
    
    break;
    
  // Some other token
  default:
  
    goto INTERNALERROR;
  }
    
  goto OK;
  

INTERNALERROR:
  result = XMLErrorInternal;
  goto DONE;

ERROR:
  goto DONE;
      
OK:
  result = XMLErrorNone;
  goto DONE;

DONE:

  // If we've still got a string/token, free them
  if (string)
    delete string;
  ReleaseToken(&token);
    
  return result;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextWriter::XMLCursorTextWriter  - Constructor
//  XMLCursorTextWriter::~XMLCursorTextWriter - Destructor
//

XMLCursorTextWriter::XMLCursorTextWriter(XMLDocumentBase *doc, XMLString *string)
  : XMLCursorWriter(doc,string)
{
}

XMLCursorTextWriter::~XMLCursorTextWriter() {
          
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextWriter::Write - Write XML representing current element
//
// DESCRIPTION
//
//  The purpose of this function is to append text XML to a string.
//
// NOTES
//
//  If this function returns an error, the appended contents of the
//  string are in an indeterminate state.
//

XMLError XMLCursorTextWriter::Write(void) {

  XMLError    result;        // Return code
  int         m_startdepth;  // Depth we started at
  StackEntry *tos;           // Current top of stack
  XML::Class  eclass;        // An element type
  byte        op;            // Current op to output
  XMLToken    token;         // Current token
  XMLToken    token2;        // Another token
  int         nattributes;   // Number of attributes
  int         i;             // TEMP: Loop counter
  int         next;          // "Should we position to next one?"
    
  // Sanity checks
  if (m_document == NULL) goto NODOCUMENT;
  if (m_string   == NULL) goto NOSTRING;

  // Save current stack depth
  m_startdepth = m_stacksize;

  // If we're not positioned anywhere in the document
  if (m_startdepth == 0) {
  
    // Simply walk once and we'll get the first one
    result = Walk();
    if (result && result != XMLErrorCsrEndOfDocument)
      goto ERROR;
      
  }
  
  // For each element
  while (result != XMLErrorCsrEndOfDocument && m_stacksize > m_startdepth) {

    // Get TOS
    tos = TOS();

    // Get current element's class
    eclass = tos->element->GetClass();

    // Assume we'll position to next one
    next = 1;
        
    // Based on current element class...
    switch (eclass) {

    // Complex/simple elements...    
    case XML::ClassComplex:
    case XML::ClassSimple:

      // Emit '<'
      result = Emit("<");
      if (result) goto ERROR;
          
      // Get and emit the element's type
      result = tos->element->GetType(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;
      
      // Get number of attributes
      result = tos->element->GetNAttributes(&nattributes);
      if (result) goto ERROR;
      
      // For each attribute...
      for (i = 0; i < nattributes;  i++) {

        // Emit ' '
        result = Emit(" ");
        if (result) goto ERROR;
              
        // Get the attribute name and value
        result = tos->element->GetAttribute(i,&token,&token2);
        if (result) goto ERROR;
        
        // Emit name
        result = EmitToken(token);
        if (result) goto ERROR;
        
        // If it has a value...
        if (token2) {
        
          // Emit '='
          result = Emit("=");
          if (result) goto ERROR;
        
          // For now (yuck) we'll assume it's OK to output " around the value
          // it's not really but just to get it going...
          result = Emit("\"");
          if (result) goto ERROR;
          result = EmitToken(token2);
          if (result) goto ERROR;
          result = Emit("\"");
          if (result) goto ERROR;
        }
      }
      
      // If simple class...
      if (eclass == XML::ClassSimple) {
      
        // Emit "/>"
        result = Emit("/>");
        if (result) goto ERROR;
      }
      
      // If complex class...
      else {
      
        // Emit '>'
        result = Emit(">");
        if (result) goto ERROR;

        // Try going down
        result = Down();
        if (result && result != XMLErrorCsrAtLeaf) goto ERROR;
        
        // If nothing down there...
        if (result == XMLErrorCsrAtLeaf) {
        
          // Emit '</name>'
          result = Emit("</");
          if (result) goto ERROR;
          result = EmitToken(token);
          if (result) goto ERROR;
          result = Emit(">");
          if (result) goto ERROR;
        }
        
        // If something down there...
        else {
        
          // Don't position to next
          next = 0;
        }
      }
      
      break;
      
    // PCDATA
    case XML::ClassPCDATA:

      // Try going down
      result = Down();
      if (result && result != XMLErrorCsrAtLeaf) goto ERROR;
      
      // If nothing down there...
      if (result == XMLErrorCsrAtLeaf) {
      }
        
      // If something down there...
      else {
      
        // Don't position to next
        next = 0;
      }
      
      break;
                
    // Text
    case XML::ClassText:
    case XML::ClassEntity:

      // Get and emit the value
      result = tos->element->GetValue(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;
      
      break;
            
    // CDATA
    case XML::ClassCDATA:

      // Emit "<![CDATA["
      result = Emit("<![CDATA[");
      if (result) goto ERROR;
          
      // Get and emit the value
      result = tos->element->GetValue(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;

      // Emit "]]>"
      result = Emit("]]>");
      if (result) goto ERROR;
            
      break;
            
    // Comment
    case XML::ClassComment:

      // Get and emit the value
      result = tos->element->GetValue(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;

      break;
                
    // Processing Instruction
    case XML::ClassPI:
    
      // Emit the begin PI
      result = Emit("<?");
      if (result) goto ERROR;

      // Get and emit the type
      result = tos->element->GetType(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;
      
      // Get and emit the value
      result = tos->element->GetValue(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;

      // Emit the end PI
      result = Emit("?>");
      if (result) goto ERROR;
      
      break;
      
    // DTD
    case XML::ClassDTD:
    
      // Emit the begin DTD
      result = Emit("<!DOCTYPE");
      if (result) goto ERROR;
      
      // Get and emit the value
      result = tos->element->GetValue(&token);
      if (result) goto ERROR;
      result = EmitToken(token);
      if (result) goto ERROR;
      
      // Emit the end DTD
      result = Emit(">");
      if (result) goto ERROR;
      
      break;
      
    default:
      
      goto UNKNOWNCLASS;      
    }

    // Position to next element if we're supposed to
    while (next) {
    
      // Try positioning to next
      result = Next();
      
      // If we've reached the end of the document, we're finished
      if (result == XMLErrorCsrEndOfDocument)
        break;
        
      // If we got error other than Last Child...
      if (result && result != XMLErrorCsrAtLastChild) goto ERROR;

      // Assume we're not going to keep trying
      next = 0;
            
      // If nothing there...
      if (result == XMLErrorCsrAtLastChild) {
      
        // Assumption wrong, we'll keep trying next
        next = 1;
        
        // Try up
        result = Up();
        if (result) goto ERROR;
        
        // If we're at the starting depth, we're finished
        if (m_stacksize == m_startdepth)
          break;
          
        // Get the TOS
        tos = TOS();
        
        // Get the element's class
        eclass = tos->element->GetClass();
        if (result) goto ERROR;
        
        // If it's complex...
        if (eclass == XML::ClassComplex) {
        
          // Get the element's type
          result = tos->element->GetType(&token);
          if (result) goto ERROR;
          
          // Emit '</'
          result = Emit("</");      
          if (result) goto ERROR;
          
          // Emit the type
          result = EmitToken(token);
          if (result) goto ERROR;
          
          // Emit '>'
          result = Emit(">");      
          if (result) goto ERROR;      
        }
      }      
    }
  }
  
  // We've reached the end of the doc, until back at original start node...
  for (;;) {
  
    // Pop the stack
    result = Pop();
    if (result) goto ERROR;
    
    // Get top entry
    tos = TOS();

    // If we've run out, we're at the top of the document
    if (tos == NULL)
      break;
      
    // Get the element's class
    eclass = tos->element->GetClass();
    
    // Based on the class...
    switch (eclass) {
    
    // It's complex...
    case XML::ClassComplex:
    
      // Get the element's type
      result = tos->element->GetType(&token);
      if (result) goto ERROR;
      
      // Emit '</'
      result = Emit("</");      
      if (result) goto ERROR;
      
      // Emit the type
      result = EmitToken(token);
      if (result) goto ERROR;
      
      // Emit '>'
      result = Emit(">");      
      if (result) goto ERROR;
      
      break;
      
    // Don't know what it is...
    default:
    
      goto INTERNALERROR;
    }
    
    // If we're at original depth, we're finished
    if (m_stacksize <= m_startdepth)
      break;
  }
  
  goto OK;
    
NODOCUMENT:
  result = XMLErrorCompileNoDocument;
  goto DONE;
  
NOSTRING:
  result = XMLErrorCompileNoString;
  goto DONE;

ERROR:
  goto DONE;
  
OUTOFMEMORY:
  result = XMLErrorOutOfMemory;
  goto DONE;
  
UNKNOWNCLASS:
  result = XMLErrorCompileUnknownClass;
  goto DONE;

INTERNALERROR:
  result = XMLErrorInternal;
  goto DONE;
  
OK:
  result = XMLErrorNone;
  goto DONE;
  
DONE:
        
  return result;
}

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  XMLCursorTextWriter::EmitToken - Emit a token
//
// DESCRIPTION
//
//  The purpose of this function is to output a single token.
//

XMLError XMLCursorTextWriter::EmitToken(XMLToken token) {

  XMLError   result;   // Return code
  XMLString *string;   // String to output
  
  // Get the token value string
  result = ResolveToken(token,&string);
  if (result) goto ERROR;
    
  // Emit the value
  result = Emit(string);
  if (result) goto ERROR;
    
  goto OK;
    
ERROR:
  goto DONE;

OK:
  result = XMLErrorNone;
  goto DONE;
    
DONE:

  return result;
}

@


1.3
log
@More work on HTMLTidy and HTML parsing
@
text
@d621 1
a621 1
    if (m_attributename == NULL) goto INTERNALERROR;
d746 1
a746 1
    token = NULL;
@


1.2
log
@Added RegisterInputString() to XMLDocumentBase
@
text
@d895 1
a895 1
        // Emit name=
a897 2
        result = Emit("=");
        if (result) goto ERROR;
d899 16
a914 8
        // For now (yuck) we'll assume it's OK to output " around the value
        // it's not really but just to get it going...
        result = Emit("\"");
        if (result) goto ERROR;
        result = EmitToken(token2);
        if (result) goto ERROR;
        result = Emit("\"");
        if (result) goto ERROR;
@


1.1
log
@Moved parser to xmlcsrtext, generic Reader/Writer cursors
@
text
@d49 4
a52 1
  
@

