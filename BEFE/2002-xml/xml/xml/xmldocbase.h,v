head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.29.06.12.50;	author bferris;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.25.21.40.08;	author bferris;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.24.03.31.28;	author bferris;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.23.13.05.43;	author bferris;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.23.09.05.49;	author bferris;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.23.07.42.41;	author bferris;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.22.07.09.01;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.21.10.41.22;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.21.07.11.16;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.21.05.41.44;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    xmldocbase.h - Definitions for the XMLDocumentBase class
  
  DESCRIPTION
    
    This file contains the definitions for base implementation of the
    XMLDocument class.
*/

#ifndef _xmldocbase_h
#define _xmldocbase_h

#include "xml.h"
#include "xmlstrtable.h"

//
// External classes
//

class XMLManagerBase;
class XMLCursorBase;
class XMLCursorFree;
class XMLElementBase;

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLDocument - XML Document
//
// DESCRIPTION
//
//  This class represents a single XML document.  
//

class XMLDocumentBase : public XMLDocument {

  friend class XMLManagerBase;
  friend class XMLCursor;
  friend class XMLCursorBase;
  friend class XMLCursorFree;
  friend class XMLElementBase;
  
  //
  // Public member functions
  //
  // NOTE: Strings copied
  //
public:
  // Constructors/destructors
  XMLDocumentBase(XMLManagerBase *owner = NULL);
  virtual ~XMLDocumentBase();
  
  // Cursors
  virtual XMLError NewCursor(XMLCursor **cursor);

  // Statistics
  virtual int NodeCount(void);
  virtual int NodeTotal(void);
  virtual int HighestWidth(void);
  virtual int HighestDepth(void);
  
  // Query
  virtual XMLError HighestToken(XMLToken *hightoken);
  virtual int      UsedTokens(void);
    
  // Parse error
  virtual XMLError GetLastParseError(XMLLocation *location = NULL);
  
  // Tuning
  virtual XMLError SetOptimalNodes(int optimalnodes);
  
  //
  // Protected member functions
  //
  // NOTE: Strings passed by reference NOT value.
  //
  
protected:
  // Root element
  virtual XMLError       GetRootElement(XMLElementBase **root);
  virtual XMLError       SetRootElement(XMLElementBase *element);

  // Cursors 
  virtual XMLError       RemoveCursor(XMLCursorBase *cursor);
  virtual XMLError       AddCursor(XMLCursorBase *cursor);
  virtual XMLError       LeastCursor(XMLCursorBase **cursor);
  virtual XMLCursorBase *GetConstructor(void);
  virtual XMLError       SetConstructor(XMLCursorBase *cursor);
  virtual XMLCursorBase *GetDestructor(void);
  virtual XMLError       SetDestructor(XMLCursorBase *cursor);
  
  // Factories (to create friendly related classes)
  virtual XMLError       NewString(XMLString **string) = 0;
  virtual XMLError       NewElement(XML::Class eclass,XMLElementBase **element) = 0;
  
  // String <-> token mapping
  virtual XMLError       NewToken(XMLString *string, XMLToken *index);
  virtual XMLError       RemoveToken(XMLToken index);
  virtual XMLError       ResolveToken(XMLToken index, XMLString **string);
  virtual XMLError       ResolveString(XMLString *string,XMLToken *token);
  virtual XMLError       RegisterInputString(XMLString *string);
    
  // Event notification
  virtual XMLError       EventRemovedElement(XMLElementBase *element);
  
  //
  // Protected members
  //
protected:
  
  // Manager's document chain
  XMLManagerBase   *m_manager;       // Document manager
  XMLDocumentBase  *m_nextdoc;       // Next document in manager's chain
  XMLDocumentBase  *m_prevdoc;       // Previous document in manager's chain
  
  // Document root
  XMLElementBase   *m_root;          // Root element (leftmost)
  
  // Cursor list
  XMLCursorBase    *m_firstcursor;   // First cursor on chain
  XMLCursorBase    *m_lastcursor;    // Last cursor on chain

  // Special cursors
  XMLCursorBase    *m_constructor;
  XMLCursorBase    *m_destructor;
  
  // Token tables
  XMLStringTable   *m_tokens;        // String <-> token mapping table
  
  // Owned input strings (for reclaiming tokens)
  int               m_maxinstrings;  // Maximum owned input strings (size of m_instrings)
  int               m_numinstrings;  // Number of owned input strings
  XMLString       **m_instrings;     // List of owned input strings
  
  // Statistics 
  int               m_nodecount;     // Current number of nodes
  int               m_nodetotal;     // Total number of nodes (life total)
  int               m_highwidth;     // Maximum children
  int               m_highdepth;     // Maximum depth

  // Optimal nodes
  int              m_optimalnodes;
  
  // Parse error
  XMLError         m_parseerror;     // Error
  XMLLocation      m_parselocation;  // Error location (if error != XMLErrorNone)
}; 

#endif // _xmldocbase_h
@


1.10
log
@Added RegisterInputString() to XMLDocumentBase
@
text
@d42 5
a46 5
  friend XMLManagerBase;
  friend XMLCursor;
  friend XMLCursorBase;
  friend XMLCursorFree;
  friend XMLElementBase;
@


1.9
log
@Plugged compile write into manager... Need to write emit functions
@
text
@d106 2
a107 1
  
d117 3
a119 3
  XMLManagerBase  *m_manager;        // Document manager
  XMLDocumentBase *m_nextdoc;        // Next document in manager's chain
  XMLDocumentBase *m_prevdoc;        // Previous document in manager's chain
d122 1
a122 1
  XMLElementBase  *m_root;           // Root element (leftmost)
d125 2
a126 2
  XMLCursorBase   *m_firstcursor;    // First cursor on chain
  XMLCursorBase   *m_lastcursor;     // Last cursor on chain
d129 2
a130 2
  XMLCursorBase   *m_constructor;
  XMLCursorBase   *m_destructor;
d133 6
a138 1
  XMLStringTable  *m_tokens;        // String <-> token mapping table
d141 4
a144 4
  int              m_nodecount;      // Current number of nodes
  int              m_nodetotal;      // Total number of nodes (life total)
  int              m_highwidth;      // Maximum children
  int              m_highdepth;      // Maximum depth
@


1.8
log
@Added DistinctStrings() stat query to XMLDocument
@
text
@a65 1
  virtual int DistinctStrings(void);
d67 4
@


1.7
log
@All tokenised, ready to test
@
text
@d66 1
@


1.6
log
@Added token table to XMLDocumentBase - Not used yet
@
text
@d46 1
d97 5
a101 4
  // String <-> token mapping 
  virtual XMLError       NewToken(XMLString *string, int *index);
  virtual XMLError       RemoveToken(int index);
  virtual XMLError       ResolveToken(int index, XMLString **string);
@


1.5
log
@Changed 'Type' to 'Class' and 'Name' to 'Type'
@
text
@d18 1
d77 1
d96 5
d110 3
a112 3
  XMLManagerBase  *m_manager;
  XMLDocumentBase *m_nextdoc;
  XMLDocumentBase *m_prevdoc;
d115 1
a115 1
  XMLElementBase *m_root;
d118 2
a119 2
  XMLCursorBase *m_firstcursor;
  XMLCursorBase *m_lastcursor;
d122 5
a126 2
  XMLCursorBase *m_constructor;
  XMLCursorBase *m_destructor;
d129 4
a132 4
  int            m_nodecount;  // Current number of nodes
  int            m_nodetotal;  // Total number of nodes (life total)
  int            m_highwidth;  // Maximum children
  int            m_highdepth;  // Maximum depth
d135 1
a135 1
  int            m_optimalnodes;
d138 2
a139 2
  XMLError       m_parseerror;     // Error
  XMLLocation    m_parselocation;  // Error location (if error != XMLErrorNone)
@


1.4
log
@Implemented XMLManager
@
text
@d92 1
a92 1
  virtual XMLError       NewElement(XML::Type type,XMLElementBase **element) = 0;
@


1.3
log
@Added GetParseError() to doc and cursor and tester
@
text
@d23 1
d41 1
d53 1
a53 1
  XMLDocumentBase();
d55 1
a55 7
  // Setters/getters
  virtual XMLError GetURL(XMLString **url);
  virtual XMLError SetURL(XMLString *url);
  virtual XMLError GetVersion(XMLString **version);
  virtual XMLError SetVersion(XMLString *version);
  // Parsing
  virtual XMLError SetSourceXML(XMLString *input);
d68 3
d78 2
a79 2
  virtual XMLError   GetRootElement(XMLElementBase **root);
  virtual XMLError   SetRootElement(XMLElementBase *element);
d82 7
a88 7
  virtual XMLError   RemoveCursor(XMLCursor *cursor);
  virtual XMLError   AddCursor(XMLCursor *cursor);
  virtual XMLError   LeastCursor(XMLCursor **cursor);
  virtual XMLCursor *GetConstructor(void);
  virtual XMLError   SetConstructor(XMLCursor *cursor);
  virtual XMLCursor *GetDestructor(void);
  virtual XMLError   SetDestructor(XMLCursor *cursor);
d91 2
a92 2
  virtual XMLError   NewString(XMLString **string) = 0;
  virtual XMLError   NewElement(XML::Type type,XMLElementBase **element) = 0;
d95 1
a95 1
  virtual XMLError   EventRemovedElement(XMLElementBase *element);
d102 5
a108 2
  XMLString      *m_url;
  XMLString      *m_version;
a117 3
  // Source XML
  XMLString     *m_source;
  
d119 4
a122 4
  int m_nodecount;  // Current number of nodes
  int m_nodetotal;  // Total number of nodes (life total)
  int m_highwidth;  // Maximum children
  int m_highdepth;  // Maximum depth
d124 3
d128 2
a129 2
  XMLError    m_parseerror;     // Error
  XMLLocation m_parselocation;  // Error location (if error != XMLErrorNone)
@


1.2
log
@Added XMLElementBase, got rid of XMLElement (it's not exposed in API)
@
text
@d69 3
d125 3
@


1.1
log
@Implemented XMLDocumentBase
@
text
@d25 1
d76 2
a77 2
  virtual XMLError   GetRootElement(XMLElement **root);
  virtual XMLError   SetRootElement(XMLElement *element);
d90 1
a90 1
  virtual XMLError   NewElement(XML::Type type,XMLElement **element) = 0;
d93 1
a93 1
  virtual XMLError   EventRemovedElement(XMLElement *element);
d101 3
a103 3
  XMLElement *m_root;
  XMLString  *m_url;
  XMLString  *m_version;
@

