head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.24.02.54.48;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.04.17.35.44;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.29.18.34.49;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    miscellaneous.cpp - General useful functions
  
  FUNCTIONS
  
    NextPrime - Compute next prime number on/after a given number
    crc32init - Initialise 32-bit CRC algorithm (optional)
    crc32     - Calculate/continue calculating a 32-bit CRC

  NOTES
  
    The crc32 algorithm is modified to auto-generate the table if it
    hasn't been generated.  It was nicked from the following URL...
    
      http://remus.rutgers.edu/~rhoads/Code/code.html
          
*/

//------------------------------------------------------------------------------
//
// FUNCTION
//
//  NextPrime - Calculate next prime >= a given number
//
// DESCRIPTION
//
//
//  This function calculates the next prime number >= a given integer.
//  It is quite handy to do this type of thing when you're using hash tables.
//

int NextPrime(int seed)
{
  int i;
  int half;

  // Start on next odd number
  if (seed%2==0)
    seed++;

  // Until we found one...
  for (;;) {
  
    // Initialise this iteration
    half = seed/2;
    
    // Walk from 1 to one half the current seed to see if it is prime...
    for (i=3;i<=half;i++)
      if (seed%i==0) break;
    
    // If we found it, break
    if (i>half)
      break;
    seed += 2;
  }

  return seed;
}


//------------------------------------------------------------------------------
//
// FUNCTION
//
//  crc32init - Initialise 32-bit CRC algorithm (optional)
//  crc32     - Calculate/continue calculating a 32-bit CRC
//
// DESCRIPTION
//
//  These functions are used to calculate or continue calculating
//  a 32-bit CRC.
//
//  The caller does NOT have to call crc32init to initialise the
//  32-bit crc table because crc32 calls it if it hasn't been called.
//
//  The crc32 function, given a 'seed', continues calculating the
//  32-bit CRC given more bytes.
//
//  The optional 'seed' parameter to crc32 should be the previous
//  CRC result of a previous call to crc32 OR it should be -1 (default).
//

// The CRC table generated by crc32init()
static unsigned      crc_table_initialised = 0;
static unsigned long crc_table[256];

void crc32init(void)                /* build the crc table */
{
    unsigned long crc, poly;
    int	i, j;

    poly = 0xEDB88320L;
    for (i = 0; i < 256; i++)
        {
        crc = i;
        for (j = 8; j > 0; j--)
            {
            if (crc & 1)
                crc = (crc >> 1) ^ poly;
            else
                crc >>= 1;
            }
        crc_table[i] = crc;
        }
        
    crc_table_initialised = 1;
    
    return;
}

unsigned long crc32(char *buf, int bufl, unsigned long seed)    /* calculate the crc value */
{
    register unsigned long crc;

    // If no bufl passed, return seed
    if (bufl <= 0)
      return (unsigned long)-1;
      
    // Initialise table if not already...
    if (!crc_table_initialised) {
      crc32init();
      crc_table_initialised = 1;
    }
    
    // Go for it...
    crc = seed^0xFFFFFFFF;
    for (;bufl;bufl--)
        crc = ((crc>>8) & 0x00FFFFFF) ^ crc_table[ (crc^(*buf++)) & 0xFF ];
    return( crc^0xFFFFFFFF );
}



@


1.3
log
@All tokenised and working (needs ExactHashAndLen() though)
@
text
@d120 1
a120 1
      return -1;
@


1.2
log
@Added CRC32 algorithm to compute string hash
@
text
@d119 2
a120 2
    if (bufl == 0)
      return seed;
d129 1
a129 1
    crc = seed;
@


1.1
log
@More XMLIOStreamBUF work - ...::Read not finished
@
text
@d6 11
d18 2
d62 74
@

