head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2002.11.10.07.41.46;	author Bruce;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.01.06.16.24;	author bferris;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.25.21.40.08;	author bferris;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.23.13.05.44;	author bferris;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.23.07.42.42;	author bferris;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.21.07.11.16;	author bferris;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Converted to GNU/C++ and using makefile
@
text
@/* Copyright (C) 2002, Bruce Ferris */
/*----------------------------------------------------------------------------

  FILE
    
    xmlelmbase.h - Definitions for the base XMLElement implementation
  
  DESCRIPTION
    
    This file contains the definitions base implementation of the XMLElement
    class.
*/

#ifndef _xmlelmbase_h
#define _xmlelmbase_h

#include "xml.h"
#include "xmldocbase.h"

// External classes
class XMLDocumentBase;
class XMLCursorBase;
class XMLCursorParser;
class XMLCursorFree;

//------------------------------------------------------------------------------
//
// CLASS
//
//  XMLElementBase - Base XML Element implementation
//
// DESCRIPTION
//
//  This class is the base implementation for all XML elements.  Any
//  specialisations must specialise this class.
//

class XMLElementBase : public XMLObject {
  
  friend class XMLDocumentBase;
  friend class XMLCursorBase;
  friend class XMLCursorFree;
  
public:
  //
  // Member functions
  //
  
  // Constructors/destructors
  XMLElementBase(XML::Class eclass = XML::ClassUnknown);
  virtual ~XMLElementBase();
  
  // Class
  virtual XML::Class    GetClass(void);
  virtual XMLError      SetClass(XML::Class eclass);

  // Capability
  virtual int           IsMutable(void);
    
  // Validity
  virtual XML::Validity GetValidity(void);
  virtual XMLError      SetValidity(XML::Validity validity);
    
  // Element info
  virtual XMLError      GetType(XMLToken *type);
  virtual XMLError      SetType(XMLToken type);
  
  // Attributes
  virtual XMLError      GetNAttributes(int *numattributes);
  virtual XMLError      GetAttribute(int attrno, XMLToken *name, XMLToken *value);
  virtual XMLError      FindAttribute(XMLToken name, XMLToken *value = NULL);
  virtual XMLError      CreateAttribute(XMLToken name, XMLToken value);
  virtual XMLError      DeleteAttribute(XMLToken name);
  virtual XMLError      DeleteAttributes(void);

  // Simple types  
  virtual XMLError      GetValue(XMLToken *value);
  virtual XMLError      SetValue(XMLToken value);
  
  // Positioning
  virtual XMLError      FirstChild(XMLElementBase **child);
  virtual XMLError      NextSibling(XMLElementBase **sibling);
    
  // Location
  virtual XMLError      GetLocation(XMLLocation *location);
  virtual XMLError      SetLocation(const XMLLocation &location);

  //
  // Protected member functions
  //
protected:

  // Event Notification (from constructor/destructor cursors)
  virtual XMLError      EventRemoved();
  virtual XMLError      EventPrepareToDie(XMLDocument *doc);
  virtual XMLError      EventRemovedChild(XMLElementBase *child);
  virtual XMLError      EventParented(XMLElementBase *parent);
  virtual XMLError      EventChangedNextSibling(XMLElementBase *nextsibling);  
  virtual XMLError      EventChangedPreviousSibling(XMLElementBase *newprevsibling);
  virtual XMLError      EventAddedChild(XMLElementBase *child);
  
  // Releasing tokens
  virtual XMLError      ReleaseToken(XMLDocumentBase *doc, XMLToken *token);
  
  //
  // Protected members
  //
protected:

  // Element chain
  XMLElementBase  *m_prevsibling;  // Next sibling element
  XMLElementBase  *m_nextsibling;  // Previous sibling element
  
  // Element info
  XML::Class       m_class;        // Element class
  XML::Validity    m_validity;     // Element validity
}; 


#endif // _xmlelmbase_h
@


1.5
log
@Added 'compiled' option to manager load, added read test to txml
@
text
@d40 3
a42 3
  friend XMLDocumentBase;
  friend XMLCursorBase;
  friend XMLCursorFree;
@


1.4
log
@Plugged compile write into manager... Need to write emit functions
@
text
@d48 1
@


1.3
log
@All tokenised, ready to test
@
text
@d69 1
@


1.2
log
@Changed 'Type' to 'Class' and 'Name' to 'Type'
@
text
@d18 1
a41 1
  friend XMLCursorParser;
d43 1
a43 1

d53 2
a54 2
  virtual XML::Class GetClass(void);
  virtual XMLError   SetClass(XML::Class eclass);
d57 1
a57 1
  virtual int       IsMutable(void);
d64 2
a65 3
  virtual XMLError  GetType(XMLString **type);
  virtual XMLError  SetType(XMLString *type);
  virtual XMLError  EqualsType(XMLString *type,int *equals);
d68 5
a72 5
  virtual XMLError  GetNAttributes(int *numattributes);
  virtual XMLError  FindAttribute(XMLString *name, XMLString **value);
  virtual XMLError  CreateAttribute(XMLString *name, XMLString *value);
  virtual XMLError  DeleteAttribute(XMLString *name);
  virtual XMLError  DeleteAttributes(void);
d75 2
a76 2
  virtual XMLError  GetValue(XMLString **value);
  virtual XMLError  SetValue(XMLString *value);
d79 2
a80 2
  virtual XMLError  FirstChild(XMLElementBase **child);
  virtual XMLError  NextSibling(XMLElementBase **sibling);
d83 2
a84 2
  virtual XMLError  GetLocation(XMLLocation *location);
  virtual XMLError  SetLocation(const XMLLocation &location);
d91 11
a101 12
  // Owned strings (copies aren't made)
  virtual XMLError  OwnedSetType(XMLString *type);
  virtual XMLError  OwnedCreateAttribute(XMLString *name, XMLString *value);
  virtual XMLError  OwnedSetValue(XMLString *value);
  
  // Event Notification (from constructor cursors)
  virtual XMLError  EventRemoved();
  virtual XMLError  EventRemovedChild(XMLElementBase *child);
  virtual XMLError  EventParented(XMLElementBase *parent);
  virtual XMLError  EventChangedNextSibling(XMLElementBase *nextsibling);  
  virtual XMLError  EventChangedPreviousSibling(XMLElementBase *newprevsibling);
  virtual XMLError  EventAddedChild(XMLElementBase *child);
d107 1
d109 2
a110 2
  XMLElementBase *m_prevsibling;  // Next sibling element
  XMLElementBase *m_nextsibling;  // Previous sibling element
d113 2
a114 2
  XML::Class      m_class;        // Element class
  XML::Validity   m_validity;     // Element validity
@


1.1
log
@Added XMLElementBase, got rid of XMLElement (it's not exposed in API)
@
text
@d49 1
a49 1
  XMLElementBase(XML::Type type = XML::TypeUnknown);
d52 3
a54 3
  // Type
  virtual XML::Type GetType(void);
  virtual XMLError  SetType(XML::Type type);
d64 3
a66 3
  virtual XMLError  GetName(XMLString **name);
  virtual XMLError  SetName(XMLString *name);
  virtual XMLError  EqualsName(XMLString *name,int *equals);
d93 1
a93 1
  virtual XMLError  OwnedSetName(XMLString *name);
d114 1
a114 1
  XML::Type       m_type;         // Element type
@

