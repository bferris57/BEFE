//----------------------------------------------------------------------
//
// File: UtilWin32Drives.cpp - UtilWin32Drives utility
//
// This utility lists the Windows32 drive letters
//
// It was nicked from http://msdn.microsoft.com/en-us/library/cc542456%28v=VS.85%29.aspx
// in an attempt to 1) get it to run, and then 2) genericise it into the
// OperatingSystemWin32 class.
//
// !!! THIS IS A TRANSIENT UTILITY !!!
//

#include "BEFE.h"
#include "Utility.h"
#include "platform/win32/Win32.h"

#include <stdio.h> // TEMP: For printf (this will be going soon)

namespace BEF_NS {

//----------------------------------------------------------------------
//
// First, for Microsoft's code...
//
//----------------------------------------------------------------------

// We'll take a stab on ARRAYSIZE here...
#define ARRAYSIZE(a) sizeof(a)

void DisplayVolumePaths(
        char * VolumeName
        )
{
    Int      CharCount = MAX_PATH + 1;
    Byte    *Names     = NULL;
    Byte    *NameIdx   = NULL;
    Boolean  Success   = false;

    for (;;)
    {
        //
        //  Allocate a buffer to hold the paths.
        Names = new Byte [CharCount];

        if ( !Names )
        {
            //
            //  If memory can't be allocated, return.
            return;
        }

        //
        //  Obtain all of the paths
        //  for this volume.
        Success = GetVolumePathNamesForVolumeName(
            VolumeName, (CHAR *)Names, CharCount, (DWORD *)&CharCount
            );

        if ( Success )
        {
            break;
        }

        if ( GetLastError() != ERROR_MORE_DATA )
        {
            break;
        }

        //
        //  Try again with the
        //  new suggested size.
        delete [] Names;
        Names = NULL;
    }

    if ( Success )
    {
        //
        //  Display the various paths.
        for ( NameIdx = Names;
              NameIdx[0] != '\0';
              NameIdx += Strlen(NameIdx) + 1 )
        {
            printf("  %s", NameIdx);
        }
        printf("\n");
    }

    if ( Names != NULL )
    {
        delete [] Names;
        Names = NULL;
    }

    return;
}

void __cdecl wmain(void)
{
    DWORD  CharCount            = 0;
    TCHAR  DeviceName[MAX_PATH] = "";
    DWORD  Error                = ERROR_SUCCESS;
    HANDLE FindHandle           = INVALID_HANDLE_VALUE;
    BOOL   Found                = FALSE;
    size_t Index                = 0;
    BOOL   Success              = FALSE;
    TCHAR  VolumeName[MAX_PATH] = "";

    //
    //  Enumerate all volumes in the system.
    FindHandle = FindFirstVolume(VolumeName, ARRAYSIZE(VolumeName));

    if (FindHandle == INVALID_HANDLE_VALUE)
    {
        Error = GetLastError();
        printf("FindFirstVolumeA failed with error code %d\n", Error);
        return;
    }

    for (;;)
    {
        //
        //  Skip the \\?\ prefix and remove the trailing backslash.
        Index = Strlen(VolumeName) - 1;

        if (VolumeName[0]     != '\\' ||
            VolumeName[1]     != '\\' ||
            VolumeName[2]     != '?'  ||
            VolumeName[3]     != '\\' ||
            VolumeName[Index] != '\\')
        {
            Error = ERROR_BAD_PATHNAME;
            printf("FindFirstVolume/FindNextVolume returned a bad path: %s\n", VolumeName);
            break;
        }

        //
        //  QueryDosDeviceA does not allow a trailing backslash,
        //  so temporarily remove it.
        VolumeName[Index] = '\0';

        CharCount = QueryDosDevice(&VolumeName[4], DeviceName, ARRAYSIZE(DeviceName));

        VolumeName[Index] = '\\';

        if ( CharCount == 0 )
        {
            Error = GetLastError();
            printf("QueryDosDeviceA failed with error code %d\n", Error);
            break;
        }

        printf("\nFound a device:\n %s", DeviceName);
        printf("\nVolume name: %s", VolumeName);
        printf("\nPaths:");
        DisplayVolumePaths(VolumeName);

        //
        //  Move on to the next volume.
        Success = FindNextVolume(FindHandle, VolumeName, ARRAYSIZE(VolumeName));

        if ( !Success )
        {
            Error = GetLastError();

            if (Error != ERROR_NO_MORE_FILES)
            {
                printf("FindNextVolumeA failed with error code %d\n", Error);
                break;
            }

            //
            //  Finished iterating
            //  through all the volumes.
            Error = ERROR_SUCCESS;
            break;
        }
    }

    FindVolumeClose(FindHandle);
    FindHandle = INVALID_HANDLE_VALUE;

    return;
}

//----------------------------------------------------------------------
//
// Now, for my code...
//
//----------------------------------------------------------------------

Status UtilWin32Drives::Help() {
  Cout << "*** Who cares??? ***\n";
}

Status UtilWin32Drives::Main(Int argc, Byte **argv, Int startat) {

  wmain();

  return Error::None;
}

}; // Namespace BEF_NW